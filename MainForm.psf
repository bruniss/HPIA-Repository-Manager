<File version="3.2">
  <FileID>30f0639c-dcab-44b0-b015-7bc04f5be8cc</FileID>
  <Preview>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
GRUAenp6EBcXh+bmZvT19WkrRymllNJXq91u127Hx8efqMVP65YAoHQ4HBgbG9NG/yMjI1oyoZRS
SumrV9VbVWtV7X26Hk/qtgCgLWxg4BtXhlJKKaUvr6q131Zv3RoAKKWUUjozZACglFJKZ6GvPACY
JQAMOic6ppRSSunM1Cn2vsoAYLAPoM8x0SmllFJKZ6Z9oq33FQUASimllL6ZMgBQSimls9AXCgAN
EgDUjJRSSil9M60XLc8bAPz8/KpHvwKsQ6LMRCmllNI3U1X8xwHcCQz99gCw8LPPam/dCcbV67e1
xEAppZTSN9e7gSHw99/07QGAEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEkDeBf/JP/n9Q0MEnMFKV3AAAAABJRU5ErkJggg==</Preview>
  <Form>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
N3//f4BAcAHUmAAA</Form>
  <Code><![CDATA[
$MainForm_Load={
	
	$console.Text = "Thank you for using my HPIA repo management tool. This tool is HEAVILY inspired by a tool created by Dan Felman called HPIA Softpaq Repository Downloader located here:`n https://github.com/ofelman/HPIA-Repository-Downloader`n`nThe app leverages functions and modules included in HP CMSL created by HP and Gary Blok. Information for CSML is located here:`nhttps://developers.hp.com/hp-client-management/doc/client-management-script-library?language=es`n
	
This tool creates and downloads driver repositories for use with HP Image Assistant. enabled the /offlinerepository: argument and point it to the location of the created repository."
	
	#set the program root folder
	$global:programroot = 'C:\Program Files (x86)\HPIA Driver Repository Management'
	
	#import cmsl modules by file to avoid having to restart the program/shell
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Consent\HP.Consent.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Private\HP.Private.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Utility\HP.Utility.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.ClientManagement\HP.ClientManagement.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Firmware\HP.Firmware.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Softpaq\HP.Softpaq.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Repo\HP.Repo.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Sinks\HP.Sinks.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Retail\HP.Retail.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Notifications\HP.Notifications.psd1"
	
	#initalize a data table to reference for the datagrid
	$script:dt = [System.Data.DataTable]::New()
	
	#create select column with check box
	$removecolumn = New-Object System.Data.DataColumn;
	$removecolumn.DataType = [System.Type]::GetType("System.Boolean");
	$removecolumn.ColumnName = "Select";
	
	
	
	$dt.Columns.Add($removecolumn);
	$dt.Columns.Add('Platform')
	$dt.Columns.Add('Model')
	$dt.Columns.Add('OS Info')
	$dt.Columns.Add('Current Stores')
	
	
	#assign the data table to the datagrid
	$filterinfogrid.DataSource = $dt
	
	
	$filterinfogrid.AutoSizeColumnsMode = 'AllCells'
	$filterinfogrid.Columns[0].ReadOnly = $false
	$filterinfogrid.Columns[1].ReadOnly = $true
	$filterinfogrid.Columns[2].ReadOnly = $true
	$filterinfogrid.Columns[3].ReadOnly = $true
	$filterinfogrid.Columns[4].ReadOnly = $true

}


#region CMSL
# 
#  Copyright 2018-2022 HP Development Company, L.P.
#  All Rights Reserved.
# 
# NOTICE:  All information contained herein is, and remains the property of HP Development Company, L.P.
# 
# The intellectual and technical concepts contained herein are proprietary to HP Development Company, L.P
# and may be covered by U.S. and Foreign Patents, patents in process, and are protected by 
# trade secret or copyright law. Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained from HP Development Company, L.P.

Set-StrictMode -Version 3.0
#requires -Modules "HP.Private","HP.Softpaq"

$RepositoryType = @"
public enum ErrorHandling {
  Fail = 0,
  LogAndContinue = 1
};

public class SoftpaqRepositoryFile {
  public class SoftpaqRepositoryFilter {
      public string platform;
      public string operatingSystem;      
      public string category;
      public string releaseType;
      public string characteristic;
      public bool? preferLTSC;
  };

  public class NotificationConfiguration {
      public string server;
      public int port;
        public bool tls;
        public string[] addresses;
        public string username;
        public string password;
        public string from;
        public string fromname;
  };
  
  public class Configuration {
    public ErrorHandling OnRemoteFileNotFound;
    public int ExclusiveLockMaxRetries;
    public string OfflineCacheMode;
    public string RepositoryReport;
    }


    public string DateCreated;
    public string DateLastModified;
    public string CreatedBy;
    public string ModifiedBy;
  public SoftpaqRepositoryFilter[] Filters;
  public NotificationConfiguration Notifications;
  public Configuration Settings;


}
"@

$REPOFILE = ".repository/repository.json"
$LOGFILE = ".repository/activity.log"

Add-Type -TypeDefinition $RepositoryType

function test-repo
{
	$repo = $txtboxRepoLocation.Text
	if ((Test-Path "$repo\$ver\HPIACommon\.repository") -eq $false)
		{
			$lblNoRepoDetected.Text = "Repository not found for version $ver"
			$lblNoRepoDetected.ForeColor = 'Red'
			$btnSyncOrCreateRepo.Text = 'Create'
		}

	 ((Test-Path "$repo\$ver\HPIACommon\.repository") -eq $true)
		{
			$lblNoRepoDetected.Text = "Repository Detected"
			$lblNoRepoDetected.ForeColor = 'Green'
			$btnSyncOrCreateRepo.Text = "Sync"
		}
}

<#
.SYNOPSIS
  Synchronize repository and generate a report with repository content information

.DESCRIPTION
  This command performs a synchronization of a repository, by downloading latest SoftPaqs associated with the repository filters. At the end of each sync, it creates a repository report in a format (default .CSV) set via Set-RepositoryConfiguration.

  The command may be scheduled via task manager to run on schedule. Define a notification email via Set-RepositoryNotificationConfiguration to receive any failure notifications during unattended operation.

  This command may be followed by Invoke-RepositoryCleanup to remove any obsolete SoftPaqs from the repository.

  Invoke-RepositorySync functionality is not supported in WinPE. 

.PARAMETER Quiet
  Suppress progress messages during operation.

.PARAMETER ReferenceUrl
  Specify an alternate location for the HP Image Assistant (HPIA) Reference files. This URL must be http or https. The Reference files are expected to be at the location pointed to by this URL inside a directory named after the platform ID you want a SoftPaq list for. If not specified, ftp.hp.com is used via HTTPS protocol. 

  For example, If you want to point to 83b2 Win10 OSVer 2009 reference files, Get-SoftpaqList will try to find them in this directory structure: $ReferenceUrl/83b2/83b2_64_10.0.2009.cab

.EXAMPLE
  Invoke-RepositorySync -Quiet

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)
#>
function Invoke-RepositorySync
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Invoke-RepositorySync")]
	param (
		[Parameter(Position = 0, Mandatory = $false)]
		[switch]$Quiet = $false,
		[Alias('Url')]
		[Parameter(Position = 1, Mandatory = $false)]
		[string]$ReferenceUrl = "https://hpia.hpcloud.hp.com/ref"
	)
	
	$repo = LoadRepository
	try
	{
		$cwd = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath((Get-Location))
		$cacheDir = Join-Path -Path $cwd -ChildPath ".repository"
		$cacheDirOffline = $cacheDir + "\cache\offline"
		$reportDir = $cacheDir
		
		# return if repository is not initialized
		if ($repo[0] -eq $false) { return }
		
		# return if repository is initialized but no filters added
		$filters = $repo[1].Filters
		if ($filters.Count -eq 0)
		{
			Write-Verbose "Repository has no filters defined - terminating."
			Write-Verbose ("Flushing the list of markers")
			FlushMarks
			return
		}
		
		$platformGroups = $filters | Group-Object -Property platform
		$normalized = @()
		
		foreach ($pobj in $platformGroups)
		{
			
			$items = $pobj.Group
			
			if ($items | Where-Object -Property operatingSystem -EQ -Value "*")
			{
				$items | ForEach-Object { $_.OperatingSystem = "*" }
			}
			
			if ($items | Where-Object -Property category -EQ -Value "*")
			{
				$items | ForEach-Object { $_.Category = "*" }
			}
			
			if ($items | Where-Object -Property releaseType -EQ -Value "*")
			{
				$items | ForEach-Object { $_.ReleaseType = "*" }
			}
			
			if ($items | Where-Object -Property characteristic -EQ -Value "*")
			{
				$items | ForEach-Object { $_.characteristic = "*" }
			}
			
			$normalized += $items | sort -Unique -Property operatingSystem, category, releaseType, characteristic
		}
		
		$softpaqlist = @()
		Log "Repository sync has started"
		$softpaqListCmd = @{ }
		
		
		# build the list of SoftPaqs to download
		foreach ($c in $normalized)
		{
			Write-Verbose ($c | Format-List | Out-String)
			
			if (Get-HPDeviceDetails -Platform $c.platform -Url $ReferenceUrl)
			{
				$softpaqListCmd.platform = $c.platform.ToLower()
				$softpaqListCmd.Quiet = $Quiet
				$softpaqListCmd.verbose = $VerbosePreference
				
				Write-Verbose ("Working on a rule for platform $($softpaqListCmd.platform)")
				
				if ($c.OperatingSystem.StartsWith("win10:"))
				{
					$split = $c.OperatingSystem -split ':'
					$softpaqListCmd.OS = $split[0]
					$softpaqListCmd.osver = $split[1]
				}
				elseif ($c.OperatingSystem -eq "win10")
				{
					$softpaqListCmd.OS = "win10"
					$softpaqListCmd.osver = GetCurrentOSVer
				}
				elseif ($c.OperatingSystem.StartsWith("win11:"))
				{
					$split = $c.OperatingSystem -split ':'
					$softpaqListCmd.OS = $split[0]
					$softpaqListCmd.osver = $split[1]
				}
				elseif ($c.OperatingSystem -eq "win11")
				{
					$softpaqListCmd.OS = "win11"
					$softpaqListCmd.osver = GetCurrentOSVer
				}
				elseif ($c.OperatingSystem -ne "*")
				{
					$softpaqListCmd.OS = $c.OperatingSystem
					#$softpaqListCmd.osver = $null
				}
				
				if ($c.characteristic -ne "*")
				{
					$softpaqListCmd.characteristic = $c.characteristic.ToUpper().Split()
					Write-Verbose "Filter-characteristic:$($softpaqListCmd.characteristic)"
				}
				
				if ($c.ReleaseType -ne "*")
				{
					$softpaqListCmd.ReleaseType = $c.ReleaseType.Split()
					Write-Verbose "Filter-releaseType:$($softpaqListCmd.releaseType)"
				}
				if ($c.Category -ne "*")
				{
					$softpaqListCmd.Category = $c.Category.Split()
					Write-Verbose "Filter-category:$($softpaqListCmd.category)"
				}
				if ($c.preferLTSC -eq $true)
				{
					$softpaqListCmd.PreferLTSC = $true
					Write-Verbose "Filter-preferLTSC:$($softpaqListCmd.PreferLTSC)"
				}
				
				Log "Reading the softpaq list for platform $($softpaqListCmd.platform)"
				add-logs "Reading the softpaq list for platform $($softpaqListCmd.platform)"
				
				Write-Verbose "Trying to get SoftPaqs from $ReferenceUrl"
				$results = Get-SoftpaqList @softpaqListCmd -cacheDir $cacheDir -maxRetries $repo[1].settings.ExclusiveLockMaxRetries -ReferenceUrl $ReferenceUrl -AddHttps
				Log "softpaq list for platform $($softpaqListCmd.platform) created"
				add-logs "softpaq list for platform $($softpaqListCmd.platform) created"

				$softpaqlist += $results
				
				
				$OfflineCacheMode = $repo[1].settings.OfflineCacheMode
				if ($OfflineCacheMode -eq "Enable")
				{
					
					# keep the download order of PlatformList, Advisory data and Knowledge Base as is to maintain unit tests
					if (-not $ReferenceUrl.EndsWith('/'))
					{
						$ReferenceUrl = $ReferenceUrl + "/"
					}
					$baseurl = $ReferenceUrl
					$url = $baseurl + "platformList.cab"
					$filename = "platformList.cab"
					Write-Verbose "Trying to download PlatformList... $url"
					try
					{
						$PlatformList = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirOffline -Expand
						Write-Verbose "Finish downloading PlatformList - $PlatformList"
					}
					catch
					{
						$url = "https://ftp.hp.com/pub/caps-softpaq/cmit/imagepal/ref/platformList.cab"
						Write-Verbose "Trying to download PlatformList from FTP... $url"
						$PlatformList = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirOffline -Expand
						if (-not $PlatformList)
						{
							$exception = $_.Exception
							switch ($repo[1].settings.OnRemoteFileNotFound)
							{
								"LogAndContinue" {
									[string]$data = formatSyncErrorMessageAsHtml $exception
									Log ($data -split "`n")
									add-logs ($data -split "`n")
									send "Softpaq repository synchronization error" $data
								}
								# "Fail"
								default {
									throw $exception
								}
							}
						}
					}
					
					# download Advisory data
					$url = $baseurl + "$($softpaqListCmd.platform)/$($softpaqListCmd.platform)_cds.cab"
					$cacheDirAdvisory = $cacheDirOffline + "\$($softpaqListCmd.platform)"
					$filename = "$($softpaqListCmd.platform)_cds.cab"
					Write-Verbose "Trying to download Advisory Data Files... $url"
					try
					{
						$AdvisoryFile = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirAdvisory -Expand
						Write-Verbose "Finish downloading Advisory Data Files - $AdvisoryFile"
					}
					catch
					{
						$baseurl = "https://ftp.hp.com/pub/caps-softpaq/cmit/imagepal/ref/"
						$url = $baseurl + "$($softpaqListCmd.platform)/$($softpaqListCmd.platform)_cds.cab"
						Write-Verbose "Trying to download Advisory Data from FTP... $url"
						#$cacheDirAdvisory = $cacheDirOffline + "\$($softpaqListCmd.platform)"
						#$filename = "$($softpaqListCmd.platform)_cds.cab"
						$AdvisoryFile = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirAdvisory -Expand
						Write-Verbose "Finish downloading Advisory Data Files - $AdvisoryFile"
						if (-not $AdvisoryFile)
						{
							$exception = $_.Exception
							switch ($repo[1].settings.OnRemoteFileNotFound)
							{
								"LogAndContinue" {
									[string]$data = formatSyncErrorMessageAsHtml $exception
									Log ($data -split "`n")
									send "Softpaq repository synchronization error" $data
								}
								# "Fail"
								default {
									throw $exception
								}
							}
						}
					}
					
					# download Knowledge Base
					$url = $baseurl + "../kb/common/latest.cab"
					$cacheDirKb = $cacheDirOffline + "\kb\common"
					$filename = "latest.cab"
					Write-Verbose "Trying to download Knowledge Base... $url"
					try
					{
						$KnowledgeBase = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirKb
						Write-Verbose "Finish downloading Knowledge Base - $KnowledgeBase"
					}
					catch
					{
						$url = "https://ftp.hp.com/pub/caps-softpaq/cmit/imagepal/kb/common/latest.cab"
						Write-Verbose "Trying to download Knowledge Base from FTP... $url"
						#$cacheDirKb = $cacheDirOffline + "\kb\common"
						#$filename = "latest.cab"
						$KnowledgeBase = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirKb
						Write-Verbose "Finish downloading Knowledge Base - $KnowledgeBase"
						if (-not $KnowledgeBase)
						{
							$exception = $_.Exception
							switch ($repo[1].settings.OnRemoteFileNotFound)
							{
								"LogAndContinue" {
									[string]$data = formatSyncErrorMessageAsHtml $exception
									Log ($data -split "`n")
									send "Softpaq repository synchronization error" $data
								}
								# "Fail"
								default {
									throw $exception
								}
							}
						}
					}
				}
			}
			else
			{
				Write-Host -ForegroundColor Cyan "Platform $($c.platform) doesn't exist. Please add a valid platform."
				Write-LogWarning "Platform $($c.platform) in not valid, and is was skipped."
			}
		}
		
		Write-Verbose ("Done with the list, repository is $($softpaqlist.Count) softpaqs.")
		[array]$softpaqlist = @($softpaqlist | Sort-Object -Unique -Property Id)
		Write-Verbose ("After trimming duplicates, we have $($softpaqlist.Count) softpaqs.")
		
		
		Write-Verbose ("Flushing the list of markers")
		FlushMarks
		Write-Verbose ("Writing new marks")
		
		# generate .mark file for each SoftPaq to be downloaded
		foreach ($sp in $softpaqList)
		{
			$number = $sp.id.ToLower().TrimStart("sp")
			TouchFile -File ".repository/mark/$number.mark"
		}
		
		Write-Verbose ("Starting download")
		$downloadCmd = @{ }
		$downloadCmd.Quiet = $quiet
		$downloadCmd.Verbose = $VerbosePreference
		
		Log "Download has started for $($softpaqlist.Count) softpaqs."
		add-logs "Download has started for $($softpaqlist.Count) softpaqs."
		foreach ($sp in $softpaqlist)
		{
			$downloadCmd.Number = $sp.id.ToLower().TrimStart("sp")
			$downloadCmd.Url = $sp.url -Replace "/$($sp.id).exe$", ''
			Write-Verbose "Working on data for softpaq $($downloadCmd.number)"
			try
			{
				Log "Start downloading files for sp$($downloadCmd.number)."
				add-logs "Start downloading files for sp$($downloadCmd.number)."
				DownloadSoftpaq -DownloadSoftpaqCmd $downloadCmd -MaxRetries $repo[1].settings.ExclusiveLockMaxRetries -Verbose:$VerbosePreference
				
				if ($OfflineCacheMode -eq "Enable")
				{
					Log ("    sp$($downloadCmd.number).html - Downloading Release Notes.")
					add-logs ("    sp$($downloadCmd.number).html - Downloading Release Notes.")
					$ReleaseNotesurl = Get-HPPrivateItemUrl $downloadCmd.number "html"
					$target = "sp$($downloadCmd.number).html"
					$targetfile = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($target)
					Invoke-HPPrivateDownloadFile -url $ReleaseNotesurl -Target $targetfile
					Log ("    sp$($downloadCmd.number).html - Done Downloading Release Notes.")
					add-logs ("    sp$($downloadCmd.number).html - Done Downloading Release Notes.")
				}
				Log "Finish downloading files for sp$($downloadCmd.number)."
				add-logs "Finish downloading files for sp$($downloadCmd.number)."
			}
			catch
			{
				$exception = $_.Exception
				
				switch ($repo[1].settings.OnRemoteFileNotFound)
				{
					"LogAndContinue" {
						[string]$data = formatSyncErrorMessageAsHtml $exception
						Log ($data -split "`n")
						add-logs ($data -split "`n")
						send "Softpaq repository synchronization error" $data
					}
					# "Fail"
					default {
						throw $exception
					}
				}
			}
		}
		
		Log "Repository sync has ended"
		add-logs "Repository sync has ended"
		Write-Verbose "Repository Sync has ended."
		
		Log "Repository Report creation started"
		add-logs "Repository Report creation started"
		Write-Verbose "Repository Report creation started."
		
		try
		{
			# get the configuration set for repository report if any
			$RepositoryReport = $repo[1].settings.RepositoryReport
			if ($RepositoryReport)
			{
				$Format = $RepositoryReport
				New-RepositoryReport -Format $Format -RepositoryPath "$cwd" -OutputFile "$cwd\.repository\Contents.$Format"
				Log "Repository Report created as Contents.$Format"
				add-logs "Repository Report created as Contents.$Format"
				Write-Verbose "Repository Report created as Content.$Format."
			}
		}
		catch [System.IO.FileNotFoundException]{
			Write-Verbose "No data available to create Repository Report as directory '$(Get-Location)' does not contain any CVA files."
			Log "No data available to create Repository Report as directory '$(Get-Location)' does not contain any CVA files."
		}
		catch
		{
			Write-Verbose "Error in creating Repository Report"
			Log "Error in creating Repository Report."
		}
	}
	catch
	{
		err "Repository synchronization failed: $($_.Exception.Message)" $true
		[string]$data = formatSyncErrorMessageAsHtml $_.Exception
		Log ($data -split "`n")
		add-logs ($data -split "`n")
		send "Softpaq repository synchronization error" $data
	}
}

Add-Type -TypeDefinition $RepositoryType

# print a bare error
function err
{
	[CmdletBinding()]
	param (
		[string]$str,
		[boolean]$withLog = $true
	)
	
	[console]::ForegroundColor = 'red'
	[console]::Error.WriteLine($str)
	[console]::ResetColor()
	
	if ($withLog) { Write-LogError -Message $str -Component "HP.Repo" -File $LOGFILE }
}

# convert a date object to an 8601 string
function ISO8601DateString
{
	[CmdletBinding()]
	param (
		[datetime]$Date
	)
	$Date.ToString("yyyy-MM-dd'T'HH:mm:ss.fffffff", [System.Globalization.CultureInfo]::InvariantCulture)
}

# get current user name
function GetUserName ()
{
	[CmdletBinding()]
	param ()
	
	try
	{
		[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
	}
	catch
	{
		return $env:username
	}
}

# check if a file exists
function FileExists
{
	[CmdletBinding()]
	param (
		[string]$File
	)
	Test-Path $File -PathType Leaf
}

# load a json object
function LoadJson
{
	[CmdletBinding()]
	param (
		[string]$File
	)
	
	try
	{
		$PS7Mark = "PS7Mark"
		$rawData = (Get-Content -Raw -Path $File) -replace '("DateLastModified": ")([^"]+)(")', ('$1' + $PS7Mark + '$2' + $PS7Mark + '$3')
		[SoftpaqRepositoryFile]$result = $rawData | ConvertFrom-Json
		$result.DateLastModified = $result.DateLastModified -replace $PS7Mark, ""
		return $result
	}
	catch
	{
		err ("Could not parse '$File'  $($_.Exception.Message)")
		return $Null
	}
}

# load a repository definition file
function LoadRepository
{
	[CmdletBinding()]
	param ()
	
	Write-Verbose "loading $REPOFILE"
	$inRepo = FileExists -File $REPOFILE
	if (-not $inRepo)
	{
		throw [System.Management.Automation.ItemNotFoundException]"Directory '$(Get-Location)' is not a repository."
	}
	
	$repo = LoadJson -File $REPOFILE
	if (-not $repo -eq $null)
	{
		err ("Could not initialize the repository: $($_.Exception.Message)")
		return $false, $null
	}
	
	if (-not $repo.Filters) { $repo.Filters = @() }
	
	if (-not $repo.settings)
	{
		$repo.settings = New-Object SoftpaqRepositoryFile+Configuration
	}
	
	if (-not $repo.settings.OnRemoteFileNotFound)
	{
		$repo.settings.OnRemoteFileNotFound = [ErrorHandling]::Fail
	}
	
	if (-not $repo.settings.ExclusiveLockMaxRetries)
	{
		$repo.settings.ExclusiveLockMaxRetries = 10
	}
	
	if (-not $repo.settings.OfflineCacheMode)
	{
		$repo.settings.OfflineCacheMode = "Disable"
	}
	
	if (-not $repo.settings.RepositoryReport)
	{
		$repo.settings.RepositoryReport = "CSV"
	}
	
	foreach ($filter in $repo.Filters)
	{
		if (-not $filter.characteristic)
		{
			$filter.characteristic = "*"
		}
		if (-not $filter.preferLTSC)
		{
			$filter.preferLTSC = $false
		}
	}
	
	if (-not $repo.Notifications)
	{
		$repo.Notifications = New-Object SoftpaqRepositoryFile+NotificationConfiguration
		$repo.Notifications.port = 25
		$repo.Notifications.tls = $false
		$repo.Notifications.UserName = ""
		$repo.Notifications.Password = ""
		$repo.Notifications.from = "softpaq-repo-sync@$($env:userdnsdomain)"
		$repo.Notifications.fromname = "Softpaq Repository Notification"
	}
	
	Write-Verbose "load success"
	return $true, $repo
}

# download a SoftPaq, optionally checking existing SoftPaqs. Note that CVAs are always
# downloaded since there is no reliable way to check their consistency.

function DownloadSoftpaq
{
	[CmdletBinding()]
	param (
		$DownloadSoftpaqCmd,
		[int]$MaxRetries = 10
	)
	$download_file = $true
	$filename = "sp" + $DownloadSoftpaqCmd.number + ".exe"
	$CVAname = "sp" + $DownloadSoftpaqCmd.number + ".cva"
	
	# downloading the CVA 
	Write-Verbose ("Downloading CVA $($DownloadSoftpaqCmd.number)")
	Log ("    sp$($DownloadSoftpaqCmd.number).cva - Downloading CVA file.")
	Get-SoftpaqMetadataFile @DownloadSoftpaqCmd -MaxRetries $MaxRetries
	Log ("    sp$($DownloadSoftpaqCmd.number).cva - Done downloading CVA file.")
	
	if (FileExists -File $filename)
	{
		Write-Verbose "Checking signature for existing file $filename"
		if (Get-HPPrivateCheckSignature -File $filename -CVAfile $CVAname -Verbose:$VerbosePreference -Progress:(-not $DownloadSoftpaqCmd.Quiet))
		{
			
			if (-not $DownloadSoftpaqCmd.Quiet)
			{
				Write-Host -ForegroundColor Magenta "File $filename already exists and passes signature check. It will not be redownloaded."
			}
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Already exists. Will not redownload.")
			$download_file = $false
		}
		else
		{
			Write-Verbose ("Need to redownload file '$filename'")
		}
	}
	else
	{
		Write-Verbose ("Need to download file '$filename'")
	}
	
	
	if ($download_file -eq $true)
	{
		try
		{
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Downloading EXE file.")
			Get-Softpaq @DownloadSoftpaqCmd -MaxRetries $MaxRetries -Overwrite yes
			# check post-download integrity
			if (-not (Get-HPPrivateCheckSignature -File $filename -CVAfile $CVAname -Verbose:$VerbosePreference -Progress:(-not $DownloadSoftpaqCmd.Quiet)))
			{
				Remove-Item -Path $filename -Force -Verbose:$VerbosePreference
				Remove-Item -Path $CVAName -Force -Verbose:$VerbosePreference
				$msg = "File $filename failed integrity check and has been deleted, will retry download next sync"
				if (-not $DownloadSoftpaqCmd.Quiet)
				{
					Write-Host -ForegroundColor Magenta $msg
				}
				Write-LogWarning -Message $msg -Component "HP.Repo" -File $LOGFILE
				
			}
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Done downloading EXE file.")
		}
		catch
		{
			Write-Host -ForegroundColor Magenta "File sp$($DownloadSoftpaqCmd.number).exe has invalid or missing signature and will be deleted."
			Log ("    sp$($DownloadSoftpaqCmd.number).exe has invalid or missing signature and will be deleted.")
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Redownloading EXE file.")
			Get-Softpaq @DownloadSoftpaqCmd -maxRetries $maxRetries
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Done downloading EXE file.")
		}
	}
}

# write a repository definition file
function WriteRepositoryFile
{
	[CmdletBinding()]
	param ($obj)
	
	$now = Get-Date
	$obj.DateLastModified = ISO8601DateString -Date $now
	$obj.ModifiedBy = GetUserName
	Write-Verbose "Writing repository file to $REPOFILE"
	$obj | ConvertTo-Json | Out-File -Force $REPOFILE
}

# check if a filter exists in a repo object
function FilterExists
{
	[CmdletBinding()]
	param ($repo,
		$f)
	
	$c = getFilters $repo $f
	return ($null -ne $c)
}

# get a list of filters in a repo, matching exact parameters
function getFilters
{
	[CmdletBinding()]
	param ($repo,
		$f)
	
	if ($repo.Filters.Count -eq 0) { return $null }
	$repo.Filters | Where-Object {
		$_.platform -eq $f.platform -and
		$_.OperatingSystem -eq $f.OperatingSystem -and
		$_.Category -eq $f.Category -and
		$_.ReleaseType -eq $f.ReleaseType -and
		$_.characteristic -eq $f.characteristic -and
		$_.preferLTSC -eq $f.preferLTSC
	}
}

# get a list of filters in a repo, considering empty parameters as wildcards
function GetFiltersWild
{
	[CmdletBinding()]
	param ($repo,
		$f)
	
	if ($repo.Filters.Count -eq 0) { return $null }
	$repo.Filters | Where-Object {
		$_.platform -eq $f.platform -and
		(
			$_.OperatingSystem -eq $f.OperatingSystem -or
			$f.OperatingSystem -eq "*" -or
			($f.OperatingSystem -eq "win10:*" -and $_.OperatingSystem.StartsWith("win10")) -or
			($f.OperatingSystem -eq "win11:*" -and $_.OperatingSystem.StartsWith("win11"))
		) -and
		($_.Category -eq $f.Category -or $f.Category -eq "*") -and
		($_.ReleaseType -eq $f.ReleaseType -or $f.ReleaseType -eq "*") -and
		($_.characteristic -eq $f.characteristic -or $f.characteristic -eq "*") -and
		($_.preferLTSC -eq $f.preferLTSC -or $null -eq $f.preferLTSC)
	}
}

# write a log entry to the .repository/activity.log
function Log
{
	[CmdletBinding()]
	param ([string[]]$entryText)
	
	foreach ($line in $entryText)
	{
		if (-not $line)
		{
			$line = " "
		}
		Write-LogInfo -Message $line -Component "HP.Repo" -File $LOGFILE
	}
	
}

# touch a file (change its date if exists, or create it if it doesn't.
function TouchFile
{
	[CmdletBinding()]
	param ([string]$File)
	
	if (Test-Path $File) { (Get-ChildItem $File).LastWriteTime = Get-Date }
	else { Write-Output $null > $File }
}


# remove all marks from the repository
function FlushMarks
{
	[CmdletBinding()]
	param ()
	
	Write-Verbose "Removing all marks"
	Remove-Item ".repository\mark\*" -Include "*.mark"
}


# send a notification email
function Send
{
	[CmdletBinding()]
	param (
		$subject,
		$body,
		$html = $true
	)
	
	$n = Get-RepositoryNotificationConfiguration
	if ((-not $n) -or (-not $n.server))
	{
		Write-Verbose ("Notifications are not configured")
		return
	}
	
	try
	{
		if ((-not $n.addresses) -or (-not $n.addresses.Count))
		{
			Write-Verbose ("Notifications have no recipients defined")
			return
		}
		Log ("Sending a notification email")
		
		$params = @{ }
		$params.To = $n.addresses
		$params.SmtpServer = $n.server
		$params.port = $n.port
		$params.UseSsl = $n.tls
		$params.from = "$($n.fromname) <$($n.from)>"
		$params.Subject = $subject
		$params.Body = $body
		$params.BodyAsHtml = $html
		
		Write-Verbose ("server: $($params.SmtpServer)")
		Write-Verbose ("port: $($params.Port)")
		
		if ([string]::IsNullOrEmpty($n.UserName) -eq $false)
		{
			try
			{
				[SecureString]$read = $n.Password | ConvertTo-SecureString
				$params.Credential = New-Object System.Management.Automation.PSCredential ($n.UserName, $read)
				if (-not $params.Credential)
				{
					Log ("Could not build credential object from username and password")
					return;
				}
			}
			catch
			{
				err ("Failed to build credential object from username and password: $($_.Exception.Message)")
				return
			}
		}
		Send-MailMessage @params -ErrorAction Stop
	}
	catch
	{
		err ("Could not send email: $($_.Exception.Message)")
		return
	}
	Write-Verbose ("Send complete.")
}

<#
.SYNOPSIS
    Initialize a repository in the current directory. 

.DESCRIPTION
  This command initializes a directory to be used as a repository. It creates a .repository folder in the current directory,
  which contains the definition of the .repository and all its settings.

  In order to un-initalize a directory, simple remove the .repository folder.

  After initializing a repository, you must add at least one filter to define the content that this repository will receive.

  If the directory already contains a repository, the command will fail.

.EXAMPLE
    Initialize-Repository

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.LINK
  [Get-RepositoryConfiguration](Get-RepositoryConfiguration)

.LINK
  [Set-RepositoryConfiguration](Set-RepositoryConfiguration)
#>
function Initialize-Repository
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Initialize-Repository")]
	param ()
	
	if (FileExists -File $REPOFILE)
	{
		err "This directory is already initialized as a repository."
		return
	}
	$now = Get-Date
	$newRepositoryFile = New-Object SoftpaqRepositoryFile
	
	$newRepositoryFile.settings = New-Object SoftpaqRepositoryFile+Configuration
	$newRepositoryFile.settings.OnRemoteFileNotFound = [ErrorHandling]::Fail
	$newRepositoryFile.settings.ExclusiveLockMaxRetries = 10
	$newRepositoryFile.settings.OfflineCacheMode = "Disable"
	$newRepositoryFile.settings.RepositoryReport = "CSV"
	
	$newRepositoryFile.DateCreated = ISO8601DateString -Date $now
	$newRepositoryFile.CreatedBy = GetUserName
	
	try
	{
		New-Item -ItemType directory -Path .repository | Out-Null
		WriteRepositoryFile -obj $newRepositoryFile
		New-Item -ItemType directory -Path ".repository/mark" | Out-Null
	}
	catch
	{
		err ("Could not initialize the repository: $($_.Exception.Message)")
		return
	}
	Log "Repository initialized successfully."
}

<#
.SYNOPSIS
    Add a filter to the repository. 

.DESCRIPTION
  This function adds a filter to a repository, which was previously initialized by Initialize-Repository.

  The repository can contain one or more filters, and the effective filtering will be the sum of all filters defined.

.PARAMETER Platform
  Specifies the given platform as a platform to include in this repository. This is a platform ID, a 4-digit hexadecimal number, as obtained by Get?HPDeviceProductID.

.PARAMETER Os
  Specifies the operating system to be include in this repository. The field must be one of "win10" or "win11". If this parameter is not specified, all operating systems associated with the specified platform will be included.

.PARAMETER OsVer
  Specify the target OS Version (e.g. "1809", "1903", "1909", "2004", "2009", "21H1", "21H2", "22H2" etc). Starting from 21H1 release, "xxHx" format is expected. If the parameter is not specified, current operating system version will be assumed, which may not be what is intended.

.PARAMETER Category
  Specifies the SoftPaq category to be include in this repository. The category must be one (or more) of "Bios", "Firmware", "Driver", "Software", "OS", "Manageability", "Diagnostic", "Utility", "Driverpack", "Dock", "UWPPack".
  If this parameter is not specified, all categories are included.

.PARAMETER ReleaseType
  Specifies the SoftPaq release type to be include in this repository. The release type must be one (or more) of "critical", "recommended", "routine". If this parameter is not specified, all release types are included.

.PARAMETER Characteristic
  Specifies the SoftPaq characteristic to be include in this repository. The characteristic must be one of "ssm", "dpb", "uwp". If this parameter is not specified, all characteristics are included.

.PARAMETER PreferLTSC
  If specified, LTSB/LTSC reference file is preferred for the entered Platform. If the LTSB/LTSC reference file doesn't exist, falls back to regular reference file for that platform.

.EXAMPLE
  Add-RepositoryFilter -Platform 1234 -Os win10 -OsVer 2009

.EXAMPLE
  Add-RepositoryFilter -Platform 1234 -Os win10 -OsVer "21H1"

.EXAMPLE
  Add-RepositoryFilter -Platform 1234 -Os win10 -OsVer "21H1" -PreferLTSC

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.LINK
  [Get-HPDeviceProductID](Get-HPDeviceProductID)
#>
function Add-RepositoryFilter
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Add-RepositoryFilter")]
	param (
		[ValidatePattern("^[a-fA-F0-9]{4}$")]
		[Parameter(Position = 0, Mandatory = $true)]
		[string]$Platform,
		[ValidateSet("win7", "win8", "win8.1", "win81", "win10", "win11", "*")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 1)]
		$Os = "*",
		[string[]][ValidateSet("1809", "1903", "1909", "2004", "2009", "21H1", "21H2", "22H2")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 1)]
		[string]$OsVer,
		[ValidateSet("Bios", "Firmware", "Driver", "Software", "Os", "Manageability", "Diagnostic", "Utility", "Driverpack", "Dock", "UWPPack", "*")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 2)]
		[string[]]$Category = "*",
		[ValidateSet("Critical", "Recommended", "Routine", "*")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 3)]
		[string[]]$ReleaseType = "*",
		[ValidateSet("SSM", "DPB", "UWP", "*")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 4)]
		[string[]]$Characteristic = "*",
		[Parameter(Position = 5, Mandatory = $false)]
		[switch]$PreferLTSC
	)
	
	$c = LoadRepository
	try
	{
		if ($c[0] -eq $false) { return }
		$repo = $c[1]
		
		$newFilter = New-Object SoftpaqRepositoryFile+SoftpaqRepositoryFilter
		$newFilter.platform = $Platform
		
		$newFilter.OperatingSystem = $Os
		if (-not $OsVer)
		{
			$OsVer = GetCurrentOSVer
		}
		if ($OsVer) { $OsVer = $OsVer.ToLower() }
		if ($Os -eq "win10") { $newFilter.OperatingSystem = "win10:$OsVer" }
		elseif ($Os -eq "win11") { $newFilter.OperatingSystem = "win11:$OsVer" }
		
		$newFilter.Category = $Category
		$newFilter.ReleaseType = $ReleaseType
		$newFilter.characteristic = $Characteristic
		$newFilter.preferLTSC = $PreferLTSC.IsPresent
		
		# silently ignore if the filter is already in the repo
		$exists = filterExists $repo $newFilter
		if (!$exists)
		{
			$repo.Filters += $newFilter
			WriteRepositoryFile -obj $repo
			if ($OsVer -and $Os -ne '*') { Log "Added filter $Platform {{ os='$Os', osver='$OsVer', category='$Category', release='$ReleaseType', characteristic='$Characteristic', preferLTSC='$($PreferLTSC.IsPresent)' }}" }
			else { Log "Added filter $Platform {{ os='$Os', category='$Category', release='$ReleaseType', characteristic='$Characteristic', preferLTSC='$($PreferLTSC.IsPresent)' }}" }
		}
		else
		{
			Write-Verbose "Silently ignoring this filter since exact match is already in the repository"
		}
		Write-Verbose "Repository filter added."
	}
	catch
	{
		err ("Could not add filter to the repository:  $($_.Exception.Message)")
	}
}


<#
.SYNOPSIS
  Remove one or more filters from the repository. 

.DESCRIPTION
  This function modifies the repository to remove filters from the repository definition.

  If an optional parameter is not specified, it will be considered a wildcard and match any value. Therefore this command may result in multiple filters being deleted.

.PARAMETER Platform
  The platform to remove. This is a 4-digit hex number, and can be obtained via Get-HPDeviceProductID

.PARAMETER Os
  An optional parameter to narrow down the filter to a specific OS for the specified platform. If not specified, all OS will be matched.

.PARAMETER OsVer
  Specify the target OS Version (e.g. "1809", "1903", "1909", "2004", "2009", "21H1", "21H2", "22H2" etc). Starting from 21H1 release, "xxHx" format is expected. If the parameter is not specified, current operating system version will be assumed, which may not be what is intended.

.PARAMETER Category
  An optional parameter to narrow down the filter to a specific category for the specified platform. If not specified, all categories will be matched.

.PARAMETER ReleaseType
  An optional parameter to narrow down the filter to a specific release type for the specified platform. If not specified, all release types will be matched.

.PARAMETER Characteristic
  An optional parameter to narrow down the filter to a specific characteristic for the specified platform. If not specified, all characteristics will be matched.

.PARAMETER PreferLTSC
  An optional boolean parameter to narrow down the filter to a specific LTSB/LTSC reference file preference for the specified platform. If not specified, all preferences will be matched.

.PARAMETER Yes
  An optional parameter to provide. If not specified, script will ask for confirmation before deleting a filter. If specified, script will go ahead and delete the filter without confirming.

.EXAMPLE
  Remove-RepositoryFilter -Platform 1234

.EXAMPLE
  Remove-RepositoryFilter -Platform 1234 -Os win10 -OsVer "21H1"

.EXAMPLE
  Remove-RepositoryFilter -Platform 1234 -Os win10 -OsVer "21H1" -PreferLTSC $True

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Get-HPDeviceProductID](Get-HPDeviceProductID)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)
#>
function Remove-RepositoryFilter
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Remove-RepositoryFilter")]
	param (
		[ValidatePattern("^[a-fA-F0-9]{4}$")]
		[Parameter(Position = 0, Mandatory = $true)]
		[string]$Platform,
		[ValidateSet("win7", "win8", "win8.1", "win81", "win10", "win11", "*")]
		# keep in sync with the SoftPaq module
		[string[]][Parameter(Position = 1)]
		$Os = "*",
		[ValidateSet("1809", "1903", "1909", "2004", "2009", "21H1", "21H2", "22H2")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 1)]
		[string]$OsVer,
		[ValidateSet("Bios", "Firmware", "Driver", "Software", "Os", "Manageability", "Diagnostic", "Utility", "Driverpack", "Dock", "UWPPack", "*")]
		# keep in sync with the SoftPaq module
		[string[]][Parameter(Position = 2)]
		$Category = "*",
		[ValidateSet("Critical", "Recommended", "Routine", "*")]
		# keep in sync with the SoftPaq module
		[string[]][Parameter(Position = 3)]
		$ReleaseType = "*",
		[Parameter(Position = 4, Mandatory = $false)]
		[switch]$Yes = $false,
		[ValidateSet("SSM", "DPB", "UWP", "*")]
		# keep in sync with the SoftPaq module
		[string[]][Parameter(Position = 5)]
		$Characteristic = "*",
		[Parameter(Position = 5, Mandatory = $false)]
		[nullable[boolean]]$PreferLTSC = $null
	)
	
	$c = LoadRepository
	try
	{
		if ($c[0] -eq $false) { return }
		
		$newFilter = New-Object SoftpaqRepositoryFile+SoftpaqRepositoryFilter
		$newFilter.platform = $Platform
		$newFilter.OperatingSystem = $Os
		
		if ($Os -eq "win10")
		{
			if ($OsVer) { $newFilter.OperatingSystem = "win10:$OsVer" }
			else { $newFilter.OperatingSystem = "win10:*" }
		}
		elseif ($Os -eq "win11")
		{
			if ($OsVer) { $newFilter.OperatingSystem = "win11:$OsVer" }
			else { $newFilter.OperatingSystem = "win11:*" }
		}
		
		$newFilter.Category = $Category
		$newFilter.ReleaseType = $ReleaseType
		$newFilter.characteristic = $Characteristic
		$newFilter.preferLTSC = $PreferLTSC
		
		$todelete = getFiltersWild $c[1] $newFilter
		if (-not $todelete)
		{
			Write-Verbose ("No matching filter to delete")
			return
		}
		
		if (-not $Yes.IsPresent)
		{
			Write-Host "The following filters will be deleted:" -ForegroundColor Cyan
			$todelete | ConvertTo-Json -Depth 2 | Write-Host -ForegroundColor Cyan
			$answer = Read-Host "Enter 'y' to continue: "
			if ($answer -ne "y")
			{
				Write-Host 'Aborted.'
				return
			}
		}
		
		$c[1].Filters = $c[1].Filters | Where-Object { $todelete -notcontains $_ }
		WriteRepositoryFile -obj $c[1]
		
		foreach ($f in $todelete)
		{
			Log "Removed filter $($f.platform) { os='$($f.operatingSystem)', category='$($f.category)', release='$($f.releaseType), characteristic='$($f.characteristic)' }"
		}
	}
	catch
	{
		err ("Could not remove filter from repository: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
    Show the current repository definition. 

.DESCRIPTION
  Get the repository definition as an object. This command must be run inside an initialized repository.
  
.EXAMPLE
    $myrepository = Get-RepositoryInfo
    
.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)
#>
function Get-RepositoryInfo ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Get-RepositoryInfo")]
	param ()
	
	$c = LoadRepository
	try
	{
		if (-not $c[0]) { return }
		$c[1]
	}
	catch
	{
		err ("Could not get repository info: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
    Cleanup repository
  
.DESCRIPTION
  Use Invoke-RepositoryCleanup to remove SoftPaqs from repository that are obsolete. These may be SoftPaqs that have been replaced
  by newer versions, or that no longer match the active repository filters.

.EXAMPLE
    Invoke-RepositoryCleanup

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

#>
function Invoke-RepositoryCleanup
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Invoke-RepositoryCleanup")]
	param ()
	$repo = LoadRepository
	Log ("Beginning repository cleanup")
	$deleted = 0
	
	try
	{
		Get-ChildItem "." -File | ForEach-Object {
			$name = $_.Name.ToLower().TrimStart("sp").Split('.')[0]
			if ($name -ne $null)
			{
				if (-not (Test-Path ".repository/mark/$name.mark" -PathType Leaf))
				{
					Write-Verbose "Deleting orphaned file $($_.Name)"
					Remove-Item $_.Name
					$deleted++
				}
				#else {
				#  Write-Verbose "Softpaq $($_.Name) is still needed."
				#}
			}
		}
		Log ("Completed repository cleanup, deleted $deleted files.")
	}
	catch
	{
		err ("Could not clean repository: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
  Set the repository notification configuration.

.DESCRIPTION
  This function defines a notification SMTP server (and optionally, port) for an email server to be used to send failure notifications during unattended synchronization via Invoke-RepositorySync.

  One or more recipients can then be added via Add-RepositorySyncFailureRecipient.

  The directory must have been initialized via Initialize-Repository.

  The function must be invoked inside a directory initialized as a repository.


.PARAMETER Server
  The server name (or IP) for the outgoing mail (SMTP) server

.PARAMETER Port
  Specifies a port for the SMTP server. If not provided, the default IANA-assigned port 25 will be used.

.PARAMETER Tls
  Specifies whether to use SSL/TLS. The value may be "true", "false", or "auto". "Auto" will automatically set SSL to true when the port is changed to a value different than 25. By default, TLS is false.

.PARAMETER UserName
  Specifies the SMTP server username for authenticated SMTP servers. If username is not specified, connection will be made without authentication.

.PARAMETER Password
  Specifies the SMTP server password for authenticated SMTP servers.
  
.PARAMETER From
    Specifies the email address from which the notification will appear to originate. Note that in servers may accept emails from specified 
  domains only, or in some cases may require the email address to match the username.

.PARAMETER FromName
  Specifies the from address display name.

.PARAMETER RemoveCredentials
  Removes the SMTP server credentials without removing the entire mail server configuration.

.EXAMPLE
  Set-RepositoryNotificationConfiguration smtp.mycompany.com

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

#>
function Set-RepositoryNotificationConfiguration
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Set-RepositoryNotificationConfiguration")]
	param (
		[Parameter(Position = 0, Mandatory = $false)]
		[string][ValidatePattern("^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$")]
		$Server = $null,
		[Parameter(Position = 1, Mandatory = $false)]
		[ValidateRange(1, 65535)]
		[int]$Port = 0,
		[Parameter(Position = 2, Mandatory = $false)]
		[string][ValidateSet('true', 'false', 'auto')]
		$Tls = $null,
		[Parameter(Position = 3, Mandatory = $false)]
		[string]$Username = $null,
		[Parameter(Position = 4, Mandatory = $false)]
		[string]$Password = $null,
		[Parameter(Position = 5, Mandatory = $false)]
		[string][ValidatePattern("^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$")]
		$From = $null,
		[Parameter(Position = 6, Mandatory = $false)]
		[string]$FromName = $null,
		[Parameter(Position = 7, Mandatory = $false)]
		[switch]$RemoveCredentials
	)
	
	Write-Verbose "Beginning notification configuration update"
	
	if ($RemoveCredentials.IsPresent -and ([string]::IsNullOrEmpty($UserName) -eq $false -or [string]::IsNullOrEmpty($Password) -eq $false))
	{
		err ("-removeCredentials may not be specified with -username or -password")
		return
	}
	
	$c = LoadRepository
	try
	{
		if (-not $c[0]) { return }
		
		Write-Verbose "Applying configuration"
		if ([string]::IsNullOrEmpty($Server) -eq $false)
		{
			Write-Verbose ("Setting SMTP Server to: $Server")
			$c[1].Notifications.server = $Server
		}
		
		if ($Port)
		{
			Write-Verbose ("Setting SMTP Server port to: $Port")
			$c[1].Notifications.port = $Port
		}
		
		if (-not [string]::IsNullOrEmpty($UserName))
		{
			Write-Verbose ("Setting SMTP server credential(username) to: $UserName")
			$c[1].Notifications.UserName = $UserName
		}
		
		if (-not [string]::IsNullOrEmpty($Password))
		{
			Write-Verbose ("Setting SMTP server credential(password) to: (redacted)")
			$c[1].Notifications.Password = ConvertTo-SecureString $Password -Force -AsPlainText | ConvertFrom-SecureString
		}
		
		if ($RemoveCredentials.IsPresent)
		{
			Write-Verbose ("Clearing credentials from notification configuration")
			$c[1].Notifications.UserName = $null
			$c[1].Notifications.Password = $null
		}
		
		switch ($Tls)
		{
			"auto" {
				if ($Port -ne 25) { $c[1].Notifications.tls = $true }
				else { $c[1].Notifications.tls = $false }
				Write-Verbose ("SMTP server SSL auto-calculated to: $($c[1].Notifications.tls)")
			}
			
			"true" {
				$c[1].Notifications.tls = $true
				Write-Verbose ("Setting SMTP SSL to: $($c[1].Notifications.tls)")
			}
			"false" {
				$c[1].Notifications.tls = $false
				Write-Verbose ("Setting SMTP SSL to: $($c[1].Notifications.tls)")
			}
		}
		if (-not [string]::IsNullOrEmpty($From))
		{
			Write-Verbose ("Setting Mail from address to: $From")
			$c[1].Notifications.from = $From
		}
		if (-not [string]::IsNullOrEmpty($FromName))
		{
			Write-Verbose ("Setting Mail from displayname to: $FromName")
			$c[1].Notifications.fromname = $FromName
		}
		
		WriteRepositoryFile -obj $c[1]
		Log ("Updated notification configuration")
	}
	catch
	{
		err ("Failed to modify repository configuration: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
    Clear the repository notification configuration

.DESCRIPTION
  This function removes notification configuration from repository, in effect turning off notifications.

  The directory must have been initialized via Initialize-Repository and notification configuration must have been defined via Set-RepositoryNotificationConfiguration

  The function must be invoked inside a directory initialized as a repository.

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  Clear-RepositoryNotificationConfiguration

#>
function Clear-RepositoryNotificationConfiguration ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Clear-RepositoryNotificationConfiguration")]
	param ()
	Log "Clearing notification configuration"
	
	$c = LoadRepository
	try
	{
		if (-not $c[0]) { return }
		$c[1].Notifications = $null
		WriteRepositoryFile -obj $c[1]
		Write-Verbose ("Ok.")
	}
	catch
	{
		err ("Failed to modify repository configuration: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
    Get an object representing the current notification configuration

.DESCRIPTION
  This function retrieves the current notification configuration as an object.

  The directory must have been initialized via Initialize-Repository and notification configuration must have been defined via Set-RepositoryNotificationConfiguration

  The function must be invoked inside a directory initialized as a repository.
  
.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  $config = Get-RepositoryNotificationConfiguration


#>
function Get-RepositoryNotificationConfiguration ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Get-RepositoryNotificationConfiguration")]
	param ()
	
	$c = LoadRepository
	if ((-not $c[0]) -or (-not $c[1].Notifications))
	{
		return $null
	}
	return $c[1].Notifications
}


<#
.SYNOPSIS
    Display the current notification configuration to screen


.DESCRIPTION
  This function retrieves the current notification configuration as user-friendly screen output.

  The directory must have been initialized via Initialize-Repository and notification configuration must have been defined via Set-RepositoryNotificationConfiguration

  The function must be invoked inside a directory initialized as a repository.

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  Show-RepositoryNotificationConfiguration
#>
function Show-RepositoryNotificationConfiguration ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Show-RepositoryNotificationConfiguration")]
	param ()
	
	try
	{
		$c = Get-RepositoryNotificationConfiguration
		if (-not $c)
		{
			err ("Notifications are not configured.")
			return
		}
		
		if (-not [string]::IsNullOrEmpty($c.UserName))
		{
			Write-Host "Notification server: smtp://$($c.username):<password-redacted>@$($c.server):$($c.port)"
		}
		else
		{
			Write-Host "Notification server: smtp://$($c.server):$($c.port)"
		}
		Write-Host "Email will arrive from $($c.from) with name `"$($c.fromname)`""
		
		if ((-not $c.addresses) -or (-not $c.addresses.Count))
		{
			Write-Host "There are no recipients configured"
			return
		}
		foreach ($r in $c.addresses)
		{
			Write-Host "Recipient: $r"
		}
	}
	catch
	{
		err ("Failed to read repository configuration: $($_.Exception.Message)")
	}
	
}

<#
.SYNOPSIS
  Add a recipient to be notified of failures

.DESCRIPTION
  This function adds an email address to the repository. On failures, notifications will be sent to this email address.

  The directory must have been initialized via Initialize-Repository and notification configured via Set-RepositoryNotificationConfiguration.

  The function must be invoked inside a directory initialized as a repository.

.PARAMETER To
  The email address to add

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  Add-RepositorySyncFailureRecipient -to someone@mycompany.com

#>
function Add-RepositorySyncFailureRecipient ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Add-RepositorySyncFailureRecipient")]
	param (
		[Parameter(Position = 0, Mandatory = $true)]
		[ValidatePattern("^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$")]
		[string]$To
	)
	
	Log "Adding '$To' as a recipient."
	$c = LoadRepository
	try
	{
		if (-not $c[0]) { return }
		
		if (-not $c[1].Notifications)
		{
			err ("Notifications are not configured")
			return
		}
		
		if (-not $c[1].Notifications.addresses)
		{
			$c[1].Notifications.addresses = $()
		}
		
		$c[1].Notifications.addresses += $To.trim()
		$c[1].Notifications.addresses = $c[1].Notifications.addresses | Sort-Object -Unique
		WriteRepositoryFile -obj ($c[1] | Sort-Object -Unique)
	}
	catch
	{
		err ("Failed to modify repository configuration: $($_.Exception.Message)")
	}
	
}

<#
.SYNOPSIS
    Remove a recipient from notification list for the current repository.


.DESCRIPTION
  This function removes an email address as a recipient for synchronization failure messages.

  The directory must have been initialized via Initialize-Repository and notification configured via Set-RepositoryNotificationConfiguration.

  The function must be invoked inside a directory initialized as a repository.

.PARAMETER To
  The email address to remove

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  Remove-RepositorySyncFailureRecipient -to someone@mycompany.com

#>
function Remove-RepositorySyncFailureRecipient
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Remove-RepositorySyncFailureRecipient")]
	param (
		[Parameter(Position = 0, Mandatory = $true)]
		[ValidatePattern("^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$")]
		[string]$To
	)
	Log "Removing '$To' as a recipient."
	$c = LoadRepository
	try
	{
		if ($c[0] -eq $false) { return }
		
		if (-not $c[1].Notifications)
		{
			err ("Notifications are not configured")
			return
		}
		
		
		if (-not $c[1].Notifications.addresses)
		{
			$c[1].Notifications.addresses = $()
		}
		
		$c[1].Notifications.addresses = $c[1].Notifications.addresses | Where-Object { $_ -ne $To.trim() } | Sort-Object -Unique
		WriteRepositoryFile -obj ($c[1] | Sort-Object -Unique)
	}
	catch
	{
		err ("Failed to modify repository configuration: $($_.Exception.Message)")
	}
}


<#
.SYNOPSIS
    Test the email notification configuration by sending a test email

.DESCRIPTION
  This function sends a test email using the current repository configuration and reports 
  any errors associated with the send process. It is intended for debugging the email server configuration.

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.EXAMPLE
  Test-RepositoryNotificationConfiguration

#>
function Test-RepositoryNotificationConfiguration
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Test-RepositoryNotificationConfiguration")]
	param ()
	
	Log ("test email started")
	send "Repository Failure Notification (Test only)" "No content." -html $false
	Write-Verbose ("Ok.")
}

<#
.SYNOPSIS
  Set repository configuration values

.DESCRIPTION
  This function sets various configuration options that control synchronization behavior.

.PARAMETER setting
  The setting to configure from 'OnRemoteFileNotFound', 'OfflineCacheMode' and 'RepositoryReport'.

.PARAMETER value
  The new value of the setting for OnRemoteFileNotFound. It can be from 'Fail' (default) and 'LogAndContinue'.

.PARAMETER CacheValue
  The new CacheValue of the setting for OfflineCacheMode. It can be from 'Disable' (default) and 'Enable'.

.PARAMETER Format
  The new value of the setting for RepositoryReport. It can be from 'CSV' (Default) ,'JSon', 'XML' and 'ExcelCSV'.

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Get-RepositoryConfiguration](Get-RepositoryConfiguration)

.Example
  Set-RepositoryConfiguration -Setting OnRemoteFileNotFound -Value LogAndContinue

.Example
  Set-RepositoryConfiguration -Setting OfflineCacheMode -CacheValue Enable

.Example
  Set-RepositoryConfiguration -Setting RepositoryReport -Format CSV

.NOTES
  Current event handlers supported:

  - _OnRemoteFileNotFound_ - indicates what should happen if an expected SoftPaq is not found on the remote site. The default is 'Fail' in which case the process will stop. Setting to 'LogAndContinue' will log the error, but the repository synchronization will continue.

  Current Repository Report functionality:

  Invoke-RepositorySync will create a report containing contents of the Repository in a format provided by RepositoryFormat Setting.
  Use RepositoryReport Setting with -Format to set the format in which the you would like the report to be generated. Default format is CSV. 
  Report will be generated with a name Contents.<format> e.g. Contents.CSV inside the .repository directory

  To create a report outside the repository use New-RepositoryReport function.
#>
function Set-RepositoryConfiguration
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Set-RepositoryConfiguration")]
	param (
		[ValidateSet('OnRemoteFileNotFound', 'OfflineCacheMode', 'RepositoryReport')]
		[Parameter(ParameterSetName = "ErrorHandler", Position = 0, Mandatory = $true)]
		[Parameter(ParameterSetName = "CacheMode", Position = 0, Mandatory = $true)]
		[Parameter(ParameterSetName = "ReportHandler", Position = 0, Mandatory = $true)]
		[string]$Setting,
		[Parameter(ParameterSetName = "ErrorHandler", Position = 1, Mandatory = $true)]
		[ErrorHandling]$Value,
		[ValidateSet('Enable', 'Disable')]
		[Parameter(ParameterSetName = "CacheMode", Position = 1, Mandatory = $true)]
		[string]$CacheValue,
		[ValidateSet('CSV', 'JSon', 'XML', 'ExcelCSV')]
		[Parameter(ParameterSetName = "ReportHandler", Position = 1, Mandatory = $true)]
		[string]$Format
	)
	$c = LoadRepository
	if (-not $c[0]) { return }
	if ($Setting -eq "OnRemoteFileNotFound")
	{
		if (($Value -eq "Fail") -or ($Value -eq "LogAndContinue"))
		{
			$c[1].settings. "${Setting}" = $Value
			WriteRepositoryFile -obj $c[1]
			Write-Verbose ("Ok.")
		}
		else
		{
			Write-Host -ForegroundColor Magenta "Enter valid Value for $Setting."
			Write-LogWarning "Enter valid Value for $Setting."
		}
	}
	elseif ($Setting -eq "OfflineCacheMode")
	{
		if ($CacheValue)
		{
			$c[1].settings. "${Setting}" = $CacheValue
			WriteRepositoryFile -obj $c[1]
			Write-Verbose ("Ok.")
		}
		else
		{
			Write-Host -ForegroundColor Magenta "Enter valid CacheValue for $Setting."
			Write-LogWarning "Enter valid CacheValue for $Setting."
		}
	}
	elseif ($Setting -eq "RepositoryReport")
	{
		if ($Format)
		{
			$c[1].settings. "${Setting}" = $Format
			WriteRepositoryFile -obj $c[1]
			Write-Verbose ("Ok.")
		}
		else
		{
			Write-Host -ForegroundColor Magenta "Enter valid Format for $Setting."
			Write-LogWarning "Enter valid Format for $Setting."
		}
	}
}

<#
.SYNOPSIS
    Get repository configuration values

.DESCRIPTION
  This function get various configuration options that control synchronization behavior.

.PARAMETER setting
  The setting to retrieve

.Example
  Get-RepositoryConfiguration -Setting OfflineCacheMode

.Example
  Get-RepositoryConfiguration -Setting OnRemoteFileNotFound

.Example
  Get-RepositoryConfiguration -Setting RepositoryReport

.LINK
  [Set-RepositoryConfiguration](Set-RepositoryConfiguration)

.LINK
  [Initialize-Repository](Initialize-Repository)
#>
function Get-RepositoryConfiguration
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Get-RepositoryConfiguration")]
	param (
		[Parameter(Position = 0, Mandatory = $true)]
		[string][ValidateSet('OnRemoteFileNotFound', 'OfflineCacheMode', 'RepositoryReport')]
		$Setting
	)
	$c = LoadRepository
	if (-not $c[0]) { return }
	$c[1].settings. "${Setting}"
}


<#
.SYNOPSIS
  Create a report from a repository directory

.DESCRIPTION
  This function scans a repository (or any directory containing CVAs and EXEs) and creates a report in one of the supported formats.

  Currently the supported formats are:

  - XML - Return an XML object
  - JSON - Return a JSON document
  - CSV - Return a CSV document
  - ExcelCSV - Return a CSV document containing an Excel hint that defines comma as a default separator. Use this only if you plan on opening the CSV file with Excel.

  If a format is not specified, the function will return PowerShell objects to the pipeline.

.PARAMETER Format
  Specify the output format (CSV, JSON, or XML). If not specified, the function will return PowerShell objects.

.PARAMETER RepositoryPath
  By default, the function assumes the repository is in the current directory. This parameter allows specifying a different location for the repository.

.PARAMETER OutputFile
  Specify an output file for the function. Can only be specified together with "Format".

.EXAMPLE
  New-RepositoryReport -Format JSON -RepositoryPath c:\myrepository\softpaqs -OutputFile c:\repository\today.json

.NOTES
  The function currently supports scenarios where the SoftPaq executable is stored under the format sp<softpaq-number>.exe.
#>
function New-RepositoryReport
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/New-RepositoryReport")]
	param (
		[Parameter(Position = 0, Mandatory = $false)]
		[ValidateSet('CSV', 'JSon', 'XML', 'ExcelCSV')]
		[string]$Format,
		[Parameter(Position = 1, Mandatory = $false)]
		[System.IO.DirectoryInfo]$RepositoryPath = '.',
		[Parameter(Position = 2, Mandatory = $false)]
		[System.IO.FileInfo]$OutputFile
	)
	if ($OutputFile -and -not $format) { throw "OutputFile parameter requires a Format specifier" }
	$cvaList = Get-ChildItem -Path $RepositoryPath -Filter '*.cva'
	
	if (-not $cvaList -or -not $cvaList.Length)
	{
		throw [System.IO.FileNotFoundException]"Directory '$(Get-Location)' does not contain CVA files."
	}
	
	Write-Verbose "Processing $($cvaList.Length) CVAs"
	$results = $cvaList | ForEach-Object {
		$cva = Get-HPPrivateReadINI $_.FullName
		
		try
		{
			$exe = Get-ChildItem -Path ($cva.Softpaq.SoftpaqNumber.trim() + ".exe") -ErrorAction stop
		}
		catch [System.Management.Automation.ItemNotFoundException]{
			$exe = $null
		}
		
		[pscustomobject]@{
			Softpaq = $cva.Softpaq.SoftpaqNumber
			Vendor  = $cva.General.VendorName
			Title   = $cva. "Software Title".US
			type    = if ($Cva.General.Category.contains("-")) { $Cva.General.Category.substring(0, $Cva.General.Category.IndexOf('-')).trim() } else { $Cva.General.Category }
			Version = "$($cva.General.Version) Rev.$($cva.General.Revision)"
			Downloaded = if ($exe) { $exe.CreationTime } else { "" }
			Size    = if ($exe) { "$($exe.Length)" } else { "" }
		}
	}
	switch ($format)
	{
		"CSV" {
			$r = $results | ConvertTo-Csv -NoTypeInformation
		}
		"ExcelCSV" {
			
			$r = $results | ConvertTo-Csv -NoTypeInformation
			$r = [string[]]"sep=," + $r
		}
		"JSon" {
			$r = $results | ConvertTo-Json
		}
		"XML" {
			$r = $results | ConvertTo-Xml -NoTypeInformation
		}
		default {
			return $results
		}
	}
	
	if ($OutputFile)
	{
		if ($format -eq "xml") { $r = $r.OuterXml }
		$r | Out-File -FilePath $OutputFile -Encoding utf8
	}
	else { $r }
}
#endregion
#region functions
function check-repopath
{
	$repotestpath = $txtboxRepoLocation.Text
	
	if ((Test-Path $repotestpath) -eq $true)
	{
		$lblNoRepoDetected.Text = "Repository Detected"
		$lblNoRepoDetected.ForeColor = 'Green'
		$btnSyncOrCreateRepo.Text = "Sync"
		update-modelgrid
	}
	
	if ((Test-Path $repotestpath) -eq $false)
	{
		$lblNoRepoDetected.Text = "Repository not found"
		$lblNoRepoDetected.ForeColor = 'Red'
		$btnSyncOrCreateRepo.Text = 'Create'
		$dt.Rows.Clear();
	}
	
	
}
function update-modelgrid
{
	$repo = $txtboxRepoLocation.Text
	$dt.Rows.Clear();
	Set-Location $repo
	$filters = (Get-RepositoryInfo).Filters
	foreach ($plat in $filters)
	{
		$platform = $plat.platform
		$models = Get-HPDeviceDetails -Platform $platform
		
		foreach ($model in $models)
		{
			
			$osinfo = $plat.operatingsystem
			$currentstores = $plat.category
			$modelname = $model.name
			$dt.Rows.Add("$false", "$platform", "$modelname", "$osinfo", "$currentstores")
		}
	}
}
function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}
function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}
function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
function Clear-ModelGrid
{
	$dt.Rows.Clear();
}
#endregion
#region event handlers
$buttonBrowseFolder_Click2={
	if($folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$txtboxRepoLocation.Text = $folderbrowsermoderndialog2.SelectedPath
	}
}

$txtboxRepoLocation_TextChanged= {
	
	$repolocation = $txtboxRepoLocation.Text
	$repoparent = Split-Path -Parent $repolocation
	$console.Text = ""
	$dt.Rows.Clear();
	
	if ((Test-Path -Path "$repolocation\.repository\") -eq $true)
	{
		$script:repositorypath = $repolocation
		Set-Location "$repolocation"
		$lblNoRepoDetected.Text = "Repository Detected"
		$lblNoRepoDetected.ForeColor = 'Green'
		$btnSyncOrCreateRepo.Text = "Sync"
		Add-Logs "repository detected at $repolocation..."
		Add-Logs "loading current model table from target repo..."
		update-modelgrid
		
	}
	if ((Test-Path -Path "$repolocation\.repository\") -eq $false)
	{
		$dt.Rows.Clear();
		$lblNoRepoDetected.Text = "Repository not found"
		$lblNoRepoDetected.ForeColor = 'Red'
		$btnSyncOrCreateRepo.Text = 'Create'
		Add-Logs "repo not found. click create to create a repo in the target directory."
	}
}

$btnSyncOrCreateRepo_Click = {
	#TODO: Place custom script here
	$repolocation = $txtboxRepoLocation.Text
	$repoexists = Test-Path -Path "$repolocation\.repository\"
	
	if ($repoexists -eq $false)
	{
		$newrepopath = New-Item -Path "$repolocation\HPIACommon" -ItemType directory
		Add-Logs "folder HPIACommon created in target dir..."
		Set-Location $newrepopath
		Initialize-Repository
		Add-Logs "new repo initialized at $newrepopath..."
		Set-RepositoryConfiguration -Setting OfflineCacheMode -CacheValue Enable
		Set-RepositoryConfiguration -Setting RepositoryReport -Format CSV
		Set-RepositoryConfiguration -Setting OnRemoteFileNotFound -Value LogAndContinue
		Add-Logs "repo configured for usage with cmsl..."
		$softwarefolder = "$newrepopath\.addsoftware"
		New-Item -Path $softwarefolder -ItemType directory
		Add-Logs "software folder added..."
		Add-Logs "new repo setup completed. models can now be added from either the repomodels.csv folder or from the UI"
		$txtboxRepoLocation.Text = $newrepopath
		if ($repoexists -eq $true)
		{
			$btnSyncOrCreateRepo.Text = "Sync"
		}
	}
	if ($repoexists -eq $true)
	{
		Invoke-RepositorySync
	}
}

$buttonBrowseFolder_Click={
	if($folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$txtboxRepoLocation.Text = $folderbrowsermoderndialog1.SelectedPath
	}
}

$btnAddModelsFromSccm_Click = {
	$ErrorActionPreference = 'SilentlyContinue'
	Show-fromsccm_psf
	update-modelgrid
}

$console_TextChanged={
	#TODO: Place custom script here
	$console.SelectionStart = $console.Text.Length
	$console.ScrollToCaret()
}

$btnAddModeltoRepo_Click =
{
	$ErrorActionPreference = 'SilentlyContinue'
	Show-AddModel_psf
	update-modelgrid
}

$buttonRemoveFromRepo_Click={
	
	$selecteditems = @()
	foreach ($pc in $dt)
	{
		if (($pc.select) -eq $true)
		{
			$selecteditems += $pc.platform
			
			foreach ($platform in $selecteditems)
			{
				Remove-RepositoryFilter -Platform $platform -Yes
				Add-Logs "$platform removed from repo"
			}
		}
		
	}
	update-modelgrid
	
}

$picturebox1_Click = {
	update-modelgrid
}

$btnHelp_Click={
	Show-help_psf
}
#endregion
$buttonExampleHPIACMD_Click = {
	
	Show-hpia_command_psf
	
}

$linklabelHelpGithub_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
	Start-Process "https://github.com/johnsonsr3243/HPIA-Repository-Manager/tree/main"
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>