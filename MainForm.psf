<File version="3.2">
  <FileID>30f0639c-dcab-44b0-b015-7bc04f5be8cc</FileID>
  <Preview>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
tv9Z7dzuo507D+r0qWPyOXJS2dkJ2rh6pbZu3qwb4QnKSgrR5t2btXHPbqXmFem03zYdPXNJi37+
Q/3kvc1q7ewxE75La1/5//SzD3crIuiiNvvsVnhosA4e2amNuzbLPypZYf6n5bPNRz4+B3T69Alt
2XtARXVNplR41FyZpbdf+bl8z15UVGqG3K5KrVz0lqLyGjQ+OqSy/BzFhF7V4g+Wq8YzpOHBXmWm
piohOkyv/uoHWn/oiurKc/T6r36kpT5HTaHpmfG+Py4UAADAvDWbBSD21nGt27Ffm9e9r6t347Tu
7Rd1NixR+zcv16592/Tr15apviZPH739a/2vn76o0JxGxVzZoyUrN+nDJW8rpbpV/gd3aOfpQPX0
dqq7t1fnd63W7rNhOrNvufZfj1DAkQ1atu+6OqpStWjx+/pg6WJdCo/R1vdf1dHbcTq44X2dCIxX
b6dbbe4ONVWX6dKlI3rj5Vd10PesVq/4UKllreru9DhPNxQl3tJ7769Sc9eQc2TCvmYgLzFMa9ev
0L5Dh3XI94i2blmvDXt85aYAAAB+U8xWAejo7lXUNV8tXbdNW7etUXR2sbYueU1BqUU6tHKR1m/f
pHffW6/SnASt/OB9vf72W7qRWKTg09u0fP12rVyzUmXuIfkf2KSVe8+rq6dLvWZ7zm5fpu2ngnXu
0Hqdu5OuyIu7tHTPWVXn3NPiD5foozWrdDejULtXvqXr8fk6Yk73XArX4GC/KnLj5et3UtXuXoWd
8tGyjQd05Yyvth2+pqb6Cu1Zu1LXwqO0b/N6nQ1KUG1BqtasWKeAwOtavXW7Ai/u13f/6pcKCbmi
D9Zul9vcx5nu++NCAQAAzFuzVQDsC+7yU6N0KzhcYWG3lVdWqVD/y8oorlRMaKCuXz6qF37ysg4c
8tW95AJVFsZr98Ht2uF3QrklpQq4dV1VzR0qybqnPX7HVdnQ6rxyPyH8lsLjs5QYFaxoM9F3tFTq
1Om92rR3tyJSchQVEais4grdCbiqlIIKRd++asbPNXvzbrU21+v2jXPaddBXhw4fcV7g1+lq0rVz
Z3XwwF5duBquVrNX31BWrBN+fjqwa79CY7LUWF2gG4FhKs1P0+nz/iorzda122FqNfdxpvv+uFAA
AADz1mwVAPuqfTtB2lfZ2xfi2bft2Rfm2Rfk9QyOKj/uqt54f5v6RsedF+u1t3vkbmuT2yzrbm9z
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
IzMz03lu4tHrCSGEEDI7sXv99vA/BYAQQghZQKEAEEIIIQswFABCCCFkAYYCQAghhCzAUAAIIYSQ
BRgKACGEELIAQwEghBBCFmAoAIQQQsgCDAWAEEIIWYChABBCCCELMBQAQgghZAGGAkAIIYQswFAA
CCGEkAUYCgAhhBCyAEMBIIQQQhZgKACEEELIAgwFgBBCCFmAoQAQQgghCzAUAEIIIWQBhgJACCGE
LMBQAAghhJAFGAoAIYQQsgBDASCEEEIWYCgAhBBCyAIMBYAQQghZgKEAEEIIIQswFABCCCFkAYYC
QAghhCzAUAAIIYSQBRgKACGEELIAQwEghBBCFmAoAIQQQsgCDAWAEEIIWYChABBCCCELMBQAQggh
ZAGGAkAIIYQswFAACCGEkAUYCgAhhBCyAEMBIIQQQhZgKACEEELIAgwFgBBCCFmAoQAQQgghCzAU
AEIIIWQBhgJACCGELMBQAAghhJAFGAoAIYQQsgBDASCEEEIWYCgAhBBCyAIMBYAQQghZgKEAEEII
IQswFABCCCFkAYYCQAghhCzAUAAIIYSQBRgKACGEELIAQwEghBBCFmAoAIQQQsgCDAWAEEIIWYCh
ABBCCCELMBQAQgghZAGGAkAIIYQswFAACCGEkAUYCgAhhBCyAEMBIIQQQhZgKACEEELIAgwFgBBC
CFmAoQAQQgghCzAUAEIIIWQBhgJACCGELMBQAAghhJAFGAoAIYQQsgBDASCEEEIWYCgAhBBCyAIM
BYAQQghZgJmzAjBkCoAdcHru359QeFiYMjLSTRkY/9L1hBBCCJmdDJoC0GcKwPDw0IzXT8+gSe9s
FIAGUwD6zEC2TUzPyNi4IqNjlJ2Tp+HRsS9dTwghhJDZSW/fgLp6etU/MDTj9dNjJ//O3mcsAFOx
g3wpbYOqcPWr0jUw8/WEEEIImbNMzeHPVABmSoVJVduQKk3s+ZmWIYQQQsjc5okLwLHjp8J67stZ
gRBCCCHf7jT3S2V17q8vAD67dsc1tPc4bYEQQggh3+7YyT8zt/TrCwAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAWgL/39/5/QkQ3cF1PpVcAAAAASUVORK5CYII=</Preview>
  <Form>Ua+X1nbDlJsAACODCAAAAAAABADlfVuTqsjS6LsR/oeO9erEgOIFT+w9EcVFQEXBu77sQEFUEBRR1Dg//lRl
2WrbdreuXmu+/Z2pmWCZdcnKysrMysoq6H81xwtnEm/+SqdeXv5FgZf4sHL+/aN92MTO8s/+PLDD
ZPNnJYyW9PnHy72iP156TrSZh8G/83+y5L8/XsStH28j59+Bs40jy//jxdiO/fmk5hw6oecE/x6X
SlZhUihmy1zeYfnyj5fAWuKedWseEJw/XiazuW9HuOoPMQziKPQ3P4BSTKsRhSsnig+nNmgbh+2J
5TvSfOkEhA5cNYuJyLH/Yl7rftVWD23nx18V3NWXbUR/7gRxe37EDbK5fOGPl1I2+2UrMiohjGwn
ascHn/Q13zt2ex64vvNlY20SBq/Dx6XCPLCiw18IIQEhHcn4iZCMNCSE5GfDxQ8RuVAuIrQmmdW8
jJ+JTqqauKzm+rhYqZgI1XBWOoUAC7SiNU6JZCdJHnekN9FtqpukBkd+2gl+qBOAMTaSQ3BoeUJM
icA+eVS7BO4BTBpXyUMktKEVeagbgqFIfrbJo6IR2pAAQNelORgmRKMleSjQZ0R+jgEmhAgh+akT
5Cr5KQAFjgkjlYD2Mnk0SGUJKhfowAmG/GncmKvmeawCOleARAjF2MYwbshmyWNOuU8aAA8JdUgE
LkCLgFRVoH7zBiOifKsRjApPMADGBqmhwU/AOCRPFVi2JY8dKa8RWAQuTaD9kGLjz6MQgS87AsNc
0aRcegfZAMpr7plvQJ1K+YY8AsTk0YcapIVYgVFDtQn6NAEDhPllpB8kDWgA6YC55j5HiyKKbeh+
Ue+chBx5XnHhTbrQRmdCexQtlXjKhTp5yAnVLOBshzwkgpFKQ4vAffKoEL4Kk/MYKsB5C8qBCyCP
HKWN6A/SyGwLDPk5BfkjuQKIhEtgGcqFMwwzhY7kAdIkAZbDSU+hBcxN4QyrYD5AvkzyswrlID0T
AmP5QieRec83SJQPQBMIFRVeYCZIlUgkWgAVppoCD+kDbOf0tTSQx60sfCpvkD6Shtd0LQtfYzsn
aiEv8naykACDXvPUvq0fxvg2gUqemVahtAl8BgNTA8uNeszctDDIQ01IOU/KQYqYhK4DJ8tFa+JV
4DJSWD4+WgcMIggSjKFARtUk0iHB3BbcC0yxXedcYCKREsxdBjAQPkneBSOU+9cwwfY25w4MGEoE
1sHKw8pTJD3KYFGBgirVUxEqB+QB1kcECV691rgur4KeAo2g11S5oRzWrnSqSWrQlQVyPoH35AEG
A/RSADQHEJzwim8wPwKxBdSqwyIig0SCOregBZkJagkq0ANUHZGHfuI78A3s/o6MCnSYShCowGcw
aD5wBeY6hpGiBtQAe6ac55ZydgCEg6arZ4wwagkIB1HSYdSI8g1MDp0b4AsLnIahQRUTrBWMUvoK
pnzTLoszeAEWjBo4b5EHyB/MtQBrmQt8I2MQzfPMVE/rKYzbP7NEhElpgk0FHYBRVr6wJXSkX9eB
BLZjD+aY2GCqM7BCU+OqnLBBDhBMdRhoACbDqE6+wxkteIk6wJtz8cnLeMK+3SbgG5UucMSa13yD
JAJngU8j6DS8NAbfiNAgSmfqaaJcoCPVoA/qAIGPuflpctOpKz6A+0ilAWgCeQsJTXUQCZDwznlu
BZs8j6SoDjT3rvgGmiy1X6lGGsg4cGEP0gI91j+n7U7mF9Igzsgv0KEG+ADGFbYKoVIClQOfEXxx
mkCFqU2m0gCrHdg3oBlchzr4ABmKrQl8yH82gLvSgO7IAh3pCDA+IQ2kfg32E6DXsHjUPMq3BQEG
4BmTdhJwGuwdnQm6Z7ryvYELd2SBrAsh+laiXAAtTKfAM6HLS3Cm8TqBmw4WE5zDJVgrsiRIoNeL
M+FClfKNSgNdKYAFD/vBb9NF3igfqEN6KZcfQQI0KnS/ACOmez2gsQHyBBJq3pOGh2i7ky7SIHyx
A3kAG4wSON8iGKugM6AoV5bhcdreJyoNH64T37C96GRQrnyrdOpnpeE1XcnC4Hu03abLunDxCB+T
hg+xkfS0NHyK7W0SL1r2kTQ8gY2kL6ThSWw3qXbjad+Thefm9FoavkfbnfROFr4tbyAL4EmLJ9pg
EREvfkftBq5+UU6dcLpfABdWCs5UX0kDjZuA2ag8Ap9GCkse3cOArw0rLl3dtskNDDMB1JVvyym2
qxzYcYANbpL9gHTe9ZwCEiB5G/B0wIvYX8ME21VODdb8A3nAjgICCsLsMh7wO8BX6sIOBaIdUMRR
vingnRvnGrctKAwcgkwqDcBcsm+lfozgUL4NYH+QP+e8g4HdsKWim4pPLAPlG+yr6hB/296t9kWi
suBSbMCnq8hn9wKbNzCUg8cI7gGVLip5lG+w6RRhL7cE/w1g8MdWyXmAD6VrzTrZBvIACRZgyzgl
D2D3B/A5tormFJtOChsgb9UPWyjgXo4fpe1OenKd+BDbT60Tz1ukz9aJJ7A9sE78itX5sk58D9vt
OvEbPAeavuk1nLH9Eq/hjO3D9IzX8Am2n/AavqbtTjef7icex/aV1/Actg9TE6xXg2K72DMqHTX3
ERiiQCBSB9hVTX4VbVfpgo1PXqk+xS3vRkY/gek+q0lWOwg/Ifmb3v7TEsLg5UdTGXcmCkwema6a
ISFJA8N475hOGYw7xJXyeOfNZDBgMAuGwTDDJATm38CIuGdXAzBUEpsWSGwaMTyTTuEWDLQ4khY8
cwPjFgxDaGJg8miwkW5g5Uv0gAT1dL0JUVBJescv6s9Bnwb4SswjcDr1bIvPYDoLvwojjPSrFuDU
dc/coOVZ8qhCjAb01j/5IZM3Od+B0yn/7HXSUDX4vdQ3gl24755p+BKmfPuyxYUGCgMFMGrwpK0T
Dy5885+wsR+lBzQLGCDB2dD4Es2lOxaocDlBS6duc56AbwM5CqWNhsS6Zxqsc2TqHRcAAyw/gnZu
CmE+4eT3UmRgQ2nMHx6wVchfGidnuHHDBViPOWrfdPCEAUMC0TD9p+F0iuaANEBkCmL8YAbovgrK
G9AjeNbWhbBbLowp32B/CVFFOqo1xCWTMzyD0yfYgYDM96GHy44ENlANGrekMeV3fCCPJ7lA+PYV
Xy53MSgXJh9yIZ36hA/g6MOZG2gVlTfaw0WCoT6cySGL8g0wGtACNN84w1enodc6AT0ChuqZZnSK
977J+Qn4rBME25V4w0nhED2gE7DbhEpwa+FVT+HIvH45jPFgzwzw6PyAFZzeQIFzQYDp2fg1F058
++Yafz3SJ9LVTNzjwhkbPdcDAw5rLxgeEATpchkAtq70vBT4DOeGdBEyKG0QmKA5l93iNQ0XLmhn
DOi+of6F/pt0Wk+/koaH00/Qds0F8gAzKvoUG3CsDn5t7nlqHqbtC2l4n1hq38BLhRiNqN+rRvFA
3AgWB9Aq7X6c/FYaoBq1mHBJqQmxCNAq8YuZ+UkJ+YALJz/kpk8q+GCDYZKAWXTdi2/wUksB3hld
T6lvBMuFeBPluaIBbuaArZFg+wM6RH/RC1rmb9rLPCENMOtg3+j5F5zGG7Aei+9og7YlODG73PIr
w1zf3Mq6Wi0hwtSkcUsJ/BDK+eG5hgMKAyytPjnSz9ITXEinPuPDDd4vuXB97nzhA0NoAO9eBBqu
uABwJjlTAKyA22sSvVeDPlbOr9INF15pu8+HZ3UinXrVikd1Au5b6gCLlx7pyfbVuXMVdiDgXIDD
YwAMvhLELelNHQN9km4k5Ccs5LV9JOfO37OQ17KQTsGtUGob4EYTnCvTE1lqGy4YwCNsXSwqjBrk
zQBWnM6dIeRP/SaIWl/fZL2h4VMu/LbY4B0aYF8Fd5JPd8vIgzorEKm/jZ+8YoNhwiipRwu7JLAd
sGUEvaV8oufz4Pn0bik4+W+/wGu4pu3B9G4mYKjnID25pwoK1X6SDBg1eK0qnJWf9lk8WJ+TSUEn
Lxt0WCpcaAD4Sy78Nv/tF3jSH9IGygt7OxWsOggKWHED+ASjBlMO199f40i/ItbwJW0fedI/i+3x
BN5I/XQOCGsT2KcyxGDglstP6cQv8N+uuPDbLdL7BHyByIEB1ulDLvx2/+0bOvFraIN43Zu45d8f
f/uKC3+HhPg30dpHufBN2m648D+gC2/SZ1z4rbR9Uyd+NW0/Kw33sT1c9QEu/J0S8iwXfhFt/w3x
t6t0jwt/yyz8pE78Ltp+hU58M/72wX7h16THsL2ul19x4ZfTdsWHBWwUYQcLpeDcw6bpMTiderbF
BaZBg8052vFR/O1n0xd8u9plQ0QFTjAoV8p3YIztXY1LZOpei8/gdOo2B5hB4VtpgJ0dnEZViact
Xl7ToTfJhnSk1zmfw7SzWy7A4Y0yofFeAEBLFLidcRceXeKUgBHu6d/UJ/uFjzHcheFN4XdcmFC+
wakdvUvx1Ttkn8CkveC8i7/9lNcA4Zz6hvq90EfjF+5P3/EB9un0zPZyJ4++PP0xnE59UuPyNsuD
XHinWaDa8EarAe/EHh4d5V1sd9I7LkCsEU5klfNrFHCqQuTtbc5jMN3S086u42+vWvG5BIOWQYgS
IgV1CCK8izp+15Lfib9BFDEHNhR24Q9Zn4/sG/Dl9vTyYQt5gk98g/sgt/Hdn0y3fHsnDZd3Eh9Y
ecC+fVoDvbk+cLtaJm/qY2z3MUC0rPLNkX6W/j+Nvz2Z/iHxty+x/UPjbzfpnxx/u8b2T46/XdI/
Of52Sf/s+Nvl9z85/nZJ/+T42yX9s+Nvl/TxffGvboOnn7tPfrktTu9q39w5+J+1lp+/O3BZT3/F
zX6yz7p3c//n0q/n29UlcxNezMA0w20s93Q3HK7iyKdyDZ7iqVxlGOZU3mIYepeAYJAYhryHmndU
pEINiXzRbsqQch3/xj9JeYJ/4/qv5Ugl5U11lghI2MNIMX6kwmdyJPLeCKaN9rBnGHoNiWFUeKEE
yqcMvJtCyyGXluNmJApKazAf1Hio/Mw3yidI7utnmIAP0/yUlGA+tRgJkEG5QdoCHwXmVG7St2AQ
5hvtg7/QkJxpYC40PFaOZ+GzGiSdyhF5Z4eW//tfzOljhacPG371pUPditx58OOv0h8vxT9eyPPL
Jg38/PHX65cjv6zejq0oNsLNPJ6TjyqKThA7UXsSOU7wZduOs49//KUaGnppOSuCI4wOL7oVWK6z
dO59O1Le4exT63po2RdC/0PAfzFQ4bX211/hrM8Dr26NHf+3f4rTxz35pCfV8VfKPJ5txz8++Srn
e2bVw4lFeZxlS3gms/l37Pl4/vk/XjDt5PlAIyoBdwh+oC39jmeuhLsqPEJgxxprge3sf/yVf4Q0
XL0dh6sff3Wi7fvvfH4oYXgEL//35eNBvBErPG4Rz6jn2HeZ8J+rCjfyxlCBe1z8jPmECJMQ7n+7
/K1oV+Nwn31O7rQl1sZL8eV7qfOe0GwlbE1xIWTbaHdnMqybp2CbCO8KCpPJeka/SqjYQqeL14i6
YojMfka/SOAn7Yp/hFWkucOtpSgvFL0avDosRXG1JVe6TqUUB+3MsC5Peq1M02yLZlsZLvWWPFK0
ldJqVxKP3wQayZ8P93I6RXI3tqju1MLO3k6bHb3c5ZzVmHNsnmN5L+cc9V4wtddRxBTdTUv+5L90
6uMy3HdwyBblTJ3ZVVvT7ILNsd35xBcyO2chhSu+z0wdZeofZL0lthCveHgV2WTmVqOqZoJ8S/Aa
cjWcVlWZO7T4qjut+1pLtCoTLs9ux9M1l48zMeZr1W0G3CZTD8OgvDDQeK7PPEZpYNoatcrUGxYE
b+i5R8FuFCrT7BHToLv+JldsVrlafVoXai2xL1UW89F+fkyUuZyI3C4O5WgaLvKxbIeNY326KqZT
7CgS22EyHpUni6iTYeY7NNxltuHEKYQosmvoIK0YJd/qs+yyaGbqemQdvO7c2PckftpSpseBM8xM
kjEzzMUYmytoPdZNhla1HOcW3ZZa7q9zKqrVpeNS7JYbu9W4v+4KnjhaLg1h3NJlfco2/BXm4663
9dFIDIaTAT+aqeN0KtMqjKzWoCJt1XFrNKhZlrHLtcOGqxzE9oSp85FdYYcxO6rLpURX8jHDu5ll
MWZdSRvYbntTrqp1nh/tJ3nsGQxLosodpKKx5tpId3uR2mIGK7NlH4u1idjJ2LaqaWydNXprTIdg
yHKDiwdlR9U2w23uMD/mij3BkzIMUzukU/Ew68j1np1BoVbLDVvTvhU1EAr24XIaHvaSrGb766OJ
qny7arBWWeqqrGLhnquJFqhxIDWNuG4ehdLeyWJ523Hb3tJDHVcaOet2WV30VqO9lbW3/cZ06RDM
6ix/KI+yK3WdTVpGsM+yXp+Jsl3L1RriVI2WnHFYzHO2lE75jnls1TNBr7VGiK9Ku4HdWdTC2WJp
egOF9TOzHOYRmojVPZ+tF1QpG/UqLWVUH3QVdsqMay6HzLYQcCUjk07tlLpans88xcgyka0Rt+/A
rpvqOjPseMPqOGZGslHm19JEkuWKdggdO5+JnflBlodM/4BpFzvm1qiH2UFEfCDbZSvjVjic8rPe
TuRKaqbUUCbBLimXkq0ersqRb45cM1zEx0LUTRjbqR4nzqRSOgR+lp9Y430zEyyT3DRJp/odo9Ta
uaXeus5w87CRKB3djgtBk982GtE+dErjqDrnxYQP8sfRcJpMF7NKfpHpFzcsEox9ccUlGt+tdUqs
kE4NBvq6bDdKx3I08CTFzk8XqDMfF8tFPG9ygrJRuTitlhUtbO/HmIQ129xL0Vba5HvthilV1s5x
NeK2TI/L8OlUp+GOArE/a7sNUxGH/ZXVabnluDM2FMPZcf1qaz+biKbTtLIW3vh1qws+GhsdsxxX
R9VdoeQIo3w+X84bDeLXVmod6xAw/fmUdxgh1pei4Q9yLppvKvXevKfvO8FwPuAbx7yLbb3O9hsy
qtRqtXiPrQ6z2TTqnqLy6uboaY10yhTkdUct8JJX4gsHlW9aMWOihinUa+XQnbDtNVcubvLNITuV
NSEaH2INVTRh6OxaSSt0zQpX2RVNPeMV/HY6teh0UZPVlZxfalYrpW59lA0LqpcUF3peJGV83ctl
dpuMnOyagdewXaM3NXXLrXLDWvmghkVGrbb6B2m4x3zb949NIrmBPV9EFVvljgW3VNs5h5op5JBs
OfLQ0LINlq1Wymt7UTdNPVlKXJPpljLNhTSrLTy1YYqSMuI26VRYau7UeWvcs7wE7671kdrmubxd
Uplk1tGH5Z7Y04vS5iA2Qn7BHV0jdof7dX9t5vJGZpTXh35Hkw7Gwiyx5C3f474zi/Nhxsrrrqw0
hSjDLY09/mXGrUNgH0dI0YSgubSaPBMyW3+xWbRkcb7p1Zg2aprH2mJYL/CL8UHupVPZwoDZLUyE
V7Ai6geuObZGO717ZHKNFRK0ETspjvP5bm9qTzf9vlb2sD1pD5CzSCw+zrurw7HXK2VrYdXNYgmR
5/o6kY/7Rb+iVrTcYLsaKpomt9ZHploXqtJR4i2d68ZSF4k5a4OXKS8ultjGvlgNuUY7i/XUPvRK
5Xk7GmJL3tQzJVfMtRPDXDrHHsctmCFjCuOqU293nYPCsSYfGNEuyS2QVq60x/WCtueq0aK+cL1o
NAs8tGAGkrb18OqcZVsVt7yvqyLnNSeJvBOz/ene0Jqrms3nMrMj09RLGznxsB1fzZuT8KhFTHgs
7JKinzSUYeD7W6az7Th2Aa+nwrRZKy3GG4ERRlwlE+aL/HHZtxsJVyg31VjVxIzcbtc7GctZrBa8
twtEr7nZNl0Vhc1sa8C0zQMWqn4m73bTqSrXGB+cgtjS1u3tlAvQTG7VusdlOebzUXe230RjpiB0
wliQVx1lXFlaMuM5mtkJw+U4yYwyYqONDc6gNWpy6VSvlUStmpmPm/1aNRCjdiM0vUnVm00ZrRMb
hWq2NomaGrZD3Xl3dqzVLL3KieG4oa10VO31WLO19a0lo20GM6xZQqHB+eNZT2i38jNxsTiMkvXx
yMzZPfJdw+TUTEuczNaMF6jKDNPnDQW5mmVaiinq2NNho1EVj6tTMRVsLTNe2UNRdRvYXaEmaUJ/
ZDP9XT7SMgqWCL7PDsw+ay9r09KwWTArI8MUNkybXQyRXY/4IFR7+8oy2u3ySQ5j82PFjYduzaxW
NkHk2XNr3rXbnqB0s2gtbszDsN5jGgOz0XJCRzzkXRU7KxUU69i2LztHi1/wbTsJaq2jpqdTLhZL
z+vugkKPE4OCjA7iMWlY0w13ZI8LNqr53bI4P/Jb0bVCwSrsR5ru1DLzcibby1nxQbP01lpwUNu1
yukUl+3v1v7OxOu8PpLa8cocL8uKi0bIOixjaxKEe2xN9O1Kcrxyd7zrr+NmJz/s8M24oi24FhLb
LdYsTcy5tMKWvDduHLbL2ViaWMuKU+mwitfYe0pSXfeEkTZzdqFQayCz2M0paCDuM958F7ioa1Vn
drXle3at1EeVo9mfDbR0yt6E26SK7eRhj1ZIybtafl23HWnZG66W/XY3GjcWvrkb7hblyOrIVs8f
VRszv2KxHfJidHXX73JuXU2OIr9Ipw76bBgPjCziUHPqz+VyL1tB5mA87TNlf1TZjKdcdqHth/Nu
gqamOBftZN0vO/UOElcFW5bHs8Fq3662A+3YxHo6mS0ibNlY3eOWGzJX2eFI0A54z79yZ/1WfmkW
kJKd1I5YeswSGu+daluVD90QtZrt/Ly7OuiSLMil4RaPtCJaC/koHpQSFjalnUXt5qYm1ivWmJXL
1fGmP8+2g9oxUY+a1MU603eWjO3K7eUQbUolvmriukW77zVW9SCdmhbU+aiy72+SaOqGbndmLi12
yqqsXam10EpaBHnWGey0Y9yd7yfLfKRavRyXaSWx2Giu1nnD6eSwqd7Uyhvsh+jRZFjUEkUKdtGK
7UWjXDu3bludsugseJ5fx0y5ylbCwiHndwYTPCvtKDIz4/WifMzY+VEJ1X2r1oo2ej6wsZ5GA7/U
bztMm8sUzWTHVPwB09sdvDAYHJwIL6XRtF7IugduJ+tcMdK12bSOR5VX1oWj4VRrmaKnZZNexc2x
WE+X3XExm6seC/KozE5zzHajNYq+7BaTzKFoIDuQdLmXq+4jRc1VB6tVM6uNwlKu228XigMrH3Qm
VpItHcpxBs/ppj7o8WO7kXE1x9ybqwzHHZoD01uz6kK2BoNMpzIqjQt9ZRpFi+aUKY3rS0YqjRYL
xivG/EiaCDnLFLZ6RsOaNdn1DBM1k0F/qOy3UlYtVKT8dj3FuuVu+aS0S4aBHva67GCR9WsxI8/W
aDyubxrisFTQHK02E2wPmSxq7PC60NT98SYwyj0ux7WrdRNJSd+y6wd/pu6nYWuXdDqblmSiMttV
QpFx+3vXmAfKnHfCeHLItFlTmlTWWyPYOtj26sby6GHVLw4mIxcNXd/PCdFS5lvBgpcnk/rC4VED
CbuWs9zx00K0NA4jbsA5bX461WrhEOnV6kA4FPzCgiXfNW43lA5XKI35xBNDBdWc9sYuFIdCS+0E
hQUTNlc2tjdzszNt5SJU0DPF49Tpjw29vFTCDKoM0TxXyo3yTBXbEK4lCD725WqHQ5GPM6yOJaxp
BgVlHe/NQhd7LBqaibbZN0Z5Vhsam8yCY3G+izShYEbmsajzljtkuN0oncoPbHU926C9YWGnIfDM
+ioezaZT51CftYORJ7jNRIwyKDcIynl1URG0o+KE7by7yS+4TUkf4T37NlEWQpNY8nC/6rFCs1rI
LeY9s7LUcdtmLWPphmY5ZYaPGs2dXNctpLfrLb2Yz/GzeNIYTpd2dzDv28uo252N8Cqxzs8wbZls
3V5t6vIg0zvWNsOWpKM17w432jSrr4ZLo9xguwXZVYZCX8nr+6BjFHJG89jKNRO/ypVbi6WLels5
NBrNfjqFN+6F3rFuGJjlItfwUAnV1ERxSofGslLVBqY5sIO5Uu7z9VkhY+6OM09Pav28uGO1RXs8
yvXamayf3TGHFvYcFOxAGVaVGbB9PjTcWr9WWeaEZcIGmeNcP5SLy0a9HymrXKFpjkxx2Gt0J92p
I8eFwwQFQ7Vn1xpOB+9Q22snnSrm+Go+Z3qjee0gIdEMK43CklsZQc0fjUdLtKhg7PNQmfGMW9fL
Qc+NbKPdzMSZZdkrVFaoYg1bDdU4ijOMbeKPvcPBWpaEcLhnneJYrtbKhe3I9ubGrCZzGtcQHQnP
WXm9Lh+FankeFnrj5SEIyvPWzEOhOguy21y8XY2whz9ADMLbXDQWGvvYGzCLwkpVNWOTVU3Umm1R
pV+Xs5PGqOiv5Q6jrg6yOjwkCHHbcqvC5tb2VmFjNJUSe9HBfm/tYC6ajW1YH2+2nGDWZli/pGky
7KksbpAZxl1unWFQT5JRrbTftNwoVzlu8LrA+PmKeUTiTvY37FgRMxNsyUVzvbVZRux1G3g7uckr
g66sJS1rgifSKygjs5m4c9ktj8a92jTcZNvD5W4R8NVcV0ElSSyuzVlRxFtGb+9j2irjoTwSdX0X
KrmDruUzgeyzDBZXtE16erlb4vjBusYvB9XFojbVqrkhh8TYW9eVQ7Ej8ZHazzby+V3juKxhbOO5
zC6NNcsz61pOUAtKuFse53PUc2d4BC3XLjDsYIKdSne8nLYV3jFXi2WCOE/HnkMQt3gX+2ZqrbzK
F9Mp0beLzsg7YmGvL6XORlq7zLImZytsnt/Nd9O+mcnYzeZGmCNxtPeiWuQpDtvtT5Ta1jDt6iwz
Lmz1al3BVhRrVkZQh9rRzMViRxxH65xjyDm/3dWZXTFTtpahV2AVsxgNdu157K3kaigdsfcj9Hkz
1/PMpStmtyXOLeSySSudWg47TszYSYTX9TZ2lEXF5IajWW0kVYtlxzj6szn2LeUBW1k5bW5WJ1Gq
kBcjyVOsdj3KVgre5LBcTztDFs/CetL1KitZMieO3SpthPwu5x3DSEP9Sm+Ux4u8n1nusrVKy1dq
kdWofBaAS6c+KfXGpVI+HzCrpGsEVWGijSGqKFRb2KpEXtV13X/fnprcOTf5PNyezf3xwueeCLcX
/ng5/f9wuP0qPvtwmD3P/vHClR6sTv8k1whvU54Ky3PlZ8LyFcvf3I3LX0fYIXj+ZsT/gazvRtOF
bRyHwW+PpI+hG3lvLVe+Qw6vRF36+aMcIlsc//5Y7pcK1z2SHz/MIX/8jXuksyup4R8+nDlR9QLH
gJOl/UDD7sbpzTdby4e//SZYE+yQ+WH08anQHem7x5L/hWKInddw51SicElOUL8hhpiSbO6RWfu2
GL4l+QkxzD0vhg9VBzGkVL1MMVkvD9L168TwLUt+jRhKVmwp0dzuzZ3ktwvjdO7HTjQPpqGLu3xO
DJHvhwnmZdQJkW23MHmfrCMft5Uc34mdJ5uTv1eJpQvP23YZbE5/tXLu+0+0JT3ShpgY0fH9zQON
ibC4UbgN7JPI0Il5oCUlVXUsG8+d6szdWXxZ3V9pesq/yZGbAdzv1fy38vFAM8zV0xixis3H8Bc+
H5xUai7KPB5W/s7fLP3UXry/svBfbv+FCON2KqGPWfWz1r/AFZ68TvLTtv+a3IensvC8//HQ1ROw
+3/++effauqvOfBrDD0Zx99xgyTex9hXJwvUWXSes/PYOIkhcbfik7lqb13X2cRotXKCR4zCNYZ2
uI0m1Fo7dODSPMKcCqO584gFvnJ+yN8czj7j+vBwlYr8/7D4v2few+LPkdteuUd2CFeG7CuZJEIj
zqzAJbec3hP3n6vy78pnaz6Z/V0yOgmDTYgXi5/1gzGnC89erHtWFE40PrII4hWwGfiHh6+7vf4V
bRa7yrnSQ3uws8jkHgkkUJv5lHCdhvsrJervWmHjADukxFT5G+KbtyeTT/+S+tc7LC7/yDL2nVX2
Dsm/dYeVe8RxpFKjLVdhFNMdVlsU9b9r2b3Dkv9dG/3LAOLw+7t8jn3EJ/41Mkjp/b0C+Ehclgog
puqFysHfL3qUE79G7v6mC+tjvwFES9jbmsTOs7v601b04bUL0++cWNxyHvEGrzYwZSygD1mi79yH
v+XH4+sxuQ3/5E40+3jkqhG+RJe3J+yPqPsvljPCVcOKZ79Zwq5CHrm/RV5ex/W4pLCF5yXl8b0u
oeUlpuLyf/4XRTrioH0IJs1IjBwrdp5fAiu4xo+/9PkkCjfhNH5pW8Hmpe1E8ykJeq/ev2f09ZFN
nnvkmO57q+jtoJ9bR0vPvX6TfXwdpRT9fWvoLR++XEXfAm/lGBma3Ojg30ROSRCGBmQiskpHgTS3
/NDFkhkmTtSeOb7/0o639jy8iHPhT/7PXK78iEAHW98/R8ihszHtbAmd2dBZ9scLc4/QewoH7+LU
55v4t+vcnPTk456ojgvbzQEFOJPqwInnN9MN1LVjPE/LK108Hb3Td1MlBt5kvLxlrMNnsyt2xxk0
2FGf3fZy/naklLnJoaCMuWo8OSRub9k7THL+brxg2foCbdMpXcwndVGQ7P6etQdV3+gXfHvQOgz7
yUarCNnhcr8asrHv9Fo7K9fbGn2Na+Tk7PDYzekd79hQuklT8iqIflFfHH3Sf6E67leCUXe/mnCt
jq1W/WE/609ceNdWbikVdmhORPr5b0+ib/5KCfxN1hz8pVsv22kFptA2K3i0siASToxcASFliPsX
ZAK3yNunHQa1ZfzvgkFdTeiYci6dEhIkNFyMre1K8N2ihHzUHsMmqSm7gothg7xzKzHoi3/pO85b
F5Pnqgw6sgKT6GU05QHW0Sk/S/Kb4mv+BucbJs5PyN+Ow7VwPoHhby5I7g2mAS5x0f0etA8wIV4T
yF98a9gkBzDiHHj3mPx7wvBa87UewNADwJiJzTbJ91xCG9Qkb/ZTGqAvhE4tDh9hpqO+YAbYJHNK
awIGSv15VLf8QoULJvcVvqIEY7um5YhLsuxbWgi8/4B2kk97gNGmU94rv7gPRnV8zf+avye+nUsu
HKWY3C96oKMeXOb0XGKIbzGZ1/nsB/xNELrMNXnf4jzbyetsw2jyZ1rJ+9SXmbj0kNz2QOTttY+7
s37G5F7m9MMeYE7PJRdMxntM2ff53rkHyg0ib5c+5Fdtgpkx73L6agbat3w+zSngLnc/4I95zekP
+VygevoZp8mX5+/2cAVTjAnV0/yNPBH48EY65EdngtD2fpTYTFJ+5C988y60vOXj4SKvVE9vR3E7
V9c9jV57KrydCWInyZf33vNj8zq3hbd8aVzPecl8p0OnOX2jRRn2OZ3IuK/56dTglfPvRnmhSbgr
hzd6/RHfvGsa7DvrhnsjHd7NnN6T2Lujla97ql7T/Ia2CS4ZmO9pkG9aXGvhLVeo7dU/aDF5s55S
7SJw5b4+tylt9y1kefOVbbmZweStDflIYhsfrMi3KzulbXAquadNH3FBv9NDOvXax70Z0D/Rons9
UD/ka4/mMgP6J1p3padc8tx6emetu11PbzBlP1jjCaZbu5hlX9fTe/7FR97CJz1g2m79josW3cqZ
e+1d3fLtRNu1D/QRLQ96D69r1l2vwP1g3bzri77akJs+i59w/h5XShfaqS585fswe0wm9eIzxIc3
PvDh4ds+gmCSP40pCxWX/HVnGVfnBQbJDJomgpF0Tv+qPOrwEpOoEoFRomKM+hsYYzNfc/BMJAaD
JjrhD4EFnoxySvioJgTOmG/h2/J06jbnDoaA9gA9CoWkzqDNBU4IPEGEtgymrXsq2eGaSH6lmkHO
RGTo6GDUl9Hnhell9Bk04OXXenhOTzUTJAekD1wjQAzAEppouCXuiSFcUAkXKFeciZDQHjEsG4RG
KQF5M3GfiTJ9zaHwpcZjMG7PENpOfeKcOoz2Pgw0YynQxTO/yKiBX5c5x7R1LuMmoxaTd3fav/7W
TmQFm5UVOUF8DsKcc963hr18zTlsXoMTn4RU7l5KmS+d6PdfSSG9VMMxHsrEIxegCLGvpG7++n8X
83XTlJsAAA==</Form>
  <Code><![CDATA[
$MainForm_Load={
	
	$console.Text = "Thank you for using my HPIA repo management tool. This tool is HEAVILY inspired by a tool created by Dan Felman called HPIA Softpaq Repository Downloader located here:`n https://github.com/ofelman/HPIA-Repository-Downloader`n`nThe app leverages functions and modules included in HP CMSL created by HP and Gary Blok. Information for CSML is located here:`nhttps://developers.hp.com/hp-client-management/doc/client-management-script-library?language=es`n
	
This tool creates and downloads driver repositories for use with HP Image Assistant. enabled the /offlinerepository: argument and point it to the location of the created repository."
	
	#set the program root folder
	$global:programroot = 'C:\Program Files (x86)\HPIA Driver Repository Management'
	
	#import cmsl modules by file to avoid having to restart the program/shell
	Import-Module -Force "C:\Program Files (x86)\HPIA Driver Repository Management\cmsl\Modules\HP.Consent\HP.Consent.psd1"
	Import-Module -Force "C:\Program Files (x86)\HPIA Driver Repository Management\cmsl\Modules\HP.Private\HP.Private.psd1"
	Import-Module -Force "C:\Program Files (x86)\HPIA Driver Repository Management\cmsl\Modules\HP.Utility\HP.Utility.psd1"
	Import-Module -Force "C:\Program Files (x86)\HPIA Driver Repository Management\cmsl\Modules\HP.ClientManagement\HP.ClientManagement.psd1"
	Import-Module -Force "C:\Program Files (x86)\HPIA Driver Repository Management\cmsl\Modules\HP.Firmware\HP.Firmware.psd1"
	Import-Module -Force "C:\Program Files (x86)\HPIA Driver Repository Management\cmsl\Modules\HP.Softpaq\HP.Softpaq.psd1"
	Import-Module -Force "C:\Program Files (x86)\HPIA Driver Repository Management\cmsl\Modules\HP.Repo\HP.Repo.psd1"
	Import-Module -Force "C:\Program Files (x86)\HPIA Driver Repository Management\cmsl\Modules\HP.Sinks\HP.Sinks.psd1"
	Import-Module -Force "C:\Program Files (x86)\HPIA Driver Repository Management\cmsl\Modules\HP.Retail\HP.Retail.psd1"
	Import-Module -Force "C:\Program Files (x86)\HPIA Driver Repository Management\cmsl\Modules\HP.Notifications\HP.Notifications.psd1"
	
	#initalize a data table to reference for the datagrid
	$script:dt = [System.Data.DataTable]::New()
	
	#create select column with check box
	$removecolumn = New-Object System.Data.DataColumn;
	$removecolumn.DataType = [System.Type]::GetType("System.Boolean");
	$removecolumn.ColumnName = "Select";
	
	
	
	$dt.Columns.Add($removecolumn);
	$dt.Columns.Add('Platform')
	$dt.Columns.Add('Model')
	$dt.Columns.Add('OS Info')
	$dt.Columns.Add('Current Stores')
	
	
	#assign the data table to the datagrid
	$filterinfogrid.DataSource = $dt
	
	
	$filterinfogrid.AutoSizeColumnsMode = 'AllCells'
	$filterinfogrid.Columns[0].ReadOnly = $false
	$filterinfogrid.Columns[1].ReadOnly = $true
	$filterinfogrid.Columns[2].ReadOnly = $true
	$filterinfogrid.Columns[3].ReadOnly = $true
	$filterinfogrid.Columns[4].ReadOnly = $true

}


#region CMSL
# 
#  Copyright 2018-2022 HP Development Company, L.P.
#  All Rights Reserved.
# 
# NOTICE:  All information contained herein is, and remains the property of HP Development Company, L.P.
# 
# The intellectual and technical concepts contained herein are proprietary to HP Development Company, L.P
# and may be covered by U.S. and Foreign Patents, patents in process, and are protected by 
# trade secret or copyright law. Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained from HP Development Company, L.P.

Set-StrictMode -Version 3.0
#requires -Modules "HP.Private","HP.Softpaq"

$RepositoryType = @"
public enum ErrorHandling {
  Fail = 0,
  LogAndContinue = 1
};

public class SoftpaqRepositoryFile {
  public class SoftpaqRepositoryFilter {
      public string platform;
      public string operatingSystem;      
      public string category;
      public string releaseType;
      public string characteristic;
      public bool? preferLTSC;
  };

  public class NotificationConfiguration {
      public string server;
      public int port;
        public bool tls;
        public string[] addresses;
        public string username;
        public string password;
        public string from;
        public string fromname;
  };
  
  public class Configuration {
    public ErrorHandling OnRemoteFileNotFound;
    public int ExclusiveLockMaxRetries;
    public string OfflineCacheMode;
    public string RepositoryReport;
    }


    public string DateCreated;
    public string DateLastModified;
    public string CreatedBy;
    public string ModifiedBy;
  public SoftpaqRepositoryFilter[] Filters;
  public NotificationConfiguration Notifications;
  public Configuration Settings;


}
"@

$REPOFILE = ".repository/repository.json"
$LOGFILE = ".repository/activity.log"

Add-Type -TypeDefinition $RepositoryType

function test-repo
{
	$repo = $txtboxRepoLocation.Text
	if ((Test-Path "$repo\$ver\HPIACommon\.repository") -eq $false)
		{
			$lblNoRepoDetected.Text = "Repository not found for version $ver"
			$lblNoRepoDetected.ForeColor = 'Red'
			$btnSyncOrCreateRepo.Text = 'Create'
		}

	 ((Test-Path "$repo\$ver\HPIACommon\.repository") -eq $true)
		{
			$lblNoRepoDetected.Text = "Repository Detected"
			$lblNoRepoDetected.ForeColor = 'Green'
			$btnSyncOrCreateRepo.Text = "Sync"
		}
}

<#
.SYNOPSIS
  Synchronize repository and generate a report with repository content information

.DESCRIPTION
  This command performs a synchronization of a repository, by downloading latest SoftPaqs associated with the repository filters. At the end of each sync, it creates a repository report in a format (default .CSV) set via Set-RepositoryConfiguration.

  The command may be scheduled via task manager to run on schedule. Define a notification email via Set-RepositoryNotificationConfiguration to receive any failure notifications during unattended operation.

  This command may be followed by Invoke-RepositoryCleanup to remove any obsolete SoftPaqs from the repository.

  Invoke-RepositorySync functionality is not supported in WinPE. 

.PARAMETER Quiet
  Suppress progress messages during operation.

.PARAMETER ReferenceUrl
  Specify an alternate location for the HP Image Assistant (HPIA) Reference files. This URL must be http or https. The Reference files are expected to be at the location pointed to by this URL inside a directory named after the platform ID you want a SoftPaq list for. If not specified, ftp.hp.com is used via HTTPS protocol. 

  For example, If you want to point to 83b2 Win10 OSVer 2009 reference files, Get-SoftpaqList will try to find them in this directory structure: $ReferenceUrl/83b2/83b2_64_10.0.2009.cab

.EXAMPLE
  Invoke-RepositorySync -Quiet

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)
#>
function Invoke-RepositorySync
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Invoke-RepositorySync")]
	param (
		[Parameter(Position = 0, Mandatory = $false)]
		[switch]$Quiet = $false,
		[Alias('Url')]
		[Parameter(Position = 1, Mandatory = $false)]
		[string]$ReferenceUrl = "https://hpia.hpcloud.hp.com/ref"
	)
	
	$repo = LoadRepository
	try
	{
		$cwd = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath((Get-Location))
		$cacheDir = Join-Path -Path $cwd -ChildPath ".repository"
		$cacheDirOffline = $cacheDir + "\cache\offline"
		$reportDir = $cacheDir
		
		# return if repository is not initialized
		if ($repo[0] -eq $false) { return }
		
		# return if repository is initialized but no filters added
		$filters = $repo[1].Filters
		if ($filters.Count -eq 0)
		{
			Write-Verbose "Repository has no filters defined - terminating."
			Write-Verbose ("Flushing the list of markers")
			FlushMarks
			return
		}
		
		$platformGroups = $filters | Group-Object -Property platform
		$normalized = @()
		
		foreach ($pobj in $platformGroups)
		{
			
			$items = $pobj.Group
			
			if ($items | Where-Object -Property operatingSystem -EQ -Value "*")
			{
				$items | ForEach-Object { $_.OperatingSystem = "*" }
			}
			
			if ($items | Where-Object -Property category -EQ -Value "*")
			{
				$items | ForEach-Object { $_.Category = "*" }
			}
			
			if ($items | Where-Object -Property releaseType -EQ -Value "*")
			{
				$items | ForEach-Object { $_.ReleaseType = "*" }
			}
			
			if ($items | Where-Object -Property characteristic -EQ -Value "*")
			{
				$items | ForEach-Object { $_.characteristic = "*" }
			}
			
			$normalized += $items | sort -Unique -Property operatingSystem, category, releaseType, characteristic
		}
		
		$softpaqlist = @()
		Log "Repository sync has started"
		$softpaqListCmd = @{ }
		
		
		# build the list of SoftPaqs to download
		foreach ($c in $normalized)
		{
			Write-Verbose ($c | Format-List | Out-String)
			
			if (Get-HPDeviceDetails -Platform $c.platform -Url $ReferenceUrl)
			{
				$softpaqListCmd.platform = $c.platform.ToLower()
				$softpaqListCmd.Quiet = $Quiet
				$softpaqListCmd.verbose = $VerbosePreference
				
				Write-Verbose ("Working on a rule for platform $($softpaqListCmd.platform)")
				
				if ($c.OperatingSystem.StartsWith("win10:"))
				{
					$split = $c.OperatingSystem -split ':'
					$softpaqListCmd.OS = $split[0]
					$softpaqListCmd.osver = $split[1]
				}
				elseif ($c.OperatingSystem -eq "win10")
				{
					$softpaqListCmd.OS = "win10"
					$softpaqListCmd.osver = GetCurrentOSVer
				}
				elseif ($c.OperatingSystem.StartsWith("win11:"))
				{
					$split = $c.OperatingSystem -split ':'
					$softpaqListCmd.OS = $split[0]
					$softpaqListCmd.osver = $split[1]
				}
				elseif ($c.OperatingSystem -eq "win11")
				{
					$softpaqListCmd.OS = "win11"
					$softpaqListCmd.osver = GetCurrentOSVer
				}
				elseif ($c.OperatingSystem -ne "*")
				{
					$softpaqListCmd.OS = $c.OperatingSystem
					#$softpaqListCmd.osver = $null
				}
				
				if ($c.characteristic -ne "*")
				{
					$softpaqListCmd.characteristic = $c.characteristic.ToUpper().Split()
					Write-Verbose "Filter-characteristic:$($softpaqListCmd.characteristic)"
				}
				
				if ($c.ReleaseType -ne "*")
				{
					$softpaqListCmd.ReleaseType = $c.ReleaseType.Split()
					Write-Verbose "Filter-releaseType:$($softpaqListCmd.releaseType)"
				}
				if ($c.Category -ne "*")
				{
					$softpaqListCmd.Category = $c.Category.Split()
					Write-Verbose "Filter-category:$($softpaqListCmd.category)"
				}
				if ($c.preferLTSC -eq $true)
				{
					$softpaqListCmd.PreferLTSC = $true
					Write-Verbose "Filter-preferLTSC:$($softpaqListCmd.PreferLTSC)"
				}
				
				Log "Reading the softpaq list for platform $($softpaqListCmd.platform)"
				add-logs "Reading the softpaq list for platform $($softpaqListCmd.platform)"
				
				Write-Verbose "Trying to get SoftPaqs from $ReferenceUrl"
				$results = Get-SoftpaqList @softpaqListCmd -cacheDir $cacheDir -maxRetries $repo[1].settings.ExclusiveLockMaxRetries -ReferenceUrl $ReferenceUrl -AddHttps
				Log "softpaq list for platform $($softpaqListCmd.platform) created"
				add-logs "softpaq list for platform $($softpaqListCmd.platform) created"

				$softpaqlist += $results
				
				
				$OfflineCacheMode = $repo[1].settings.OfflineCacheMode
				if ($OfflineCacheMode -eq "Enable")
				{
					
					# keep the download order of PlatformList, Advisory data and Knowledge Base as is to maintain unit tests
					if (-not $ReferenceUrl.EndsWith('/'))
					{
						$ReferenceUrl = $ReferenceUrl + "/"
					}
					$baseurl = $ReferenceUrl
					$url = $baseurl + "platformList.cab"
					$filename = "platformList.cab"
					Write-Verbose "Trying to download PlatformList... $url"
					try
					{
						$PlatformList = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirOffline -Expand
						Write-Verbose "Finish downloading PlatformList - $PlatformList"
					}
					catch
					{
						$url = "https://ftp.hp.com/pub/caps-softpaq/cmit/imagepal/ref/platformList.cab"
						Write-Verbose "Trying to download PlatformList from FTP... $url"
						$PlatformList = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirOffline -Expand
						if (-not $PlatformList)
						{
							$exception = $_.Exception
							switch ($repo[1].settings.OnRemoteFileNotFound)
							{
								"LogAndContinue" {
									[string]$data = formatSyncErrorMessageAsHtml $exception
									Log ($data -split "`n")
									add-logs ($data -split "`n")
									send "Softpaq repository synchronization error" $data
								}
								# "Fail"
								default {
									throw $exception
								}
							}
						}
					}
					
					# download Advisory data
					$url = $baseurl + "$($softpaqListCmd.platform)/$($softpaqListCmd.platform)_cds.cab"
					$cacheDirAdvisory = $cacheDirOffline + "\$($softpaqListCmd.platform)"
					$filename = "$($softpaqListCmd.platform)_cds.cab"
					Write-Verbose "Trying to download Advisory Data Files... $url"
					try
					{
						$AdvisoryFile = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirAdvisory -Expand
						Write-Verbose "Finish downloading Advisory Data Files - $AdvisoryFile"
					}
					catch
					{
						$baseurl = "https://ftp.hp.com/pub/caps-softpaq/cmit/imagepal/ref/"
						$url = $baseurl + "$($softpaqListCmd.platform)/$($softpaqListCmd.platform)_cds.cab"
						Write-Verbose "Trying to download Advisory Data from FTP... $url"
						#$cacheDirAdvisory = $cacheDirOffline + "\$($softpaqListCmd.platform)"
						#$filename = "$($softpaqListCmd.platform)_cds.cab"
						$AdvisoryFile = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirAdvisory -Expand
						Write-Verbose "Finish downloading Advisory Data Files - $AdvisoryFile"
						if (-not $AdvisoryFile)
						{
							$exception = $_.Exception
							switch ($repo[1].settings.OnRemoteFileNotFound)
							{
								"LogAndContinue" {
									[string]$data = formatSyncErrorMessageAsHtml $exception
									Log ($data -split "`n")
									send "Softpaq repository synchronization error" $data
								}
								# "Fail"
								default {
									throw $exception
								}
							}
						}
					}
					
					# download Knowledge Base
					$url = $baseurl + "../kb/common/latest.cab"
					$cacheDirKb = $cacheDirOffline + "\kb\common"
					$filename = "latest.cab"
					Write-Verbose "Trying to download Knowledge Base... $url"
					try
					{
						$KnowledgeBase = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirKb
						Write-Verbose "Finish downloading Knowledge Base - $KnowledgeBase"
					}
					catch
					{
						$url = "https://ftp.hp.com/pub/caps-softpaq/cmit/imagepal/kb/common/latest.cab"
						Write-Verbose "Trying to download Knowledge Base from FTP... $url"
						#$cacheDirKb = $cacheDirOffline + "\kb\common"
						#$filename = "latest.cab"
						$KnowledgeBase = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirKb
						Write-Verbose "Finish downloading Knowledge Base - $KnowledgeBase"
						if (-not $KnowledgeBase)
						{
							$exception = $_.Exception
							switch ($repo[1].settings.OnRemoteFileNotFound)
							{
								"LogAndContinue" {
									[string]$data = formatSyncErrorMessageAsHtml $exception
									Log ($data -split "`n")
									send "Softpaq repository synchronization error" $data
								}
								# "Fail"
								default {
									throw $exception
								}
							}
						}
					}
				}
			}
			else
			{
				Write-Host -ForegroundColor Cyan "Platform $($c.platform) doesn't exist. Please add a valid platform."
				Write-LogWarning "Platform $($c.platform) in not valid, and is was skipped."
			}
		}
		
		Write-Verbose ("Done with the list, repository is $($softpaqlist.Count) softpaqs.")
		[array]$softpaqlist = @($softpaqlist | Sort-Object -Unique -Property Id)
		Write-Verbose ("After trimming duplicates, we have $($softpaqlist.Count) softpaqs.")
		
		
		Write-Verbose ("Flushing the list of markers")
		FlushMarks
		Write-Verbose ("Writing new marks")
		
		# generate .mark file for each SoftPaq to be downloaded
		foreach ($sp in $softpaqList)
		{
			$number = $sp.id.ToLower().TrimStart("sp")
			TouchFile -File ".repository/mark/$number.mark"
		}
		
		Write-Verbose ("Starting download")
		$downloadCmd = @{ }
		$downloadCmd.Quiet = $quiet
		$downloadCmd.Verbose = $VerbosePreference
		
		Log "Download has started for $($softpaqlist.Count) softpaqs."
		add-logs "Download has started for $($softpaqlist.Count) softpaqs."
		foreach ($sp in $softpaqlist)
		{
			$downloadCmd.Number = $sp.id.ToLower().TrimStart("sp")
			$downloadCmd.Url = $sp.url -Replace "/$($sp.id).exe$", ''
			Write-Verbose "Working on data for softpaq $($downloadCmd.number)"
			try
			{
				Log "Start downloading files for sp$($downloadCmd.number)."
				add-logs "Start downloading files for sp$($downloadCmd.number)."
				DownloadSoftpaq -DownloadSoftpaqCmd $downloadCmd -MaxRetries $repo[1].settings.ExclusiveLockMaxRetries -Verbose:$VerbosePreference
				
				if ($OfflineCacheMode -eq "Enable")
				{
					Log ("    sp$($downloadCmd.number).html - Downloading Release Notes.")
					add-logs ("    sp$($downloadCmd.number).html - Downloading Release Notes.")
					$ReleaseNotesurl = Get-HPPrivateItemUrl $downloadCmd.number "html"
					$target = "sp$($downloadCmd.number).html"
					$targetfile = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($target)
					Invoke-HPPrivateDownloadFile -url $ReleaseNotesurl -Target $targetfile
					Log ("    sp$($downloadCmd.number).html - Done Downloading Release Notes.")
					add-logs ("    sp$($downloadCmd.number).html - Done Downloading Release Notes.")
				}
				Log "Finish downloading files for sp$($downloadCmd.number)."
				add-logs "Finish downloading files for sp$($downloadCmd.number)."
			}
			catch
			{
				$exception = $_.Exception
				
				switch ($repo[1].settings.OnRemoteFileNotFound)
				{
					"LogAndContinue" {
						[string]$data = formatSyncErrorMessageAsHtml $exception
						Log ($data -split "`n")
						add-logs ($data -split "`n")
						send "Softpaq repository synchronization error" $data
					}
					# "Fail"
					default {
						throw $exception
					}
				}
			}
		}
		
		Log "Repository sync has ended"
		add-logs "Repository sync has ended"
		Write-Verbose "Repository Sync has ended."
		
		Log "Repository Report creation started"
		add-logs "Repository Report creation started"
		Write-Verbose "Repository Report creation started."
		
		try
		{
			# get the configuration set for repository report if any
			$RepositoryReport = $repo[1].settings.RepositoryReport
			if ($RepositoryReport)
			{
				$Format = $RepositoryReport
				New-RepositoryReport -Format $Format -RepositoryPath "$cwd" -OutputFile "$cwd\.repository\Contents.$Format"
				Log "Repository Report created as Contents.$Format"
				add-logs "Repository Report created as Contents.$Format"
				Write-Verbose "Repository Report created as Content.$Format."
			}
		}
		catch [System.IO.FileNotFoundException]{
			Write-Verbose "No data available to create Repository Report as directory '$(Get-Location)' does not contain any CVA files."
			Log "No data available to create Repository Report as directory '$(Get-Location)' does not contain any CVA files."
		}
		catch
		{
			Write-Verbose "Error in creating Repository Report"
			Log "Error in creating Repository Report."
		}
	}
	catch
	{
		err "Repository synchronization failed: $($_.Exception.Message)" $true
		[string]$data = formatSyncErrorMessageAsHtml $_.Exception
		Log ($data -split "`n")
		add-logs ($data -split "`n")
		send "Softpaq repository synchronization error" $data
	}
}

Add-Type -TypeDefinition $RepositoryType

# print a bare error
function err
{
	[CmdletBinding()]
	param (
		[string]$str,
		[boolean]$withLog = $true
	)
	
	[console]::ForegroundColor = 'red'
	[console]::Error.WriteLine($str)
	[console]::ResetColor()
	
	if ($withLog) { Write-LogError -Message $str -Component "HP.Repo" -File $LOGFILE }
}

# convert a date object to an 8601 string
function ISO8601DateString
{
	[CmdletBinding()]
	param (
		[datetime]$Date
	)
	$Date.ToString("yyyy-MM-dd'T'HH:mm:ss.fffffff", [System.Globalization.CultureInfo]::InvariantCulture)
}

# get current user name
function GetUserName ()
{
	[CmdletBinding()]
	param ()
	
	try
	{
		[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
	}
	catch
	{
		return $env:username
	}
}

# check if a file exists
function FileExists
{
	[CmdletBinding()]
	param (
		[string]$File
	)
	Test-Path $File -PathType Leaf
}

# load a json object
function LoadJson
{
	[CmdletBinding()]
	param (
		[string]$File
	)
	
	try
	{
		$PS7Mark = "PS7Mark"
		$rawData = (Get-Content -Raw -Path $File) -replace '("DateLastModified": ")([^"]+)(")', ('$1' + $PS7Mark + '$2' + $PS7Mark + '$3')
		[SoftpaqRepositoryFile]$result = $rawData | ConvertFrom-Json
		$result.DateLastModified = $result.DateLastModified -replace $PS7Mark, ""
		return $result
	}
	catch
	{
		err ("Could not parse '$File'  $($_.Exception.Message)")
		return $Null
	}
}

# load a repository definition file
function LoadRepository
{
	[CmdletBinding()]
	param ()
	
	Write-Verbose "loading $REPOFILE"
	$inRepo = FileExists -File $REPOFILE
	if (-not $inRepo)
	{
		throw [System.Management.Automation.ItemNotFoundException]"Directory '$(Get-Location)' is not a repository."
	}
	
	$repo = LoadJson -File $REPOFILE
	if (-not $repo -eq $null)
	{
		err ("Could not initialize the repository: $($_.Exception.Message)")
		return $false, $null
	}
	
	if (-not $repo.Filters) { $repo.Filters = @() }
	
	if (-not $repo.settings)
	{
		$repo.settings = New-Object SoftpaqRepositoryFile+Configuration
	}
	
	if (-not $repo.settings.OnRemoteFileNotFound)
	{
		$repo.settings.OnRemoteFileNotFound = [ErrorHandling]::Fail
	}
	
	if (-not $repo.settings.ExclusiveLockMaxRetries)
	{
		$repo.settings.ExclusiveLockMaxRetries = 10
	}
	
	if (-not $repo.settings.OfflineCacheMode)
	{
		$repo.settings.OfflineCacheMode = "Disable"
	}
	
	if (-not $repo.settings.RepositoryReport)
	{
		$repo.settings.RepositoryReport = "CSV"
	}
	
	foreach ($filter in $repo.Filters)
	{
		if (-not $filter.characteristic)
		{
			$filter.characteristic = "*"
		}
		if (-not $filter.preferLTSC)
		{
			$filter.preferLTSC = $false
		}
	}
	
	if (-not $repo.Notifications)
	{
		$repo.Notifications = New-Object SoftpaqRepositoryFile+NotificationConfiguration
		$repo.Notifications.port = 25
		$repo.Notifications.tls = $false
		$repo.Notifications.UserName = ""
		$repo.Notifications.Password = ""
		$repo.Notifications.from = "softpaq-repo-sync@$($env:userdnsdomain)"
		$repo.Notifications.fromname = "Softpaq Repository Notification"
	}
	
	Write-Verbose "load success"
	return $true, $repo
}

# download a SoftPaq, optionally checking existing SoftPaqs. Note that CVAs are always
# downloaded since there is no reliable way to check their consistency.

function DownloadSoftpaq
{
	[CmdletBinding()]
	param (
		$DownloadSoftpaqCmd,
		[int]$MaxRetries = 10
	)
	$download_file = $true
	$filename = "sp" + $DownloadSoftpaqCmd.number + ".exe"
	$CVAname = "sp" + $DownloadSoftpaqCmd.number + ".cva"
	
	# downloading the CVA 
	Write-Verbose ("Downloading CVA $($DownloadSoftpaqCmd.number)")
	Log ("    sp$($DownloadSoftpaqCmd.number).cva - Downloading CVA file.")
	Get-SoftpaqMetadataFile @DownloadSoftpaqCmd -MaxRetries $MaxRetries
	Log ("    sp$($DownloadSoftpaqCmd.number).cva - Done downloading CVA file.")
	
	if (FileExists -File $filename)
	{
		Write-Verbose "Checking signature for existing file $filename"
		if (Get-HPPrivateCheckSignature -File $filename -CVAfile $CVAname -Verbose:$VerbosePreference -Progress:(-not $DownloadSoftpaqCmd.Quiet))
		{
			
			if (-not $DownloadSoftpaqCmd.Quiet)
			{
				Write-Host -ForegroundColor Magenta "File $filename already exists and passes signature check. It will not be redownloaded."
			}
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Already exists. Will not redownload.")
			$download_file = $false
		}
		else
		{
			Write-Verbose ("Need to redownload file '$filename'")
		}
	}
	else
	{
		Write-Verbose ("Need to download file '$filename'")
	}
	
	
	if ($download_file -eq $true)
	{
		try
		{
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Downloading EXE file.")
			Get-Softpaq @DownloadSoftpaqCmd -MaxRetries $MaxRetries -Overwrite yes
			# check post-download integrity
			if (-not (Get-HPPrivateCheckSignature -File $filename -CVAfile $CVAname -Verbose:$VerbosePreference -Progress:(-not $DownloadSoftpaqCmd.Quiet)))
			{
				Remove-Item -Path $filename -Force -Verbose:$VerbosePreference
				Remove-Item -Path $CVAName -Force -Verbose:$VerbosePreference
				$msg = "File $filename failed integrity check and has been deleted, will retry download next sync"
				if (-not $DownloadSoftpaqCmd.Quiet)
				{
					Write-Host -ForegroundColor Magenta $msg
				}
				Write-LogWarning -Message $msg -Component "HP.Repo" -File $LOGFILE
				
			}
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Done downloading EXE file.")
		}
		catch
		{
			Write-Host -ForegroundColor Magenta "File sp$($DownloadSoftpaqCmd.number).exe has invalid or missing signature and will be deleted."
			Log ("    sp$($DownloadSoftpaqCmd.number).exe has invalid or missing signature and will be deleted.")
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Redownloading EXE file.")
			Get-Softpaq @DownloadSoftpaqCmd -maxRetries $maxRetries
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Done downloading EXE file.")
		}
	}
}

# write a repository definition file
function WriteRepositoryFile
{
	[CmdletBinding()]
	param ($obj)
	
	$now = Get-Date
	$obj.DateLastModified = ISO8601DateString -Date $now
	$obj.ModifiedBy = GetUserName
	Write-Verbose "Writing repository file to $REPOFILE"
	$obj | ConvertTo-Json | Out-File -Force $REPOFILE
}

# check if a filter exists in a repo object
function FilterExists
{
	[CmdletBinding()]
	param ($repo,
		$f)
	
	$c = getFilters $repo $f
	return ($null -ne $c)
}

# get a list of filters in a repo, matching exact parameters
function getFilters
{
	[CmdletBinding()]
	param ($repo,
		$f)
	
	if ($repo.Filters.Count -eq 0) { return $null }
	$repo.Filters | Where-Object {
		$_.platform -eq $f.platform -and
		$_.OperatingSystem -eq $f.OperatingSystem -and
		$_.Category -eq $f.Category -and
		$_.ReleaseType -eq $f.ReleaseType -and
		$_.characteristic -eq $f.characteristic -and
		$_.preferLTSC -eq $f.preferLTSC
	}
}

# get a list of filters in a repo, considering empty parameters as wildcards
function GetFiltersWild
{
	[CmdletBinding()]
	param ($repo,
		$f)
	
	if ($repo.Filters.Count -eq 0) { return $null }
	$repo.Filters | Where-Object {
		$_.platform -eq $f.platform -and
		(
			$_.OperatingSystem -eq $f.OperatingSystem -or
			$f.OperatingSystem -eq "*" -or
			($f.OperatingSystem -eq "win10:*" -and $_.OperatingSystem.StartsWith("win10")) -or
			($f.OperatingSystem -eq "win11:*" -and $_.OperatingSystem.StartsWith("win11"))
		) -and
		($_.Category -eq $f.Category -or $f.Category -eq "*") -and
		($_.ReleaseType -eq $f.ReleaseType -or $f.ReleaseType -eq "*") -and
		($_.characteristic -eq $f.characteristic -or $f.characteristic -eq "*") -and
		($_.preferLTSC -eq $f.preferLTSC -or $null -eq $f.preferLTSC)
	}
}

# write a log entry to the .repository/activity.log
function Log
{
	[CmdletBinding()]
	param ([string[]]$entryText)
	
	foreach ($line in $entryText)
	{
		if (-not $line)
		{
			$line = " "
		}
		Write-LogInfo -Message $line -Component "HP.Repo" -File $LOGFILE
	}
	
}

# touch a file (change its date if exists, or create it if it doesn't.
function TouchFile
{
	[CmdletBinding()]
	param ([string]$File)
	
	if (Test-Path $File) { (Get-ChildItem $File).LastWriteTime = Get-Date }
	else { Write-Output $null > $File }
}


# remove all marks from the repository
function FlushMarks
{
	[CmdletBinding()]
	param ()
	
	Write-Verbose "Removing all marks"
	Remove-Item ".repository\mark\*" -Include "*.mark"
}


# send a notification email
function Send
{
	[CmdletBinding()]
	param (
		$subject,
		$body,
		$html = $true
	)
	
	$n = Get-RepositoryNotificationConfiguration
	if ((-not $n) -or (-not $n.server))
	{
		Write-Verbose ("Notifications are not configured")
		return
	}
	
	try
	{
		if ((-not $n.addresses) -or (-not $n.addresses.Count))
		{
			Write-Verbose ("Notifications have no recipients defined")
			return
		}
		Log ("Sending a notification email")
		
		$params = @{ }
		$params.To = $n.addresses
		$params.SmtpServer = $n.server
		$params.port = $n.port
		$params.UseSsl = $n.tls
		$params.from = "$($n.fromname) <$($n.from)>"
		$params.Subject = $subject
		$params.Body = $body
		$params.BodyAsHtml = $html
		
		Write-Verbose ("server: $($params.SmtpServer)")
		Write-Verbose ("port: $($params.Port)")
		
		if ([string]::IsNullOrEmpty($n.UserName) -eq $false)
		{
			try
			{
				[SecureString]$read = $n.Password | ConvertTo-SecureString
				$params.Credential = New-Object System.Management.Automation.PSCredential ($n.UserName, $read)
				if (-not $params.Credential)
				{
					Log ("Could not build credential object from username and password")
					return;
				}
			}
			catch
			{
				err ("Failed to build credential object from username and password: $($_.Exception.Message)")
				return
			}
		}
		Send-MailMessage @params -ErrorAction Stop
	}
	catch
	{
		err ("Could not send email: $($_.Exception.Message)")
		return
	}
	Write-Verbose ("Send complete.")
}

<#
.SYNOPSIS
    Initialize a repository in the current directory. 

.DESCRIPTION
  This command initializes a directory to be used as a repository. It creates a .repository folder in the current directory,
  which contains the definition of the .repository and all its settings.

  In order to un-initalize a directory, simple remove the .repository folder.

  After initializing a repository, you must add at least one filter to define the content that this repository will receive.

  If the directory already contains a repository, the command will fail.

.EXAMPLE
    Initialize-Repository

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.LINK
  [Get-RepositoryConfiguration](Get-RepositoryConfiguration)

.LINK
  [Set-RepositoryConfiguration](Set-RepositoryConfiguration)
#>
function Initialize-Repository
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Initialize-Repository")]
	param ()
	
	if (FileExists -File $REPOFILE)
	{
		err "This directory is already initialized as a repository."
		return
	}
	$now = Get-Date
	$newRepositoryFile = New-Object SoftpaqRepositoryFile
	
	$newRepositoryFile.settings = New-Object SoftpaqRepositoryFile+Configuration
	$newRepositoryFile.settings.OnRemoteFileNotFound = [ErrorHandling]::Fail
	$newRepositoryFile.settings.ExclusiveLockMaxRetries = 10
	$newRepositoryFile.settings.OfflineCacheMode = "Disable"
	$newRepositoryFile.settings.RepositoryReport = "CSV"
	
	$newRepositoryFile.DateCreated = ISO8601DateString -Date $now
	$newRepositoryFile.CreatedBy = GetUserName
	
	try
	{
		New-Item -ItemType directory -Path .repository | Out-Null
		WriteRepositoryFile -obj $newRepositoryFile
		New-Item -ItemType directory -Path ".repository/mark" | Out-Null
	}
	catch
	{
		err ("Could not initialize the repository: $($_.Exception.Message)")
		return
	}
	Log "Repository initialized successfully."
}

<#
.SYNOPSIS
    Add a filter to the repository. 

.DESCRIPTION
  This function adds a filter to a repository, which was previously initialized by Initialize-Repository.

  The repository can contain one or more filters, and the effective filtering will be the sum of all filters defined.

.PARAMETER Platform
  Specifies the given platform as a platform to include in this repository. This is a platform ID, a 4-digit hexadecimal number, as obtained by Get?HPDeviceProductID.

.PARAMETER Os
  Specifies the operating system to be include in this repository. The field must be one of "win10" or "win11". If this parameter is not specified, all operating systems associated with the specified platform will be included.

.PARAMETER OsVer
  Specify the target OS Version (e.g. "1809", "1903", "1909", "2004", "2009", "21H1", "21H2", "22H2" etc). Starting from 21H1 release, "xxHx" format is expected. If the parameter is not specified, current operating system version will be assumed, which may not be what is intended.

.PARAMETER Category
  Specifies the SoftPaq category to be include in this repository. The category must be one (or more) of "Bios", "Firmware", "Driver", "Software", "OS", "Manageability", "Diagnostic", "Utility", "Driverpack", "Dock", "UWPPack".
  If this parameter is not specified, all categories are included.

.PARAMETER ReleaseType
  Specifies the SoftPaq release type to be include in this repository. The release type must be one (or more) of "critical", "recommended", "routine". If this parameter is not specified, all release types are included.

.PARAMETER Characteristic
  Specifies the SoftPaq characteristic to be include in this repository. The characteristic must be one of "ssm", "dpb", "uwp". If this parameter is not specified, all characteristics are included.

.PARAMETER PreferLTSC
  If specified, LTSB/LTSC reference file is preferred for the entered Platform. If the LTSB/LTSC reference file doesn't exist, falls back to regular reference file for that platform.

.EXAMPLE
  Add-RepositoryFilter -Platform 1234 -Os win10 -OsVer 2009

.EXAMPLE
  Add-RepositoryFilter -Platform 1234 -Os win10 -OsVer "21H1"

.EXAMPLE
  Add-RepositoryFilter -Platform 1234 -Os win10 -OsVer "21H1" -PreferLTSC

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.LINK
  [Get-HPDeviceProductID](Get-HPDeviceProductID)
#>
function Add-RepositoryFilter
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Add-RepositoryFilter")]
	param (
		[ValidatePattern("^[a-fA-F0-9]{4}$")]
		[Parameter(Position = 0, Mandatory = $true)]
		[string]$Platform,
		[ValidateSet("win7", "win8", "win8.1", "win81", "win10", "win11", "*")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 1)]
		$Os = "*",
		[string[]][ValidateSet("1809", "1903", "1909", "2004", "2009", "21H1", "21H2", "22H2")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 1)]
		[string]$OsVer,
		[ValidateSet("Bios", "Firmware", "Driver", "Software", "Os", "Manageability", "Diagnostic", "Utility", "Driverpack", "Dock", "UWPPack", "*")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 2)]
		[string[]]$Category = "*",
		[ValidateSet("Critical", "Recommended", "Routine", "*")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 3)]
		[string[]]$ReleaseType = "*",
		[ValidateSet("SSM", "DPB", "UWP", "*")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 4)]
		[string[]]$Characteristic = "*",
		[Parameter(Position = 5, Mandatory = $false)]
		[switch]$PreferLTSC
	)
	
	$c = LoadRepository
	try
	{
		if ($c[0] -eq $false) { return }
		$repo = $c[1]
		
		$newFilter = New-Object SoftpaqRepositoryFile+SoftpaqRepositoryFilter
		$newFilter.platform = $Platform
		
		$newFilter.OperatingSystem = $Os
		if (-not $OsVer)
		{
			$OsVer = GetCurrentOSVer
		}
		if ($OsVer) { $OsVer = $OsVer.ToLower() }
		if ($Os -eq "win10") { $newFilter.OperatingSystem = "win10:$OsVer" }
		elseif ($Os -eq "win11") { $newFilter.OperatingSystem = "win11:$OsVer" }
		
		$newFilter.Category = $Category
		$newFilter.ReleaseType = $ReleaseType
		$newFilter.characteristic = $Characteristic
		$newFilter.preferLTSC = $PreferLTSC.IsPresent
		
		# silently ignore if the filter is already in the repo
		$exists = filterExists $repo $newFilter
		if (!$exists)
		{
			$repo.Filters += $newFilter
			WriteRepositoryFile -obj $repo
			if ($OsVer -and $Os -ne '*') { Log "Added filter $Platform {{ os='$Os', osver='$OsVer', category='$Category', release='$ReleaseType', characteristic='$Characteristic', preferLTSC='$($PreferLTSC.IsPresent)' }}" }
			else { Log "Added filter $Platform {{ os='$Os', category='$Category', release='$ReleaseType', characteristic='$Characteristic', preferLTSC='$($PreferLTSC.IsPresent)' }}" }
		}
		else
		{
			Write-Verbose "Silently ignoring this filter since exact match is already in the repository"
		}
		Write-Verbose "Repository filter added."
	}
	catch
	{
		err ("Could not add filter to the repository:  $($_.Exception.Message)")
	}
}


<#
.SYNOPSIS
  Remove one or more filters from the repository. 

.DESCRIPTION
  This function modifies the repository to remove filters from the repository definition.

  If an optional parameter is not specified, it will be considered a wildcard and match any value. Therefore this command may result in multiple filters being deleted.

.PARAMETER Platform
  The platform to remove. This is a 4-digit hex number, and can be obtained via Get-HPDeviceProductID

.PARAMETER Os
  An optional parameter to narrow down the filter to a specific OS for the specified platform. If not specified, all OS will be matched.

.PARAMETER OsVer
  Specify the target OS Version (e.g. "1809", "1903", "1909", "2004", "2009", "21H1", "21H2", "22H2" etc). Starting from 21H1 release, "xxHx" format is expected. If the parameter is not specified, current operating system version will be assumed, which may not be what is intended.

.PARAMETER Category
  An optional parameter to narrow down the filter to a specific category for the specified platform. If not specified, all categories will be matched.

.PARAMETER ReleaseType
  An optional parameter to narrow down the filter to a specific release type for the specified platform. If not specified, all release types will be matched.

.PARAMETER Characteristic
  An optional parameter to narrow down the filter to a specific characteristic for the specified platform. If not specified, all characteristics will be matched.

.PARAMETER PreferLTSC
  An optional boolean parameter to narrow down the filter to a specific LTSB/LTSC reference file preference for the specified platform. If not specified, all preferences will be matched.

.PARAMETER Yes
  An optional parameter to provide. If not specified, script will ask for confirmation before deleting a filter. If specified, script will go ahead and delete the filter without confirming.

.EXAMPLE
  Remove-RepositoryFilter -Platform 1234

.EXAMPLE
  Remove-RepositoryFilter -Platform 1234 -Os win10 -OsVer "21H1"

.EXAMPLE
  Remove-RepositoryFilter -Platform 1234 -Os win10 -OsVer "21H1" -PreferLTSC $True

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Get-HPDeviceProductID](Get-HPDeviceProductID)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)
#>
function Remove-RepositoryFilter
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Remove-RepositoryFilter")]
	param (
		[ValidatePattern("^[a-fA-F0-9]{4}$")]
		[Parameter(Position = 0, Mandatory = $true)]
		[string]$Platform,
		[ValidateSet("win7", "win8", "win8.1", "win81", "win10", "win11", "*")]
		# keep in sync with the SoftPaq module
		[string[]][Parameter(Position = 1)]
		$Os = "*",
		[ValidateSet("1809", "1903", "1909", "2004", "2009", "21H1", "21H2", "22H2")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 1)]
		[string]$OsVer,
		[ValidateSet("Bios", "Firmware", "Driver", "Software", "Os", "Manageability", "Diagnostic", "Utility", "Driverpack", "Dock", "UWPPack", "*")]
		# keep in sync with the SoftPaq module
		[string[]][Parameter(Position = 2)]
		$Category = "*",
		[ValidateSet("Critical", "Recommended", "Routine", "*")]
		# keep in sync with the SoftPaq module
		[string[]][Parameter(Position = 3)]
		$ReleaseType = "*",
		[Parameter(Position = 4, Mandatory = $false)]
		[switch]$Yes = $false,
		[ValidateSet("SSM", "DPB", "UWP", "*")]
		# keep in sync with the SoftPaq module
		[string[]][Parameter(Position = 5)]
		$Characteristic = "*",
		[Parameter(Position = 5, Mandatory = $false)]
		[nullable[boolean]]$PreferLTSC = $null
	)
	
	$c = LoadRepository
	try
	{
		if ($c[0] -eq $false) { return }
		
		$newFilter = New-Object SoftpaqRepositoryFile+SoftpaqRepositoryFilter
		$newFilter.platform = $Platform
		$newFilter.OperatingSystem = $Os
		
		if ($Os -eq "win10")
		{
			if ($OsVer) { $newFilter.OperatingSystem = "win10:$OsVer" }
			else { $newFilter.OperatingSystem = "win10:*" }
		}
		elseif ($Os -eq "win11")
		{
			if ($OsVer) { $newFilter.OperatingSystem = "win11:$OsVer" }
			else { $newFilter.OperatingSystem = "win11:*" }
		}
		
		$newFilter.Category = $Category
		$newFilter.ReleaseType = $ReleaseType
		$newFilter.characteristic = $Characteristic
		$newFilter.preferLTSC = $PreferLTSC
		
		$todelete = getFiltersWild $c[1] $newFilter
		if (-not $todelete)
		{
			Write-Verbose ("No matching filter to delete")
			return
		}
		
		if (-not $Yes.IsPresent)
		{
			Write-Host "The following filters will be deleted:" -ForegroundColor Cyan
			$todelete | ConvertTo-Json -Depth 2 | Write-Host -ForegroundColor Cyan
			$answer = Read-Host "Enter 'y' to continue: "
			if ($answer -ne "y")
			{
				Write-Host 'Aborted.'
				return
			}
		}
		
		$c[1].Filters = $c[1].Filters | Where-Object { $todelete -notcontains $_ }
		WriteRepositoryFile -obj $c[1]
		
		foreach ($f in $todelete)
		{
			Log "Removed filter $($f.platform) { os='$($f.operatingSystem)', category='$($f.category)', release='$($f.releaseType), characteristic='$($f.characteristic)' }"
		}
	}
	catch
	{
		err ("Could not remove filter from repository: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
    Show the current repository definition. 

.DESCRIPTION
  Get the repository definition as an object. This command must be run inside an initialized repository.
  
.EXAMPLE
    $myrepository = Get-RepositoryInfo
    
.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)
#>
function Get-RepositoryInfo ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Get-RepositoryInfo")]
	param ()
	
	$c = LoadRepository
	try
	{
		if (-not $c[0]) { return }
		$c[1]
	}
	catch
	{
		err ("Could not get repository info: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
    Cleanup repository
  
.DESCRIPTION
  Use Invoke-RepositoryCleanup to remove SoftPaqs from repository that are obsolete. These may be SoftPaqs that have been replaced
  by newer versions, or that no longer match the active repository filters.

.EXAMPLE
    Invoke-RepositoryCleanup

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

#>
function Invoke-RepositoryCleanup
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Invoke-RepositoryCleanup")]
	param ()
	$repo = LoadRepository
	Log ("Beginning repository cleanup")
	$deleted = 0
	
	try
	{
		Get-ChildItem "." -File | ForEach-Object {
			$name = $_.Name.ToLower().TrimStart("sp").Split('.')[0]
			if ($name -ne $null)
			{
				if (-not (Test-Path ".repository/mark/$name.mark" -PathType Leaf))
				{
					Write-Verbose "Deleting orphaned file $($_.Name)"
					Remove-Item $_.Name
					$deleted++
				}
				#else {
				#  Write-Verbose "Softpaq $($_.Name) is still needed."
				#}
			}
		}
		Log ("Completed repository cleanup, deleted $deleted files.")
	}
	catch
	{
		err ("Could not clean repository: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
  Set the repository notification configuration.

.DESCRIPTION
  This function defines a notification SMTP server (and optionally, port) for an email server to be used to send failure notifications during unattended synchronization via Invoke-RepositorySync.

  One or more recipients can then be added via Add-RepositorySyncFailureRecipient.

  The directory must have been initialized via Initialize-Repository.

  The function must be invoked inside a directory initialized as a repository.


.PARAMETER Server
  The server name (or IP) for the outgoing mail (SMTP) server

.PARAMETER Port
  Specifies a port for the SMTP server. If not provided, the default IANA-assigned port 25 will be used.

.PARAMETER Tls
  Specifies whether to use SSL/TLS. The value may be "true", "false", or "auto". "Auto" will automatically set SSL to true when the port is changed to a value different than 25. By default, TLS is false.

.PARAMETER UserName
  Specifies the SMTP server username for authenticated SMTP servers. If username is not specified, connection will be made without authentication.

.PARAMETER Password
  Specifies the SMTP server password for authenticated SMTP servers.
  
.PARAMETER From
    Specifies the email address from which the notification will appear to originate. Note that in servers may accept emails from specified 
  domains only, or in some cases may require the email address to match the username.

.PARAMETER FromName
  Specifies the from address display name.

.PARAMETER RemoveCredentials
  Removes the SMTP server credentials without removing the entire mail server configuration.

.EXAMPLE
  Set-RepositoryNotificationConfiguration smtp.mycompany.com

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

#>
function Set-RepositoryNotificationConfiguration
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Set-RepositoryNotificationConfiguration")]
	param (
		[Parameter(Position = 0, Mandatory = $false)]
		[string][ValidatePattern("^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$")]
		$Server = $null,
		[Parameter(Position = 1, Mandatory = $false)]
		[ValidateRange(1, 65535)]
		[int]$Port = 0,
		[Parameter(Position = 2, Mandatory = $false)]
		[string][ValidateSet('true', 'false', 'auto')]
		$Tls = $null,
		[Parameter(Position = 3, Mandatory = $false)]
		[string]$Username = $null,
		[Parameter(Position = 4, Mandatory = $false)]
		[string]$Password = $null,
		[Parameter(Position = 5, Mandatory = $false)]
		[string][ValidatePattern("^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$")]
		$From = $null,
		[Parameter(Position = 6, Mandatory = $false)]
		[string]$FromName = $null,
		[Parameter(Position = 7, Mandatory = $false)]
		[switch]$RemoveCredentials
	)
	
	Write-Verbose "Beginning notification configuration update"
	
	if ($RemoveCredentials.IsPresent -and ([string]::IsNullOrEmpty($UserName) -eq $false -or [string]::IsNullOrEmpty($Password) -eq $false))
	{
		err ("-removeCredentials may not be specified with -username or -password")
		return
	}
	
	$c = LoadRepository
	try
	{
		if (-not $c[0]) { return }
		
		Write-Verbose "Applying configuration"
		if ([string]::IsNullOrEmpty($Server) -eq $false)
		{
			Write-Verbose ("Setting SMTP Server to: $Server")
			$c[1].Notifications.server = $Server
		}
		
		if ($Port)
		{
			Write-Verbose ("Setting SMTP Server port to: $Port")
			$c[1].Notifications.port = $Port
		}
		
		if (-not [string]::IsNullOrEmpty($UserName))
		{
			Write-Verbose ("Setting SMTP server credential(username) to: $UserName")
			$c[1].Notifications.UserName = $UserName
		}
		
		if (-not [string]::IsNullOrEmpty($Password))
		{
			Write-Verbose ("Setting SMTP server credential(password) to: (redacted)")
			$c[1].Notifications.Password = ConvertTo-SecureString $Password -Force -AsPlainText | ConvertFrom-SecureString
		}
		
		if ($RemoveCredentials.IsPresent)
		{
			Write-Verbose ("Clearing credentials from notification configuration")
			$c[1].Notifications.UserName = $null
			$c[1].Notifications.Password = $null
		}
		
		switch ($Tls)
		{
			"auto" {
				if ($Port -ne 25) { $c[1].Notifications.tls = $true }
				else { $c[1].Notifications.tls = $false }
				Write-Verbose ("SMTP server SSL auto-calculated to: $($c[1].Notifications.tls)")
			}
			
			"true" {
				$c[1].Notifications.tls = $true
				Write-Verbose ("Setting SMTP SSL to: $($c[1].Notifications.tls)")
			}
			"false" {
				$c[1].Notifications.tls = $false
				Write-Verbose ("Setting SMTP SSL to: $($c[1].Notifications.tls)")
			}
		}
		if (-not [string]::IsNullOrEmpty($From))
		{
			Write-Verbose ("Setting Mail from address to: $From")
			$c[1].Notifications.from = $From
		}
		if (-not [string]::IsNullOrEmpty($FromName))
		{
			Write-Verbose ("Setting Mail from displayname to: $FromName")
			$c[1].Notifications.fromname = $FromName
		}
		
		WriteRepositoryFile -obj $c[1]
		Log ("Updated notification configuration")
	}
	catch
	{
		err ("Failed to modify repository configuration: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
    Clear the repository notification configuration

.DESCRIPTION
  This function removes notification configuration from repository, in effect turning off notifications.

  The directory must have been initialized via Initialize-Repository and notification configuration must have been defined via Set-RepositoryNotificationConfiguration

  The function must be invoked inside a directory initialized as a repository.

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  Clear-RepositoryNotificationConfiguration

#>
function Clear-RepositoryNotificationConfiguration ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Clear-RepositoryNotificationConfiguration")]
	param ()
	Log "Clearing notification configuration"
	
	$c = LoadRepository
	try
	{
		if (-not $c[0]) { return }
		$c[1].Notifications = $null
		WriteRepositoryFile -obj $c[1]
		Write-Verbose ("Ok.")
	}
	catch
	{
		err ("Failed to modify repository configuration: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
    Get an object representing the current notification configuration

.DESCRIPTION
  This function retrieves the current notification configuration as an object.

  The directory must have been initialized via Initialize-Repository and notification configuration must have been defined via Set-RepositoryNotificationConfiguration

  The function must be invoked inside a directory initialized as a repository.
  
.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  $config = Get-RepositoryNotificationConfiguration


#>
function Get-RepositoryNotificationConfiguration ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Get-RepositoryNotificationConfiguration")]
	param ()
	
	$c = LoadRepository
	if ((-not $c[0]) -or (-not $c[1].Notifications))
	{
		return $null
	}
	return $c[1].Notifications
}


<#
.SYNOPSIS
    Display the current notification configuration to screen


.DESCRIPTION
  This function retrieves the current notification configuration as user-friendly screen output.

  The directory must have been initialized via Initialize-Repository and notification configuration must have been defined via Set-RepositoryNotificationConfiguration

  The function must be invoked inside a directory initialized as a repository.

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  Show-RepositoryNotificationConfiguration
#>
function Show-RepositoryNotificationConfiguration ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Show-RepositoryNotificationConfiguration")]
	param ()
	
	try
	{
		$c = Get-RepositoryNotificationConfiguration
		if (-not $c)
		{
			err ("Notifications are not configured.")
			return
		}
		
		if (-not [string]::IsNullOrEmpty($c.UserName))
		{
			Write-Host "Notification server: smtp://$($c.username):<password-redacted>@$($c.server):$($c.port)"
		}
		else
		{
			Write-Host "Notification server: smtp://$($c.server):$($c.port)"
		}
		Write-Host "Email will arrive from $($c.from) with name `"$($c.fromname)`""
		
		if ((-not $c.addresses) -or (-not $c.addresses.Count))
		{
			Write-Host "There are no recipients configured"
			return
		}
		foreach ($r in $c.addresses)
		{
			Write-Host "Recipient: $r"
		}
	}
	catch
	{
		err ("Failed to read repository configuration: $($_.Exception.Message)")
	}
	
}

<#
.SYNOPSIS
  Add a recipient to be notified of failures

.DESCRIPTION
  This function adds an email address to the repository. On failures, notifications will be sent to this email address.

  The directory must have been initialized via Initialize-Repository and notification configured via Set-RepositoryNotificationConfiguration.

  The function must be invoked inside a directory initialized as a repository.

.PARAMETER To
  The email address to add

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  Add-RepositorySyncFailureRecipient -to someone@mycompany.com

#>
function Add-RepositorySyncFailureRecipient ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Add-RepositorySyncFailureRecipient")]
	param (
		[Parameter(Position = 0, Mandatory = $true)]
		[ValidatePattern("^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$")]
		[string]$To
	)
	
	Log "Adding '$To' as a recipient."
	$c = LoadRepository
	try
	{
		if (-not $c[0]) { return }
		
		if (-not $c[1].Notifications)
		{
			err ("Notifications are not configured")
			return
		}
		
		if (-not $c[1].Notifications.addresses)
		{
			$c[1].Notifications.addresses = $()
		}
		
		$c[1].Notifications.addresses += $To.trim()
		$c[1].Notifications.addresses = $c[1].Notifications.addresses | Sort-Object -Unique
		WriteRepositoryFile -obj ($c[1] | Sort-Object -Unique)
	}
	catch
	{
		err ("Failed to modify repository configuration: $($_.Exception.Message)")
	}
	
}

<#
.SYNOPSIS
    Remove a recipient from notification list for the current repository.


.DESCRIPTION
  This function removes an email address as a recipient for synchronization failure messages.

  The directory must have been initialized via Initialize-Repository and notification configured via Set-RepositoryNotificationConfiguration.

  The function must be invoked inside a directory initialized as a repository.

.PARAMETER To
  The email address to remove

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  Remove-RepositorySyncFailureRecipient -to someone@mycompany.com

#>
function Remove-RepositorySyncFailureRecipient
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Remove-RepositorySyncFailureRecipient")]
	param (
		[Parameter(Position = 0, Mandatory = $true)]
		[ValidatePattern("^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$")]
		[string]$To
	)
	Log "Removing '$To' as a recipient."
	$c = LoadRepository
	try
	{
		if ($c[0] -eq $false) { return }
		
		if (-not $c[1].Notifications)
		{
			err ("Notifications are not configured")
			return
		}
		
		
		if (-not $c[1].Notifications.addresses)
		{
			$c[1].Notifications.addresses = $()
		}
		
		$c[1].Notifications.addresses = $c[1].Notifications.addresses | Where-Object { $_ -ne $To.trim() } | Sort-Object -Unique
		WriteRepositoryFile -obj ($c[1] | Sort-Object -Unique)
	}
	catch
	{
		err ("Failed to modify repository configuration: $($_.Exception.Message)")
	}
}


<#
.SYNOPSIS
    Test the email notification configuration by sending a test email

.DESCRIPTION
  This function sends a test email using the current repository configuration and reports 
  any errors associated with the send process. It is intended for debugging the email server configuration.

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.EXAMPLE
  Test-RepositoryNotificationConfiguration

#>
function Test-RepositoryNotificationConfiguration
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Test-RepositoryNotificationConfiguration")]
	param ()
	
	Log ("test email started")
	send "Repository Failure Notification (Test only)" "No content." -html $false
	Write-Verbose ("Ok.")
}

<#
.SYNOPSIS
  Set repository configuration values

.DESCRIPTION
  This function sets various configuration options that control synchronization behavior.

.PARAMETER setting
  The setting to configure from 'OnRemoteFileNotFound', 'OfflineCacheMode' and 'RepositoryReport'.

.PARAMETER value
  The new value of the setting for OnRemoteFileNotFound. It can be from 'Fail' (default) and 'LogAndContinue'.

.PARAMETER CacheValue
  The new CacheValue of the setting for OfflineCacheMode. It can be from 'Disable' (default) and 'Enable'.

.PARAMETER Format
  The new value of the setting for RepositoryReport. It can be from 'CSV' (Default) ,'JSon', 'XML' and 'ExcelCSV'.

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Get-RepositoryConfiguration](Get-RepositoryConfiguration)

.Example
  Set-RepositoryConfiguration -Setting OnRemoteFileNotFound -Value LogAndContinue

.Example
  Set-RepositoryConfiguration -Setting OfflineCacheMode -CacheValue Enable

.Example
  Set-RepositoryConfiguration -Setting RepositoryReport -Format CSV

.NOTES
  Current event handlers supported:

  - _OnRemoteFileNotFound_ - indicates what should happen if an expected SoftPaq is not found on the remote site. The default is 'Fail' in which case the process will stop. Setting to 'LogAndContinue' will log the error, but the repository synchronization will continue.

  Current Repository Report functionality:

  Invoke-RepositorySync will create a report containing contents of the Repository in a format provided by RepositoryFormat Setting.
  Use RepositoryReport Setting with -Format to set the format in which the you would like the report to be generated. Default format is CSV. 
  Report will be generated with a name Contents.<format> e.g. Contents.CSV inside the .repository directory

  To create a report outside the repository use New-RepositoryReport function.
#>
function Set-RepositoryConfiguration
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Set-RepositoryConfiguration")]
	param (
		[ValidateSet('OnRemoteFileNotFound', 'OfflineCacheMode', 'RepositoryReport')]
		[Parameter(ParameterSetName = "ErrorHandler", Position = 0, Mandatory = $true)]
		[Parameter(ParameterSetName = "CacheMode", Position = 0, Mandatory = $true)]
		[Parameter(ParameterSetName = "ReportHandler", Position = 0, Mandatory = $true)]
		[string]$Setting,
		[Parameter(ParameterSetName = "ErrorHandler", Position = 1, Mandatory = $true)]
		[ErrorHandling]$Value,
		[ValidateSet('Enable', 'Disable')]
		[Parameter(ParameterSetName = "CacheMode", Position = 1, Mandatory = $true)]
		[string]$CacheValue,
		[ValidateSet('CSV', 'JSon', 'XML', 'ExcelCSV')]
		[Parameter(ParameterSetName = "ReportHandler", Position = 1, Mandatory = $true)]
		[string]$Format
	)
	$c = LoadRepository
	if (-not $c[0]) { return }
	if ($Setting -eq "OnRemoteFileNotFound")
	{
		if (($Value -eq "Fail") -or ($Value -eq "LogAndContinue"))
		{
			$c[1].settings. "${Setting}" = $Value
			WriteRepositoryFile -obj $c[1]
			Write-Verbose ("Ok.")
		}
		else
		{
			Write-Host -ForegroundColor Magenta "Enter valid Value for $Setting."
			Write-LogWarning "Enter valid Value for $Setting."
		}
	}
	elseif ($Setting -eq "OfflineCacheMode")
	{
		if ($CacheValue)
		{
			$c[1].settings. "${Setting}" = $CacheValue
			WriteRepositoryFile -obj $c[1]
			Write-Verbose ("Ok.")
		}
		else
		{
			Write-Host -ForegroundColor Magenta "Enter valid CacheValue for $Setting."
			Write-LogWarning "Enter valid CacheValue for $Setting."
		}
	}
	elseif ($Setting -eq "RepositoryReport")
	{
		if ($Format)
		{
			$c[1].settings. "${Setting}" = $Format
			WriteRepositoryFile -obj $c[1]
			Write-Verbose ("Ok.")
		}
		else
		{
			Write-Host -ForegroundColor Magenta "Enter valid Format for $Setting."
			Write-LogWarning "Enter valid Format for $Setting."
		}
	}
}

<#
.SYNOPSIS
    Get repository configuration values

.DESCRIPTION
  This function get various configuration options that control synchronization behavior.

.PARAMETER setting
  The setting to retrieve

.Example
  Get-RepositoryConfiguration -Setting OfflineCacheMode

.Example
  Get-RepositoryConfiguration -Setting OnRemoteFileNotFound

.Example
  Get-RepositoryConfiguration -Setting RepositoryReport

.LINK
  [Set-RepositoryConfiguration](Set-RepositoryConfiguration)

.LINK
  [Initialize-Repository](Initialize-Repository)
#>
function Get-RepositoryConfiguration
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Get-RepositoryConfiguration")]
	param (
		[Parameter(Position = 0, Mandatory = $true)]
		[string][ValidateSet('OnRemoteFileNotFound', 'OfflineCacheMode', 'RepositoryReport')]
		$Setting
	)
	$c = LoadRepository
	if (-not $c[0]) { return }
	$c[1].settings. "${Setting}"
}


<#
.SYNOPSIS
  Create a report from a repository directory

.DESCRIPTION
  This function scans a repository (or any directory containing CVAs and EXEs) and creates a report in one of the supported formats.

  Currently the supported formats are:

  - XML - Return an XML object
  - JSON - Return a JSON document
  - CSV - Return a CSV document
  - ExcelCSV - Return a CSV document containing an Excel hint that defines comma as a default separator. Use this only if you plan on opening the CSV file with Excel.

  If a format is not specified, the function will return PowerShell objects to the pipeline.

.PARAMETER Format
  Specify the output format (CSV, JSON, or XML). If not specified, the function will return PowerShell objects.

.PARAMETER RepositoryPath
  By default, the function assumes the repository is in the current directory. This parameter allows specifying a different location for the repository.

.PARAMETER OutputFile
  Specify an output file for the function. Can only be specified together with "Format".

.EXAMPLE
  New-RepositoryReport -Format JSON -RepositoryPath c:\myrepository\softpaqs -OutputFile c:\repository\today.json

.NOTES
  The function currently supports scenarios where the SoftPaq executable is stored under the format sp<softpaq-number>.exe.
#>
function New-RepositoryReport
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/New-RepositoryReport")]
	param (
		[Parameter(Position = 0, Mandatory = $false)]
		[ValidateSet('CSV', 'JSon', 'XML', 'ExcelCSV')]
		[string]$Format,
		[Parameter(Position = 1, Mandatory = $false)]
		[System.IO.DirectoryInfo]$RepositoryPath = '.',
		[Parameter(Position = 2, Mandatory = $false)]
		[System.IO.FileInfo]$OutputFile
	)
	if ($OutputFile -and -not $format) { throw "OutputFile parameter requires a Format specifier" }
	$cvaList = Get-ChildItem -Path $RepositoryPath -Filter '*.cva'
	
	if (-not $cvaList -or -not $cvaList.Length)
	{
		throw [System.IO.FileNotFoundException]"Directory '$(Get-Location)' does not contain CVA files."
	}
	
	Write-Verbose "Processing $($cvaList.Length) CVAs"
	$results = $cvaList | ForEach-Object {
		$cva = Get-HPPrivateReadINI $_.FullName
		
		try
		{
			$exe = Get-ChildItem -Path ($cva.Softpaq.SoftpaqNumber.trim() + ".exe") -ErrorAction stop
		}
		catch [System.Management.Automation.ItemNotFoundException]{
			$exe = $null
		}
		
		[pscustomobject]@{
			Softpaq = $cva.Softpaq.SoftpaqNumber
			Vendor  = $cva.General.VendorName
			Title   = $cva. "Software Title".US
			type    = if ($Cva.General.Category.contains("-")) { $Cva.General.Category.substring(0, $Cva.General.Category.IndexOf('-')).trim() } else { $Cva.General.Category }
			Version = "$($cva.General.Version) Rev.$($cva.General.Revision)"
			Downloaded = if ($exe) { $exe.CreationTime } else { "" }
			Size    = if ($exe) { "$($exe.Length)" } else { "" }
		}
	}
	switch ($format)
	{
		"CSV" {
			$r = $results | ConvertTo-Csv -NoTypeInformation
		}
		"ExcelCSV" {
			
			$r = $results | ConvertTo-Csv -NoTypeInformation
			$r = [string[]]"sep=," + $r
		}
		"JSon" {
			$r = $results | ConvertTo-Json
		}
		"XML" {
			$r = $results | ConvertTo-Xml -NoTypeInformation
		}
		default {
			return $results
		}
	}
	
	if ($OutputFile)
	{
		if ($format -eq "xml") { $r = $r.OuterXml }
		$r | Out-File -FilePath $OutputFile -Encoding utf8
	}
	else { $r }
}
#endregion
#region functions
function check-repopath
{
	$repotestpath = $txtboxRepoLocation.Text
	
	if ((Test-Path $repotestpath) -eq $true)
	{
		$lblNoRepoDetected.Text = "Repository Detected"
		$lblNoRepoDetected.ForeColor = 'Green'
		$btnSyncOrCreateRepo.Text = "Sync"
		update-modelgrid
	}
	
	if ((Test-Path $repotestpath) -eq $false)
	{
		$lblNoRepoDetected.Text = "Repository not found"
		$lblNoRepoDetected.ForeColor = 'Red'
		$btnSyncOrCreateRepo.Text = 'Create'
		$dt.Rows.Clear();
	}
	
	
}
function update-modelgrid
{
	$repo = $txtboxRepoLocation.Text
	$dt.Rows.Clear();
	Set-Location $repo
	$filters = (Get-RepositoryInfo).Filters
	foreach ($plat in $filters)
	{
		$platform = $plat.platform
		$models = Get-HPDeviceDetails -Platform $platform
		
		foreach ($model in $models)
		{
			
			$osinfo = $plat.operatingsystem
			$currentstores = $plat.category
			$modelname = $model.name
			$dt.Rows.Add("$false", "$platform", "$modelname", "$osinfo", "$currentstores")
		}
	}
}
function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}
function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}
function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
function Clear-ModelGrid
{
	$dt.Rows.Clear();
}
#endregion
#region event handlers
$buttonBrowseFolder_Click2={
	if($folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$txtboxRepoLocation.Text = $folderbrowsermoderndialog2.SelectedPath
	}
}

$txtboxRepoLocation_TextChanged= {
	
	$repolocation = $txtboxRepoLocation.Text
	$repoparent = Split-Path -Parent $repolocation
	$console.Text = ""
	$dt.Rows.Clear();
	
	if ((Test-Path -Path "$repolocation\.repository\") -eq $true)
	{
		$script:repositorypath = $repolocation
		Set-Location "$repolocation"
		$lblNoRepoDetected.Text = "Repository Detected"
		$lblNoRepoDetected.ForeColor = 'Green'
		$btnSyncOrCreateRepo.Text = "Sync"
		Add-Logs "repository detected at $repolocation..."
		Add-Logs "loading current model table from target repo..."
		update-modelgrid
		
	}
	if ((Test-Path -Path "$repolocation\.repository\") -eq $false)
	{
		$dt.Rows.Clear();
		$lblNoRepoDetected.Text = "Repository not found"
		$lblNoRepoDetected.ForeColor = 'Red'
		$btnSyncOrCreateRepo.Text = 'Create'
		Add-Logs "repo not found. click create to create a repo in the target directory."
	}
}

$btnSyncOrCreateRepo_Click = {
	#TODO: Place custom script here
	$repolocation = $txtboxRepoLocation.Text
	$repoexists = Test-Path -Path "$repolocation\.repository\"
	
	if ($repoexists -eq $false)
	{
		$newrepopath = New-Item -Path "$repolocation\HPIACommon" -ItemType directory
		Add-Logs "folder HPIACommon created in target dir..."
		Set-Location $newrepopath
		Initialize-Repository
		Add-Logs "new repo initialized at $newrepopath..."
		Set-RepositoryConfiguration -Setting OfflineCacheMode -CacheValue Enable
		Set-RepositoryConfiguration -Setting RepositoryReport -Format CSV
		Set-RepositoryConfiguration -Setting OnRemoteFileNotFound -Value LogAndContinue
		Add-Logs "repo configured for usage with cmsl..."
		$softwarefolder = "$newrepopath\.addsoftware"
		New-Item -Path $softwarefolder -ItemType directory
		Add-Logs "software folder added..."
		Add-Logs "new repo setup completed. models can now be added from either the repomodels.csv folder or from the UI"
		$txtboxRepoLocation.Text = $newrepopath
		if ($repoexists -eq $true)
		{
			$btnSyncOrCreateRepo.Text = "Sync"
		}
	}
	if ($repoexists -eq $true)
	{
		Invoke-RepositorySync
	}
}

$buttonBrowseFolder_Click={
	if($folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$txtboxRepoLocation.Text = $folderbrowsermoderndialog1.SelectedPath
	}
}

$btnAddModelsFromSccm_Click = {
	$ErrorActionPreference = 'SilentlyContinue'
	Show-fromsccm_psf
	update-modelgrid
}

$console_TextChanged={
	#TODO: Place custom script here
	$console.SelectionStart = $console.Text.Length
	$console.ScrollToCaret()
}

$btnAddModeltoRepo_Click =
{
	$ErrorActionPreference = 'SilentlyContinue'
	Show-AddModel_psf
	update-modelgrid
}

$buttonRemoveFromRepo_Click={
	
	$selecteditems = @()
	foreach ($pc in $dt)
	{
		if (($pc.select) -eq $true)
		{
			$selecteditems += $pc.platform
			
			foreach ($platform in $selecteditems)
			{
				Remove-RepositoryFilter -Platform $platform -Yes
				Add-Logs "$platform removed from repo"
			}
		}
		
	}
	update-modelgrid
	
}

$picturebox1_Click = {
	update-modelgrid
}

$btnHelp_Click={
	Show-help_psf
}
#endregion
$buttonExampleHPIACMD_Click = {
	
	Show-hpia_command_psf
	
}

$linklabelHelpGithub_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
	Start-Process "https://github.com/johnsonsr3243/HPIA-Repository-Manager/tree/main"
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>