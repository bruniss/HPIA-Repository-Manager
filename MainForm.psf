<File version="3.2">
  <FileID>30f0639c-dcab-44b0-b015-7bc04f5be8cc</FileID>
  <Preview>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</Preview>
  <Form>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
19MoixoTbyaVuukyMvqjSY8pecPyejTJpufqbjDrxGhiCDPBile9kl1rI2GZtyRpNO0vd61Ky1cP
Dayn4+k8xJaN1dzsYk3mKj0Y8uoeb8iXzrTXzC2MPJLT4+oBS49RRKOdXWkp0r4ToGajlZt1lntN
lHipONjgkZYFcy4dhL1cxMImt9Ko1VhXhVrZHLFSqTJa92bpll89xMpBFTtYZ3r2grEcqbUYoHWx
yFUMXLdg9dz6suYnE5O8MhuWd711HE6cwOlMjYXJTliFtcrVJlqKcz/H2v2teog6s914kQsVs5vJ
pppxJNQby1VOt9sZbKrX1dIa+yFaOB4U1FgW/W24ZLvhMNPKrFpmuyTYc47jVhFTqrDlIL/PeO3+
GM9KKwyN1Gg1Lx1SVm5YRDXPrDbDtZbzLaynYd8r9lo208qmCka8Zcpen+lu927g9/d2iJfScFLL
p519ditp2UKoqdNJDY8qJ6/yB92uVFMFV03H3bKTYbGeLjqjQjpTOeSlYYmdZJjNWq0XPMkpxKl9
QUeWL2pSN1PZhbKSqfSXy0ZaHQbFTKfXyhf6Zs5vj804XdyXohSe03Wt3+VGVj3lqLaxM5apbHbf
6BvuilXmktnvp9rlYXGU78mTMJw3JkxxVFswYnE4nzNuIeKG4pjPmAa/0VIq1qzxtqsbeOPW7w3k
3UZMK/mymNusJli3nA0XF7fxwNeCboftz9NeNWKk6QqNRrV1XRgU86qtVqe85SKDRfUtXhcamjda
+3qpm81kW5WagcS4Z1q1vTdVdpOguY3b7XVTNFCJ7ciBwDi9naPPfHnG2UE03qdarCGOy6uN7m9s
bHs1fXFwseoX+uOhgwaO52X4cCFxTX/OSeNxbW5zqI74bdNebLlJPlzo+2G2n7Vb3GSiVoMB0iqV
Pr/Pe/k5Sz463KrL7Wy+OOJiVwhkVLVbaytfGPBNpe3n50zQWFrY3syM9qSZCVFeSxUOE7s30rXS
Qg5SqDxAs0wxM8wxFWxDsk2e97AvV93vC1yUYjUsYQ3Dz8uraGfkO9hjUdFUsIyePsyx6kBfp+ZZ
Fuc7SOXzRmgcChpnOgMmux0mE7m+payma7TTTew0+K5RW0bD6WRi72vTlj90eacRC2EKZfp+KafM
y7x6kO2glXPWuXl2XdSGeM++ieU53yCWPNgtuyzfqOQz81nXKC803LZRTZmarpp2ieHCemMr1TQT
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
SjDCQxm75EYNIfad1PXf/wvJ84L2qJgAAA==</Form>
  <Code><![CDATA[
$MainForm_Load={
	
	$console.Text = "Thank you for using my HPIA repo management tool. This tool is HEAVILY inspired by a tool created by Dan Felman called HPIA Softpaq Repository Downloader located here:`n https://github.com/ofelman/HPIA-Repository-Downloader`n`nThe app leverages functions and modules included in HP CMSL created by HP and Gary Blok. Information for CSML is located here:`nhttps://developers.hp.com/hp-client-management/doc/client-management-script-library?language=es`n
	
This tool creates and downloads driver repositories for use with HP Image Assistant. enabled the /offlinerepository: argument and point it to the location of the created repository."
	
	#set the program root folder
	$global:programroot = 'C:\Program Files (x86)\HPIA Driver Repository Management'
	
	#import cmsl modules by file to avoid having to restart the program/shell
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Consent\HP.Consent.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Private\HP.Private.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Utility\HP.Utility.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.ClientManagement\HP.ClientManagement.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Firmware\HP.Firmware.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Softpaq\HP.Softpaq.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Repo\HP.Repo.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Sinks\HP.Sinks.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Retail\HP.Retail.psd1"
	Import-Module -Force "C:\Program Files\HPIA Driver Repository Management\cmsl\Modules\HP.Notifications\HP.Notifications.psd1"
	
	#initalize a data table to reference for the datagrid
	$script:dt = [System.Data.DataTable]::New()
	
	#create select column with check box
	$removecolumn = New-Object System.Data.DataColumn;
	$removecolumn.DataType = [System.Type]::GetType("System.Boolean");
	$removecolumn.ColumnName = "Select";
	
	
	
	$dt.Columns.Add($removecolumn);
	$dt.Columns.Add('Platform')
	$dt.Columns.Add('Model')
	$dt.Columns.Add('OS Info')
	$dt.Columns.Add('Current Stores')
	
	
	#assign the data table to the datagrid
	$filterinfogrid.DataSource = $dt
	
	
	$filterinfogrid.AutoSizeColumnsMode = 'AllCells'
	$filterinfogrid.Columns[0].ReadOnly = $false
	$filterinfogrid.Columns[1].ReadOnly = $true
	$filterinfogrid.Columns[2].ReadOnly = $true
	$filterinfogrid.Columns[3].ReadOnly = $true
	$filterinfogrid.Columns[4].ReadOnly = $true

}


#region CMSL
# 
#  Copyright 2018-2022 HP Development Company, L.P.
#  All Rights Reserved.
# 
# NOTICE:  All information contained herein is, and remains the property of HP Development Company, L.P.
# 
# The intellectual and technical concepts contained herein are proprietary to HP Development Company, L.P
# and may be covered by U.S. and Foreign Patents, patents in process, and are protected by 
# trade secret or copyright law. Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained from HP Development Company, L.P.

Set-StrictMode -Version 3.0
#requires -Modules "HP.Private","HP.Softpaq"

$RepositoryType = @"
public enum ErrorHandling {
  Fail = 0,
  LogAndContinue = 1
};

public class SoftpaqRepositoryFile {
  public class SoftpaqRepositoryFilter {
      public string platform;
      public string operatingSystem;      
      public string category;
      public string releaseType;
      public string characteristic;
      public bool? preferLTSC;
  };

  public class NotificationConfiguration {
      public string server;
      public int port;
        public bool tls;
        public string[] addresses;
        public string username;
        public string password;
        public string from;
        public string fromname;
  };
  
  public class Configuration {
    public ErrorHandling OnRemoteFileNotFound;
    public int ExclusiveLockMaxRetries;
    public string OfflineCacheMode;
    public string RepositoryReport;
    }


    public string DateCreated;
    public string DateLastModified;
    public string CreatedBy;
    public string ModifiedBy;
  public SoftpaqRepositoryFilter[] Filters;
  public NotificationConfiguration Notifications;
  public Configuration Settings;


}
"@

$REPOFILE = ".repository/repository.json"
$LOGFILE = ".repository/activity.log"

Add-Type -TypeDefinition $RepositoryType

function test-repo
{
	$repo = $txtboxRepoLocation.Text
	if ((Test-Path "$repo\$ver\HPIACommon\.repository") -eq $false)
		{
			$lblNoRepoDetected.Text = "Repository not found for version $ver"
			$lblNoRepoDetected.ForeColor = 'Red'
			$btnSyncOrCreateRepo.Text = 'Create'
		}

	 ((Test-Path "$repo\$ver\HPIACommon\.repository") -eq $true)
		{
			$lblNoRepoDetected.Text = "Repository Detected"
			$lblNoRepoDetected.ForeColor = 'Green'
			$btnSyncOrCreateRepo.Text = "Sync"
		}
}

<#
.SYNOPSIS
  Synchronize repository and generate a report with repository content information

.DESCRIPTION
  This command performs a synchronization of a repository, by downloading latest SoftPaqs associated with the repository filters. At the end of each sync, it creates a repository report in a format (default .CSV) set via Set-RepositoryConfiguration.

  The command may be scheduled via task manager to run on schedule. Define a notification email via Set-RepositoryNotificationConfiguration to receive any failure notifications during unattended operation.

  This command may be followed by Invoke-RepositoryCleanup to remove any obsolete SoftPaqs from the repository.

  Invoke-RepositorySync functionality is not supported in WinPE. 

.PARAMETER Quiet
  Suppress progress messages during operation.

.PARAMETER ReferenceUrl
  Specify an alternate location for the HP Image Assistant (HPIA) Reference files. This URL must be http or https. The Reference files are expected to be at the location pointed to by this URL inside a directory named after the platform ID you want a SoftPaq list for. If not specified, ftp.hp.com is used via HTTPS protocol. 

  For example, If you want to point to 83b2 Win10 OSVer 2009 reference files, Get-SoftpaqList will try to find them in this directory structure: $ReferenceUrl/83b2/83b2_64_10.0.2009.cab

.EXAMPLE
  Invoke-RepositorySync -Quiet

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)
#>
function Invoke-RepositorySync
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Invoke-RepositorySync")]
	param (
		[Parameter(Position = 0, Mandatory = $false)]
		[switch]$Quiet = $false,
		[Alias('Url')]
		[Parameter(Position = 1, Mandatory = $false)]
		[string]$ReferenceUrl = "https://hpia.hpcloud.hp.com/ref"
	)
	
	$repo = LoadRepository
	try
	{
		$cwd = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath((Get-Location))
		$cacheDir = Join-Path -Path $cwd -ChildPath ".repository"
		$cacheDirOffline = $cacheDir + "\cache\offline"
		$reportDir = $cacheDir
		
		# return if repository is not initialized
		if ($repo[0] -eq $false) { return }
		
		# return if repository is initialized but no filters added
		$filters = $repo[1].Filters
		if ($filters.Count -eq 0)
		{
			Write-Verbose "Repository has no filters defined - terminating."
			Write-Verbose ("Flushing the list of markers")
			FlushMarks
			return
		}
		
		$platformGroups = $filters | Group-Object -Property platform
		$normalized = @()
		
		foreach ($pobj in $platformGroups)
		{
			
			$items = $pobj.Group
			
			if ($items | Where-Object -Property operatingSystem -EQ -Value "*")
			{
				$items | ForEach-Object { $_.OperatingSystem = "*" }
			}
			
			if ($items | Where-Object -Property category -EQ -Value "*")
			{
				$items | ForEach-Object { $_.Category = "*" }
			}
			
			if ($items | Where-Object -Property releaseType -EQ -Value "*")
			{
				$items | ForEach-Object { $_.ReleaseType = "*" }
			}
			
			if ($items | Where-Object -Property characteristic -EQ -Value "*")
			{
				$items | ForEach-Object { $_.characteristic = "*" }
			}
			
			$normalized += $items | sort -Unique -Property operatingSystem, category, releaseType, characteristic
		}
		
		$softpaqlist = @()
		Log "Repository sync has started"
		$softpaqListCmd = @{ }
		
		
		# build the list of SoftPaqs to download
		foreach ($c in $normalized)
		{
			Write-Verbose ($c | Format-List | Out-String)
			
			if (Get-HPDeviceDetails -Platform $c.platform -Url $ReferenceUrl)
			{
				$softpaqListCmd.platform = $c.platform.ToLower()
				$softpaqListCmd.Quiet = $Quiet
				$softpaqListCmd.verbose = $VerbosePreference
				
				Write-Verbose ("Working on a rule for platform $($softpaqListCmd.platform)")
				
				if ($c.OperatingSystem.StartsWith("win10:"))
				{
					$split = $c.OperatingSystem -split ':'
					$softpaqListCmd.OS = $split[0]
					$softpaqListCmd.osver = $split[1]
				}
				elseif ($c.OperatingSystem -eq "win10")
				{
					$softpaqListCmd.OS = "win10"
					$softpaqListCmd.osver = GetCurrentOSVer
				}
				elseif ($c.OperatingSystem.StartsWith("win11:"))
				{
					$split = $c.OperatingSystem -split ':'
					$softpaqListCmd.OS = $split[0]
					$softpaqListCmd.osver = $split[1]
				}
				elseif ($c.OperatingSystem -eq "win11")
				{
					$softpaqListCmd.OS = "win11"
					$softpaqListCmd.osver = GetCurrentOSVer
				}
				elseif ($c.OperatingSystem -ne "*")
				{
					$softpaqListCmd.OS = $c.OperatingSystem
					#$softpaqListCmd.osver = $null
				}
				
				if ($c.characteristic -ne "*")
				{
					$softpaqListCmd.characteristic = $c.characteristic.ToUpper().Split()
					Write-Verbose "Filter-characteristic:$($softpaqListCmd.characteristic)"
				}
				
				if ($c.ReleaseType -ne "*")
				{
					$softpaqListCmd.ReleaseType = $c.ReleaseType.Split()
					Write-Verbose "Filter-releaseType:$($softpaqListCmd.releaseType)"
				}
				if ($c.Category -ne "*")
				{
					$softpaqListCmd.Category = $c.Category.Split()
					Write-Verbose "Filter-category:$($softpaqListCmd.category)"
				}
				if ($c.preferLTSC -eq $true)
				{
					$softpaqListCmd.PreferLTSC = $true
					Write-Verbose "Filter-preferLTSC:$($softpaqListCmd.PreferLTSC)"
				}
				
				Log "Reading the softpaq list for platform $($softpaqListCmd.platform)"
				add-logs "Reading the softpaq list for platform $($softpaqListCmd.platform)"
				
				Write-Verbose "Trying to get SoftPaqs from $ReferenceUrl"
				$results = Get-SoftpaqList @softpaqListCmd -cacheDir $cacheDir -maxRetries $repo[1].settings.ExclusiveLockMaxRetries -ReferenceUrl $ReferenceUrl -AddHttps
				Log "softpaq list for platform $($softpaqListCmd.platform) created"
				add-logs "softpaq list for platform $($softpaqListCmd.platform) created"

				$softpaqlist += $results
				
				
				$OfflineCacheMode = $repo[1].settings.OfflineCacheMode
				if ($OfflineCacheMode -eq "Enable")
				{
					
					# keep the download order of PlatformList, Advisory data and Knowledge Base as is to maintain unit tests
					if (-not $ReferenceUrl.EndsWith('/'))
					{
						$ReferenceUrl = $ReferenceUrl + "/"
					}
					$baseurl = $ReferenceUrl
					$url = $baseurl + "platformList.cab"
					$filename = "platformList.cab"
					Write-Verbose "Trying to download PlatformList... $url"
					try
					{
						$PlatformList = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirOffline -Expand
						Write-Verbose "Finish downloading PlatformList - $PlatformList"
					}
					catch
					{
						$url = "https://ftp.hp.com/pub/caps-softpaq/cmit/imagepal/ref/platformList.cab"
						Write-Verbose "Trying to download PlatformList from FTP... $url"
						$PlatformList = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirOffline -Expand
						if (-not $PlatformList)
						{
							$exception = $_.Exception
							switch ($repo[1].settings.OnRemoteFileNotFound)
							{
								"LogAndContinue" {
									[string]$data = formatSyncErrorMessageAsHtml $exception
									Log ($data -split "`n")
									add-logs ($data -split "`n")
									send "Softpaq repository synchronization error" $data
								}
								# "Fail"
								default {
									throw $exception
								}
							}
						}
					}
					
					# download Advisory data
					$url = $baseurl + "$($softpaqListCmd.platform)/$($softpaqListCmd.platform)_cds.cab"
					$cacheDirAdvisory = $cacheDirOffline + "\$($softpaqListCmd.platform)"
					$filename = "$($softpaqListCmd.platform)_cds.cab"
					Write-Verbose "Trying to download Advisory Data Files... $url"
					try
					{
						$AdvisoryFile = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirAdvisory -Expand
						Write-Verbose "Finish downloading Advisory Data Files - $AdvisoryFile"
					}
					catch
					{
						$baseurl = "https://ftp.hp.com/pub/caps-softpaq/cmit/imagepal/ref/"
						$url = $baseurl + "$($softpaqListCmd.platform)/$($softpaqListCmd.platform)_cds.cab"
						Write-Verbose "Trying to download Advisory Data from FTP... $url"
						#$cacheDirAdvisory = $cacheDirOffline + "\$($softpaqListCmd.platform)"
						#$filename = "$($softpaqListCmd.platform)_cds.cab"
						$AdvisoryFile = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirAdvisory -Expand
						Write-Verbose "Finish downloading Advisory Data Files - $AdvisoryFile"
						if (-not $AdvisoryFile)
						{
							$exception = $_.Exception
							switch ($repo[1].settings.OnRemoteFileNotFound)
							{
								"LogAndContinue" {
									[string]$data = formatSyncErrorMessageAsHtml $exception
									Log ($data -split "`n")
									send "Softpaq repository synchronization error" $data
								}
								# "Fail"
								default {
									throw $exception
								}
							}
						}
					}
					
					# download Knowledge Base
					$url = $baseurl + "../kb/common/latest.cab"
					$cacheDirKb = $cacheDirOffline + "\kb\common"
					$filename = "latest.cab"
					Write-Verbose "Trying to download Knowledge Base... $url"
					try
					{
						$KnowledgeBase = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirKb
						Write-Verbose "Finish downloading Knowledge Base - $KnowledgeBase"
					}
					catch
					{
						$url = "https://ftp.hp.com/pub/caps-softpaq/cmit/imagepal/kb/common/latest.cab"
						Write-Verbose "Trying to download Knowledge Base from FTP... $url"
						#$cacheDirKb = $cacheDirOffline + "\kb\common"
						#$filename = "latest.cab"
						$KnowledgeBase = Get-HPPrivateOfflineCacheFiles -url $url -FileName $filename -cacheDirOffline $cacheDirKb
						Write-Verbose "Finish downloading Knowledge Base - $KnowledgeBase"
						if (-not $KnowledgeBase)
						{
							$exception = $_.Exception
							switch ($repo[1].settings.OnRemoteFileNotFound)
							{
								"LogAndContinue" {
									[string]$data = formatSyncErrorMessageAsHtml $exception
									Log ($data -split "`n")
									send "Softpaq repository synchronization error" $data
								}
								# "Fail"
								default {
									throw $exception
								}
							}
						}
					}
				}
			}
			else
			{
				Write-Host -ForegroundColor Cyan "Platform $($c.platform) doesn't exist. Please add a valid platform."
				Write-LogWarning "Platform $($c.platform) in not valid, and is was skipped."
			}
		}
		
		Write-Verbose ("Done with the list, repository is $($softpaqlist.Count) softpaqs.")
		[array]$softpaqlist = @($softpaqlist | Sort-Object -Unique -Property Id)
		Write-Verbose ("After trimming duplicates, we have $($softpaqlist.Count) softpaqs.")
		
		
		Write-Verbose ("Flushing the list of markers")
		FlushMarks
		Write-Verbose ("Writing new marks")
		
		# generate .mark file for each SoftPaq to be downloaded
		foreach ($sp in $softpaqList)
		{
			$number = $sp.id.ToLower().TrimStart("sp")
			TouchFile -File ".repository/mark/$number.mark"
		}
		
		Write-Verbose ("Starting download")
		$downloadCmd = @{ }
		$downloadCmd.Quiet = $quiet
		$downloadCmd.Verbose = $VerbosePreference
		
		Log "Download has started for $($softpaqlist.Count) softpaqs."
		add-logs "Download has started for $($softpaqlist.Count) softpaqs."
		foreach ($sp in $softpaqlist)
		{
			$downloadCmd.Number = $sp.id.ToLower().TrimStart("sp")
			$downloadCmd.Url = $sp.url -Replace "/$($sp.id).exe$", ''
			Write-Verbose "Working on data for softpaq $($downloadCmd.number)"
			try
			{
				Log "Start downloading files for sp$($downloadCmd.number)."
				add-logs "Start downloading files for sp$($downloadCmd.number)."
				DownloadSoftpaq -DownloadSoftpaqCmd $downloadCmd -MaxRetries $repo[1].settings.ExclusiveLockMaxRetries -Verbose:$VerbosePreference
				
				if ($OfflineCacheMode -eq "Enable")
				{
					Log ("    sp$($downloadCmd.number).html - Downloading Release Notes.")
					add-logs ("    sp$($downloadCmd.number).html - Downloading Release Notes.")
					$ReleaseNotesurl = Get-HPPrivateItemUrl $downloadCmd.number "html"
					$target = "sp$($downloadCmd.number).html"
					$targetfile = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($target)
					Invoke-HPPrivateDownloadFile -url $ReleaseNotesurl -Target $targetfile
					Log ("    sp$($downloadCmd.number).html - Done Downloading Release Notes.")
					add-logs ("    sp$($downloadCmd.number).html - Done Downloading Release Notes.")
				}
				Log "Finish downloading files for sp$($downloadCmd.number)."
				add-logs "Finish downloading files for sp$($downloadCmd.number)."
			}
			catch
			{
				$exception = $_.Exception
				
				switch ($repo[1].settings.OnRemoteFileNotFound)
				{
					"LogAndContinue" {
						[string]$data = formatSyncErrorMessageAsHtml $exception
						Log ($data -split "`n")
						add-logs ($data -split "`n")
						send "Softpaq repository synchronization error" $data
					}
					# "Fail"
					default {
						throw $exception
					}
				}
			}
		}
		
		Log "Repository sync has ended"
		add-logs "Repository sync has ended"
		Write-Verbose "Repository Sync has ended."
		
		Log "Repository Report creation started"
		add-logs "Repository Report creation started"
		Write-Verbose "Repository Report creation started."
		
		try
		{
			# get the configuration set for repository report if any
			$RepositoryReport = $repo[1].settings.RepositoryReport
			if ($RepositoryReport)
			{
				$Format = $RepositoryReport
				New-RepositoryReport -Format $Format -RepositoryPath "$cwd" -OutputFile "$cwd\.repository\Contents.$Format"
				Log "Repository Report created as Contents.$Format"
				add-logs "Repository Report created as Contents.$Format"
				Write-Verbose "Repository Report created as Content.$Format."
			}
		}
		catch [System.IO.FileNotFoundException]{
			Write-Verbose "No data available to create Repository Report as directory '$(Get-Location)' does not contain any CVA files."
			Log "No data available to create Repository Report as directory '$(Get-Location)' does not contain any CVA files."
		}
		catch
		{
			Write-Verbose "Error in creating Repository Report"
			Log "Error in creating Repository Report."
		}
	}
	catch
	{
		err "Repository synchronization failed: $($_.Exception.Message)" $true
		[string]$data = formatSyncErrorMessageAsHtml $_.Exception
		Log ($data -split "`n")
		add-logs ($data -split "`n")
		send "Softpaq repository synchronization error" $data
	}
}

Add-Type -TypeDefinition $RepositoryType

# print a bare error
function err
{
	[CmdletBinding()]
	param (
		[string]$str,
		[boolean]$withLog = $true
	)
	
	[console]::ForegroundColor = 'red'
	[console]::Error.WriteLine($str)
	[console]::ResetColor()
	
	if ($withLog) { Write-LogError -Message $str -Component "HP.Repo" -File $LOGFILE }
}

# convert a date object to an 8601 string
function ISO8601DateString
{
	[CmdletBinding()]
	param (
		[datetime]$Date
	)
	$Date.ToString("yyyy-MM-dd'T'HH:mm:ss.fffffff", [System.Globalization.CultureInfo]::InvariantCulture)
}

# get current user name
function GetUserName ()
{
	[CmdletBinding()]
	param ()
	
	try
	{
		[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
	}
	catch
	{
		return $env:username
	}
}

# check if a file exists
function FileExists
{
	[CmdletBinding()]
	param (
		[string]$File
	)
	Test-Path $File -PathType Leaf
}

# load a json object
function LoadJson
{
	[CmdletBinding()]
	param (
		[string]$File
	)
	
	try
	{
		$PS7Mark = "PS7Mark"
		$rawData = (Get-Content -Raw -Path $File) -replace '("DateLastModified": ")([^"]+)(")', ('$1' + $PS7Mark + '$2' + $PS7Mark + '$3')
		[SoftpaqRepositoryFile]$result = $rawData | ConvertFrom-Json
		$result.DateLastModified = $result.DateLastModified -replace $PS7Mark, ""
		return $result
	}
	catch
	{
		err ("Could not parse '$File'  $($_.Exception.Message)")
		return $Null
	}
}

# load a repository definition file
function LoadRepository
{
	[CmdletBinding()]
	param ()
	
	Write-Verbose "loading $REPOFILE"
	$inRepo = FileExists -File $REPOFILE
	if (-not $inRepo)
	{
		throw [System.Management.Automation.ItemNotFoundException]"Directory '$(Get-Location)' is not a repository."
	}
	
	$repo = LoadJson -File $REPOFILE
	if (-not $repo -eq $null)
	{
		err ("Could not initialize the repository: $($_.Exception.Message)")
		return $false, $null
	}
	
	if (-not $repo.Filters) { $repo.Filters = @() }
	
	if (-not $repo.settings)
	{
		$repo.settings = New-Object SoftpaqRepositoryFile+Configuration
	}
	
	if (-not $repo.settings.OnRemoteFileNotFound)
	{
		$repo.settings.OnRemoteFileNotFound = [ErrorHandling]::Fail
	}
	
	if (-not $repo.settings.ExclusiveLockMaxRetries)
	{
		$repo.settings.ExclusiveLockMaxRetries = 10
	}
	
	if (-not $repo.settings.OfflineCacheMode)
	{
		$repo.settings.OfflineCacheMode = "Disable"
	}
	
	if (-not $repo.settings.RepositoryReport)
	{
		$repo.settings.RepositoryReport = "CSV"
	}
	
	foreach ($filter in $repo.Filters)
	{
		if (-not $filter.characteristic)
		{
			$filter.characteristic = "*"
		}
		if (-not $filter.preferLTSC)
		{
			$filter.preferLTSC = $false
		}
	}
	
	if (-not $repo.Notifications)
	{
		$repo.Notifications = New-Object SoftpaqRepositoryFile+NotificationConfiguration
		$repo.Notifications.port = 25
		$repo.Notifications.tls = $false
		$repo.Notifications.UserName = ""
		$repo.Notifications.Password = ""
		$repo.Notifications.from = "softpaq-repo-sync@$($env:userdnsdomain)"
		$repo.Notifications.fromname = "Softpaq Repository Notification"
	}
	
	Write-Verbose "load success"
	return $true, $repo
}

# download a SoftPaq, optionally checking existing SoftPaqs. Note that CVAs are always
# downloaded since there is no reliable way to check their consistency.

function DownloadSoftpaq
{
	[CmdletBinding()]
	param (
		$DownloadSoftpaqCmd,
		[int]$MaxRetries = 10
	)
	$download_file = $true
	$filename = "sp" + $DownloadSoftpaqCmd.number + ".exe"
	$CVAname = "sp" + $DownloadSoftpaqCmd.number + ".cva"
	
	# downloading the CVA 
	Write-Verbose ("Downloading CVA $($DownloadSoftpaqCmd.number)")
	Log ("    sp$($DownloadSoftpaqCmd.number).cva - Downloading CVA file.")
	Get-SoftpaqMetadataFile @DownloadSoftpaqCmd -MaxRetries $MaxRetries
	Log ("    sp$($DownloadSoftpaqCmd.number).cva - Done downloading CVA file.")
	
	if (FileExists -File $filename)
	{
		Write-Verbose "Checking signature for existing file $filename"
		if (Get-HPPrivateCheckSignature -File $filename -CVAfile $CVAname -Verbose:$VerbosePreference -Progress:(-not $DownloadSoftpaqCmd.Quiet))
		{
			
			if (-not $DownloadSoftpaqCmd.Quiet)
			{
				Write-Host -ForegroundColor Magenta "File $filename already exists and passes signature check. It will not be redownloaded."
			}
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Already exists. Will not redownload.")
			$download_file = $false
		}
		else
		{
			Write-Verbose ("Need to redownload file '$filename'")
		}
	}
	else
	{
		Write-Verbose ("Need to download file '$filename'")
	}
	
	
	if ($download_file -eq $true)
	{
		try
		{
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Downloading EXE file.")
			Get-Softpaq @DownloadSoftpaqCmd -MaxRetries $MaxRetries -Overwrite yes
			# check post-download integrity
			if (-not (Get-HPPrivateCheckSignature -File $filename -CVAfile $CVAname -Verbose:$VerbosePreference -Progress:(-not $DownloadSoftpaqCmd.Quiet)))
			{
				Remove-Item -Path $filename -Force -Verbose:$VerbosePreference
				Remove-Item -Path $CVAName -Force -Verbose:$VerbosePreference
				$msg = "File $filename failed integrity check and has been deleted, will retry download next sync"
				if (-not $DownloadSoftpaqCmd.Quiet)
				{
					Write-Host -ForegroundColor Magenta $msg
				}
				Write-LogWarning -Message $msg -Component "HP.Repo" -File $LOGFILE
				
			}
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Done downloading EXE file.")
		}
		catch
		{
			Write-Host -ForegroundColor Magenta "File sp$($DownloadSoftpaqCmd.number).exe has invalid or missing signature and will be deleted."
			Log ("    sp$($DownloadSoftpaqCmd.number).exe has invalid or missing signature and will be deleted.")
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Redownloading EXE file.")
			Get-Softpaq @DownloadSoftpaqCmd -maxRetries $maxRetries
			Log ("    sp$($DownloadSoftpaqCmd.number).exe - Done downloading EXE file.")
		}
	}
}

# write a repository definition file
function WriteRepositoryFile
{
	[CmdletBinding()]
	param ($obj)
	
	$now = Get-Date
	$obj.DateLastModified = ISO8601DateString -Date $now
	$obj.ModifiedBy = GetUserName
	Write-Verbose "Writing repository file to $REPOFILE"
	$obj | ConvertTo-Json | Out-File -Force $REPOFILE
}

# check if a filter exists in a repo object
function FilterExists
{
	[CmdletBinding()]
	param ($repo,
		$f)
	
	$c = getFilters $repo $f
	return ($null -ne $c)
}

# get a list of filters in a repo, matching exact parameters
function getFilters
{
	[CmdletBinding()]
	param ($repo,
		$f)
	
	if ($repo.Filters.Count -eq 0) { return $null }
	$repo.Filters | Where-Object {
		$_.platform -eq $f.platform -and
		$_.OperatingSystem -eq $f.OperatingSystem -and
		$_.Category -eq $f.Category -and
		$_.ReleaseType -eq $f.ReleaseType -and
		$_.characteristic -eq $f.characteristic -and
		$_.preferLTSC -eq $f.preferLTSC
	}
}

# get a list of filters in a repo, considering empty parameters as wildcards
function GetFiltersWild
{
	[CmdletBinding()]
	param ($repo,
		$f)
	
	if ($repo.Filters.Count -eq 0) { return $null }
	$repo.Filters | Where-Object {
		$_.platform -eq $f.platform -and
		(
			$_.OperatingSystem -eq $f.OperatingSystem -or
			$f.OperatingSystem -eq "*" -or
			($f.OperatingSystem -eq "win10:*" -and $_.OperatingSystem.StartsWith("win10")) -or
			($f.OperatingSystem -eq "win11:*" -and $_.OperatingSystem.StartsWith("win11"))
		) -and
		($_.Category -eq $f.Category -or $f.Category -eq "*") -and
		($_.ReleaseType -eq $f.ReleaseType -or $f.ReleaseType -eq "*") -and
		($_.characteristic -eq $f.characteristic -or $f.characteristic -eq "*") -and
		($_.preferLTSC -eq $f.preferLTSC -or $null -eq $f.preferLTSC)
	}
}

# write a log entry to the .repository/activity.log
function Log
{
	[CmdletBinding()]
	param ([string[]]$entryText)
	
	foreach ($line in $entryText)
	{
		if (-not $line)
		{
			$line = " "
		}
		Write-LogInfo -Message $line -Component "HP.Repo" -File $LOGFILE
	}
	
}

# touch a file (change its date if exists, or create it if it doesn't.
function TouchFile
{
	[CmdletBinding()]
	param ([string]$File)
	
	if (Test-Path $File) { (Get-ChildItem $File).LastWriteTime = Get-Date }
	else { Write-Output $null > $File }
}


# remove all marks from the repository
function FlushMarks
{
	[CmdletBinding()]
	param ()
	
	Write-Verbose "Removing all marks"
	Remove-Item ".repository\mark\*" -Include "*.mark"
}


# send a notification email
function Send
{
	[CmdletBinding()]
	param (
		$subject,
		$body,
		$html = $true
	)
	
	$n = Get-RepositoryNotificationConfiguration
	if ((-not $n) -or (-not $n.server))
	{
		Write-Verbose ("Notifications are not configured")
		return
	}
	
	try
	{
		if ((-not $n.addresses) -or (-not $n.addresses.Count))
		{
			Write-Verbose ("Notifications have no recipients defined")
			return
		}
		Log ("Sending a notification email")
		
		$params = @{ }
		$params.To = $n.addresses
		$params.SmtpServer = $n.server
		$params.port = $n.port
		$params.UseSsl = $n.tls
		$params.from = "$($n.fromname) <$($n.from)>"
		$params.Subject = $subject
		$params.Body = $body
		$params.BodyAsHtml = $html
		
		Write-Verbose ("server: $($params.SmtpServer)")
		Write-Verbose ("port: $($params.Port)")
		
		if ([string]::IsNullOrEmpty($n.UserName) -eq $false)
		{
			try
			{
				[SecureString]$read = $n.Password | ConvertTo-SecureString
				$params.Credential = New-Object System.Management.Automation.PSCredential ($n.UserName, $read)
				if (-not $params.Credential)
				{
					Log ("Could not build credential object from username and password")
					return;
				}
			}
			catch
			{
				err ("Failed to build credential object from username and password: $($_.Exception.Message)")
				return
			}
		}
		Send-MailMessage @params -ErrorAction Stop
	}
	catch
	{
		err ("Could not send email: $($_.Exception.Message)")
		return
	}
	Write-Verbose ("Send complete.")
}

<#
.SYNOPSIS
    Initialize a repository in the current directory. 

.DESCRIPTION
  This command initializes a directory to be used as a repository. It creates a .repository folder in the current directory,
  which contains the definition of the .repository and all its settings.

  In order to un-initalize a directory, simple remove the .repository folder.

  After initializing a repository, you must add at least one filter to define the content that this repository will receive.

  If the directory already contains a repository, the command will fail.

.EXAMPLE
    Initialize-Repository

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.LINK
  [Get-RepositoryConfiguration](Get-RepositoryConfiguration)

.LINK
  [Set-RepositoryConfiguration](Set-RepositoryConfiguration)
#>
function Initialize-Repository
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Initialize-Repository")]
	param ()
	
	if (FileExists -File $REPOFILE)
	{
		err "This directory is already initialized as a repository."
		return
	}
	$now = Get-Date
	$newRepositoryFile = New-Object SoftpaqRepositoryFile
	
	$newRepositoryFile.settings = New-Object SoftpaqRepositoryFile+Configuration
	$newRepositoryFile.settings.OnRemoteFileNotFound = [ErrorHandling]::Fail
	$newRepositoryFile.settings.ExclusiveLockMaxRetries = 10
	$newRepositoryFile.settings.OfflineCacheMode = "Disable"
	$newRepositoryFile.settings.RepositoryReport = "CSV"
	
	$newRepositoryFile.DateCreated = ISO8601DateString -Date $now
	$newRepositoryFile.CreatedBy = GetUserName
	
	try
	{
		New-Item -ItemType directory -Path .repository | Out-Null
		WriteRepositoryFile -obj $newRepositoryFile
		New-Item -ItemType directory -Path ".repository/mark" | Out-Null
	}
	catch
	{
		err ("Could not initialize the repository: $($_.Exception.Message)")
		return
	}
	Log "Repository initialized successfully."
}

<#
.SYNOPSIS
    Add a filter to the repository. 

.DESCRIPTION
  This function adds a filter to a repository, which was previously initialized by Initialize-Repository.

  The repository can contain one or more filters, and the effective filtering will be the sum of all filters defined.

.PARAMETER Platform
  Specifies the given platform as a platform to include in this repository. This is a platform ID, a 4-digit hexadecimal number, as obtained by Get?HPDeviceProductID.

.PARAMETER Os
  Specifies the operating system to be include in this repository. The field must be one of "win10" or "win11". If this parameter is not specified, all operating systems associated with the specified platform will be included.

.PARAMETER OsVer
  Specify the target OS Version (e.g. "1809", "1903", "1909", "2004", "2009", "21H1", "21H2", "22H2" etc). Starting from 21H1 release, "xxHx" format is expected. If the parameter is not specified, current operating system version will be assumed, which may not be what is intended.

.PARAMETER Category
  Specifies the SoftPaq category to be include in this repository. The category must be one (or more) of "Bios", "Firmware", "Driver", "Software", "OS", "Manageability", "Diagnostic", "Utility", "Driverpack", "Dock", "UWPPack".
  If this parameter is not specified, all categories are included.

.PARAMETER ReleaseType
  Specifies the SoftPaq release type to be include in this repository. The release type must be one (or more) of "critical", "recommended", "routine". If this parameter is not specified, all release types are included.

.PARAMETER Characteristic
  Specifies the SoftPaq characteristic to be include in this repository. The characteristic must be one of "ssm", "dpb", "uwp". If this parameter is not specified, all characteristics are included.

.PARAMETER PreferLTSC
  If specified, LTSB/LTSC reference file is preferred for the entered Platform. If the LTSB/LTSC reference file doesn't exist, falls back to regular reference file for that platform.

.EXAMPLE
  Add-RepositoryFilter -Platform 1234 -Os win10 -OsVer 2009

.EXAMPLE
  Add-RepositoryFilter -Platform 1234 -Os win10 -OsVer "21H1"

.EXAMPLE
  Add-RepositoryFilter -Platform 1234 -Os win10 -OsVer "21H1" -PreferLTSC

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.LINK
  [Get-HPDeviceProductID](Get-HPDeviceProductID)
#>
function Add-RepositoryFilter
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Add-RepositoryFilter")]
	param (
		[ValidatePattern("^[a-fA-F0-9]{4}$")]
		[Parameter(Position = 0, Mandatory = $true)]
		[string]$Platform,
		[ValidateSet("win7", "win8", "win8.1", "win81", "win10", "win11", "*")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 1)]
		$Os = "*",
		[string[]][ValidateSet("1809", "1903", "1909", "2004", "2009", "21H1", "21H2", "22H2")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 1)]
		[string]$OsVer,
		[ValidateSet("Bios", "Firmware", "Driver", "Software", "Os", "Manageability", "Diagnostic", "Utility", "Driverpack", "Dock", "UWPPack", "*")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 2)]
		[string[]]$Category = "*",
		[ValidateSet("Critical", "Recommended", "Routine", "*")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 3)]
		[string[]]$ReleaseType = "*",
		[ValidateSet("SSM", "DPB", "UWP", "*")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 4)]
		[string[]]$Characteristic = "*",
		[Parameter(Position = 5, Mandatory = $false)]
		[switch]$PreferLTSC
	)
	
	$c = LoadRepository
	try
	{
		if ($c[0] -eq $false) { return }
		$repo = $c[1]
		
		$newFilter = New-Object SoftpaqRepositoryFile+SoftpaqRepositoryFilter
		$newFilter.platform = $Platform
		
		$newFilter.OperatingSystem = $Os
		if (-not $OsVer)
		{
			$OsVer = GetCurrentOSVer
		}
		if ($OsVer) { $OsVer = $OsVer.ToLower() }
		if ($Os -eq "win10") { $newFilter.OperatingSystem = "win10:$OsVer" }
		elseif ($Os -eq "win11") { $newFilter.OperatingSystem = "win11:$OsVer" }
		
		$newFilter.Category = $Category
		$newFilter.ReleaseType = $ReleaseType
		$newFilter.characteristic = $Characteristic
		$newFilter.preferLTSC = $PreferLTSC.IsPresent
		
		# silently ignore if the filter is already in the repo
		$exists = filterExists $repo $newFilter
		if (!$exists)
		{
			$repo.Filters += $newFilter
			WriteRepositoryFile -obj $repo
			if ($OsVer -and $Os -ne '*') { Log "Added filter $Platform {{ os='$Os', osver='$OsVer', category='$Category', release='$ReleaseType', characteristic='$Characteristic', preferLTSC='$($PreferLTSC.IsPresent)' }}" }
			else { Log "Added filter $Platform {{ os='$Os', category='$Category', release='$ReleaseType', characteristic='$Characteristic', preferLTSC='$($PreferLTSC.IsPresent)' }}" }
		}
		else
		{
			Write-Verbose "Silently ignoring this filter since exact match is already in the repository"
		}
		Write-Verbose "Repository filter added."
	}
	catch
	{
		err ("Could not add filter to the repository:  $($_.Exception.Message)")
	}
}


<#
.SYNOPSIS
  Remove one or more filters from the repository. 

.DESCRIPTION
  This function modifies the repository to remove filters from the repository definition.

  If an optional parameter is not specified, it will be considered a wildcard and match any value. Therefore this command may result in multiple filters being deleted.

.PARAMETER Platform
  The platform to remove. This is a 4-digit hex number, and can be obtained via Get-HPDeviceProductID

.PARAMETER Os
  An optional parameter to narrow down the filter to a specific OS for the specified platform. If not specified, all OS will be matched.

.PARAMETER OsVer
  Specify the target OS Version (e.g. "1809", "1903", "1909", "2004", "2009", "21H1", "21H2", "22H2" etc). Starting from 21H1 release, "xxHx" format is expected. If the parameter is not specified, current operating system version will be assumed, which may not be what is intended.

.PARAMETER Category
  An optional parameter to narrow down the filter to a specific category for the specified platform. If not specified, all categories will be matched.

.PARAMETER ReleaseType
  An optional parameter to narrow down the filter to a specific release type for the specified platform. If not specified, all release types will be matched.

.PARAMETER Characteristic
  An optional parameter to narrow down the filter to a specific characteristic for the specified platform. If not specified, all characteristics will be matched.

.PARAMETER PreferLTSC
  An optional boolean parameter to narrow down the filter to a specific LTSB/LTSC reference file preference for the specified platform. If not specified, all preferences will be matched.

.PARAMETER Yes
  An optional parameter to provide. If not specified, script will ask for confirmation before deleting a filter. If specified, script will go ahead and delete the filter without confirming.

.EXAMPLE
  Remove-RepositoryFilter -Platform 1234

.EXAMPLE
  Remove-RepositoryFilter -Platform 1234 -Os win10 -OsVer "21H1"

.EXAMPLE
  Remove-RepositoryFilter -Platform 1234 -Os win10 -OsVer "21H1" -PreferLTSC $True

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Get-HPDeviceProductID](Get-HPDeviceProductID)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)
#>
function Remove-RepositoryFilter
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Remove-RepositoryFilter")]
	param (
		[ValidatePattern("^[a-fA-F0-9]{4}$")]
		[Parameter(Position = 0, Mandatory = $true)]
		[string]$Platform,
		[ValidateSet("win7", "win8", "win8.1", "win81", "win10", "win11", "*")]
		# keep in sync with the SoftPaq module
		[string[]][Parameter(Position = 1)]
		$Os = "*",
		[ValidateSet("1809", "1903", "1909", "2004", "2009", "21H1", "21H2", "22H2")]
		# keep in sync with the SoftPaq module
		[Parameter(Position = 1)]
		[string]$OsVer,
		[ValidateSet("Bios", "Firmware", "Driver", "Software", "Os", "Manageability", "Diagnostic", "Utility", "Driverpack", "Dock", "UWPPack", "*")]
		# keep in sync with the SoftPaq module
		[string[]][Parameter(Position = 2)]
		$Category = "*",
		[ValidateSet("Critical", "Recommended", "Routine", "*")]
		# keep in sync with the SoftPaq module
		[string[]][Parameter(Position = 3)]
		$ReleaseType = "*",
		[Parameter(Position = 4, Mandatory = $false)]
		[switch]$Yes = $false,
		[ValidateSet("SSM", "DPB", "UWP", "*")]
		# keep in sync with the SoftPaq module
		[string[]][Parameter(Position = 5)]
		$Characteristic = "*",
		[Parameter(Position = 5, Mandatory = $false)]
		[nullable[boolean]]$PreferLTSC = $null
	)
	
	$c = LoadRepository
	try
	{
		if ($c[0] -eq $false) { return }
		
		$newFilter = New-Object SoftpaqRepositoryFile+SoftpaqRepositoryFilter
		$newFilter.platform = $Platform
		$newFilter.OperatingSystem = $Os
		
		if ($Os -eq "win10")
		{
			if ($OsVer) { $newFilter.OperatingSystem = "win10:$OsVer" }
			else { $newFilter.OperatingSystem = "win10:*" }
		}
		elseif ($Os -eq "win11")
		{
			if ($OsVer) { $newFilter.OperatingSystem = "win11:$OsVer" }
			else { $newFilter.OperatingSystem = "win11:*" }
		}
		
		$newFilter.Category = $Category
		$newFilter.ReleaseType = $ReleaseType
		$newFilter.characteristic = $Characteristic
		$newFilter.preferLTSC = $PreferLTSC
		
		$todelete = getFiltersWild $c[1] $newFilter
		if (-not $todelete)
		{
			Write-Verbose ("No matching filter to delete")
			return
		}
		
		if (-not $Yes.IsPresent)
		{
			Write-Host "The following filters will be deleted:" -ForegroundColor Cyan
			$todelete | ConvertTo-Json -Depth 2 | Write-Host -ForegroundColor Cyan
			$answer = Read-Host "Enter 'y' to continue: "
			if ($answer -ne "y")
			{
				Write-Host 'Aborted.'
				return
			}
		}
		
		$c[1].Filters = $c[1].Filters | Where-Object { $todelete -notcontains $_ }
		WriteRepositoryFile -obj $c[1]
		
		foreach ($f in $todelete)
		{
			Log "Removed filter $($f.platform) { os='$($f.operatingSystem)', category='$($f.category)', release='$($f.releaseType), characteristic='$($f.characteristic)' }"
		}
	}
	catch
	{
		err ("Could not remove filter from repository: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
    Show the current repository definition. 

.DESCRIPTION
  Get the repository definition as an object. This command must be run inside an initialized repository.
  
.EXAMPLE
    $myrepository = Get-RepositoryInfo
    
.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)
#>
function Get-RepositoryInfo ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Get-RepositoryInfo")]
	param ()
	
	$c = LoadRepository
	try
	{
		if (-not $c[0]) { return }
		$c[1]
	}
	catch
	{
		err ("Could not get repository info: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
    Cleanup repository
  
.DESCRIPTION
  Use Invoke-RepositoryCleanup to remove SoftPaqs from repository that are obsolete. These may be SoftPaqs that have been replaced
  by newer versions, or that no longer match the active repository filters.

.EXAMPLE
    Invoke-RepositoryCleanup

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

#>
function Invoke-RepositoryCleanup
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Invoke-RepositoryCleanup")]
	param ()
	$repo = LoadRepository
	Log ("Beginning repository cleanup")
	$deleted = 0
	
	try
	{
		Get-ChildItem "." -File | ForEach-Object {
			$name = $_.Name.ToLower().TrimStart("sp").Split('.')[0]
			if ($name -ne $null)
			{
				if (-not (Test-Path ".repository/mark/$name.mark" -PathType Leaf))
				{
					Write-Verbose "Deleting orphaned file $($_.Name)"
					Remove-Item $_.Name
					$deleted++
				}
				#else {
				#  Write-Verbose "Softpaq $($_.Name) is still needed."
				#}
			}
		}
		Log ("Completed repository cleanup, deleted $deleted files.")
	}
	catch
	{
		err ("Could not clean repository: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
  Set the repository notification configuration.

.DESCRIPTION
  This function defines a notification SMTP server (and optionally, port) for an email server to be used to send failure notifications during unattended synchronization via Invoke-RepositorySync.

  One or more recipients can then be added via Add-RepositorySyncFailureRecipient.

  The directory must have been initialized via Initialize-Repository.

  The function must be invoked inside a directory initialized as a repository.


.PARAMETER Server
  The server name (or IP) for the outgoing mail (SMTP) server

.PARAMETER Port
  Specifies a port for the SMTP server. If not provided, the default IANA-assigned port 25 will be used.

.PARAMETER Tls
  Specifies whether to use SSL/TLS. The value may be "true", "false", or "auto". "Auto" will automatically set SSL to true when the port is changed to a value different than 25. By default, TLS is false.

.PARAMETER UserName
  Specifies the SMTP server username for authenticated SMTP servers. If username is not specified, connection will be made without authentication.

.PARAMETER Password
  Specifies the SMTP server password for authenticated SMTP servers.
  
.PARAMETER From
    Specifies the email address from which the notification will appear to originate. Note that in servers may accept emails from specified 
  domains only, or in some cases may require the email address to match the username.

.PARAMETER FromName
  Specifies the from address display name.

.PARAMETER RemoveCredentials
  Removes the SMTP server credentials without removing the entire mail server configuration.

.EXAMPLE
  Set-RepositoryNotificationConfiguration smtp.mycompany.com

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

#>
function Set-RepositoryNotificationConfiguration
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Set-RepositoryNotificationConfiguration")]
	param (
		[Parameter(Position = 0, Mandatory = $false)]
		[string][ValidatePattern("^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$")]
		$Server = $null,
		[Parameter(Position = 1, Mandatory = $false)]
		[ValidateRange(1, 65535)]
		[int]$Port = 0,
		[Parameter(Position = 2, Mandatory = $false)]
		[string][ValidateSet('true', 'false', 'auto')]
		$Tls = $null,
		[Parameter(Position = 3, Mandatory = $false)]
		[string]$Username = $null,
		[Parameter(Position = 4, Mandatory = $false)]
		[string]$Password = $null,
		[Parameter(Position = 5, Mandatory = $false)]
		[string][ValidatePattern("^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$")]
		$From = $null,
		[Parameter(Position = 6, Mandatory = $false)]
		[string]$FromName = $null,
		[Parameter(Position = 7, Mandatory = $false)]
		[switch]$RemoveCredentials
	)
	
	Write-Verbose "Beginning notification configuration update"
	
	if ($RemoveCredentials.IsPresent -and ([string]::IsNullOrEmpty($UserName) -eq $false -or [string]::IsNullOrEmpty($Password) -eq $false))
	{
		err ("-removeCredentials may not be specified with -username or -password")
		return
	}
	
	$c = LoadRepository
	try
	{
		if (-not $c[0]) { return }
		
		Write-Verbose "Applying configuration"
		if ([string]::IsNullOrEmpty($Server) -eq $false)
		{
			Write-Verbose ("Setting SMTP Server to: $Server")
			$c[1].Notifications.server = $Server
		}
		
		if ($Port)
		{
			Write-Verbose ("Setting SMTP Server port to: $Port")
			$c[1].Notifications.port = $Port
		}
		
		if (-not [string]::IsNullOrEmpty($UserName))
		{
			Write-Verbose ("Setting SMTP server credential(username) to: $UserName")
			$c[1].Notifications.UserName = $UserName
		}
		
		if (-not [string]::IsNullOrEmpty($Password))
		{
			Write-Verbose ("Setting SMTP server credential(password) to: (redacted)")
			$c[1].Notifications.Password = ConvertTo-SecureString $Password -Force -AsPlainText | ConvertFrom-SecureString
		}
		
		if ($RemoveCredentials.IsPresent)
		{
			Write-Verbose ("Clearing credentials from notification configuration")
			$c[1].Notifications.UserName = $null
			$c[1].Notifications.Password = $null
		}
		
		switch ($Tls)
		{
			"auto" {
				if ($Port -ne 25) { $c[1].Notifications.tls = $true }
				else { $c[1].Notifications.tls = $false }
				Write-Verbose ("SMTP server SSL auto-calculated to: $($c[1].Notifications.tls)")
			}
			
			"true" {
				$c[1].Notifications.tls = $true
				Write-Verbose ("Setting SMTP SSL to: $($c[1].Notifications.tls)")
			}
			"false" {
				$c[1].Notifications.tls = $false
				Write-Verbose ("Setting SMTP SSL to: $($c[1].Notifications.tls)")
			}
		}
		if (-not [string]::IsNullOrEmpty($From))
		{
			Write-Verbose ("Setting Mail from address to: $From")
			$c[1].Notifications.from = $From
		}
		if (-not [string]::IsNullOrEmpty($FromName))
		{
			Write-Verbose ("Setting Mail from displayname to: $FromName")
			$c[1].Notifications.fromname = $FromName
		}
		
		WriteRepositoryFile -obj $c[1]
		Log ("Updated notification configuration")
	}
	catch
	{
		err ("Failed to modify repository configuration: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
    Clear the repository notification configuration

.DESCRIPTION
  This function removes notification configuration from repository, in effect turning off notifications.

  The directory must have been initialized via Initialize-Repository and notification configuration must have been defined via Set-RepositoryNotificationConfiguration

  The function must be invoked inside a directory initialized as a repository.

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  Clear-RepositoryNotificationConfiguration

#>
function Clear-RepositoryNotificationConfiguration ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Clear-RepositoryNotificationConfiguration")]
	param ()
	Log "Clearing notification configuration"
	
	$c = LoadRepository
	try
	{
		if (-not $c[0]) { return }
		$c[1].Notifications = $null
		WriteRepositoryFile -obj $c[1]
		Write-Verbose ("Ok.")
	}
	catch
	{
		err ("Failed to modify repository configuration: $($_.Exception.Message)")
	}
}

<#
.SYNOPSIS
    Get an object representing the current notification configuration

.DESCRIPTION
  This function retrieves the current notification configuration as an object.

  The directory must have been initialized via Initialize-Repository and notification configuration must have been defined via Set-RepositoryNotificationConfiguration

  The function must be invoked inside a directory initialized as a repository.
  
.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  $config = Get-RepositoryNotificationConfiguration


#>
function Get-RepositoryNotificationConfiguration ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Get-RepositoryNotificationConfiguration")]
	param ()
	
	$c = LoadRepository
	if ((-not $c[0]) -or (-not $c[1].Notifications))
	{
		return $null
	}
	return $c[1].Notifications
}


<#
.SYNOPSIS
    Display the current notification configuration to screen


.DESCRIPTION
  This function retrieves the current notification configuration as user-friendly screen output.

  The directory must have been initialized via Initialize-Repository and notification configuration must have been defined via Set-RepositoryNotificationConfiguration

  The function must be invoked inside a directory initialized as a repository.

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK
  [Add-RepositorySyncFailureRecipient](Add-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  Show-RepositoryNotificationConfiguration
#>
function Show-RepositoryNotificationConfiguration ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Show-RepositoryNotificationConfiguration")]
	param ()
	
	try
	{
		$c = Get-RepositoryNotificationConfiguration
		if (-not $c)
		{
			err ("Notifications are not configured.")
			return
		}
		
		if (-not [string]::IsNullOrEmpty($c.UserName))
		{
			Write-Host "Notification server: smtp://$($c.username):<password-redacted>@$($c.server):$($c.port)"
		}
		else
		{
			Write-Host "Notification server: smtp://$($c.server):$($c.port)"
		}
		Write-Host "Email will arrive from $($c.from) with name `"$($c.fromname)`""
		
		if ((-not $c.addresses) -or (-not $c.addresses.Count))
		{
			Write-Host "There are no recipients configured"
			return
		}
		foreach ($r in $c.addresses)
		{
			Write-Host "Recipient: $r"
		}
	}
	catch
	{
		err ("Failed to read repository configuration: $($_.Exception.Message)")
	}
	
}

<#
.SYNOPSIS
  Add a recipient to be notified of failures

.DESCRIPTION
  This function adds an email address to the repository. On failures, notifications will be sent to this email address.

  The directory must have been initialized via Initialize-Repository and notification configured via Set-RepositoryNotificationConfiguration.

  The function must be invoked inside a directory initialized as a repository.

.PARAMETER To
  The email address to add

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  Add-RepositorySyncFailureRecipient -to someone@mycompany.com

#>
function Add-RepositorySyncFailureRecipient ()
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Add-RepositorySyncFailureRecipient")]
	param (
		[Parameter(Position = 0, Mandatory = $true)]
		[ValidatePattern("^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$")]
		[string]$To
	)
	
	Log "Adding '$To' as a recipient."
	$c = LoadRepository
	try
	{
		if (-not $c[0]) { return }
		
		if (-not $c[1].Notifications)
		{
			err ("Notifications are not configured")
			return
		}
		
		if (-not $c[1].Notifications.addresses)
		{
			$c[1].Notifications.addresses = $()
		}
		
		$c[1].Notifications.addresses += $To.trim()
		$c[1].Notifications.addresses = $c[1].Notifications.addresses | Sort-Object -Unique
		WriteRepositoryFile -obj ($c[1] | Sort-Object -Unique)
	}
	catch
	{
		err ("Failed to modify repository configuration: $($_.Exception.Message)")
	}
	
}

<#
.SYNOPSIS
    Remove a recipient from notification list for the current repository.


.DESCRIPTION
  This function removes an email address as a recipient for synchronization failure messages.

  The directory must have been initialized via Initialize-Repository and notification configured via Set-RepositoryNotificationConfiguration.

  The function must be invoked inside a directory initialized as a repository.

.PARAMETER To
  The email address to remove

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.LINK
  [Test-RepositoryNotificationConfiguration](Test-RepositoryNotificationConfiguration)

.EXAMPLE
  Remove-RepositorySyncFailureRecipient -to someone@mycompany.com

#>
function Remove-RepositorySyncFailureRecipient
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Remove-RepositorySyncFailureRecipient")]
	param (
		[Parameter(Position = 0, Mandatory = $true)]
		[ValidatePattern("^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$")]
		[string]$To
	)
	Log "Removing '$To' as a recipient."
	$c = LoadRepository
	try
	{
		if ($c[0] -eq $false) { return }
		
		if (-not $c[1].Notifications)
		{
			err ("Notifications are not configured")
			return
		}
		
		
		if (-not $c[1].Notifications.addresses)
		{
			$c[1].Notifications.addresses = $()
		}
		
		$c[1].Notifications.addresses = $c[1].Notifications.addresses | Where-Object { $_ -ne $To.trim() } | Sort-Object -Unique
		WriteRepositoryFile -obj ($c[1] | Sort-Object -Unique)
	}
	catch
	{
		err ("Failed to modify repository configuration: $($_.Exception.Message)")
	}
}


<#
.SYNOPSIS
    Test the email notification configuration by sending a test email

.DESCRIPTION
  This function sends a test email using the current repository configuration and reports 
  any errors associated with the send process. It is intended for debugging the email server configuration.

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Add-RepositoryFilter](Add-RepositoryFilter)

.LINK
  [Remove-RepositoryFilter](Remove-RepositoryFilter)

.LINK
  [Get-RepositoryInfo](Get-RepositoryInfo)

.LINK
  [Invoke-RepositorySync](Invoke-RepositorySync)

.LINK
  [Invoke-RepositoryCleanup](Invoke-RepositoryCleanup)

.LINK
  [Set-RepositoryNotificationConfiguration](Set-RepositoryNotificationConfiguration)

.LINK 
  [Clear-RepositoryNotificationConfiguration](Clear-RepositoryNotificationConfiguration)

.LINK 
  [Get-RepositoryNotificationConfiguration](Get-RepositoryNotificationConfiguration)

.LINK 
  [Show-RepositoryNotificationConfiguration](Show-RepositoryNotificationConfiguration)

.LINK
  [Remove-RepositorySyncFailureRecipient](Remove-RepositorySyncFailureRecipient)

.EXAMPLE
  Test-RepositoryNotificationConfiguration

#>
function Test-RepositoryNotificationConfiguration
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Test-RepositoryNotificationConfiguration")]
	param ()
	
	Log ("test email started")
	send "Repository Failure Notification (Test only)" "No content." -html $false
	Write-Verbose ("Ok.")
}

<#
.SYNOPSIS
  Set repository configuration values

.DESCRIPTION
  This function sets various configuration options that control synchronization behavior.

.PARAMETER setting
  The setting to configure from 'OnRemoteFileNotFound', 'OfflineCacheMode' and 'RepositoryReport'.

.PARAMETER value
  The new value of the setting for OnRemoteFileNotFound. It can be from 'Fail' (default) and 'LogAndContinue'.

.PARAMETER CacheValue
  The new CacheValue of the setting for OfflineCacheMode. It can be from 'Disable' (default) and 'Enable'.

.PARAMETER Format
  The new value of the setting for RepositoryReport. It can be from 'CSV' (Default) ,'JSon', 'XML' and 'ExcelCSV'.

.LINK
  [Initialize-Repository](Initialize-Repository)

.LINK
  [Get-RepositoryConfiguration](Get-RepositoryConfiguration)

.Example
  Set-RepositoryConfiguration -Setting OnRemoteFileNotFound -Value LogAndContinue

.Example
  Set-RepositoryConfiguration -Setting OfflineCacheMode -CacheValue Enable

.Example
  Set-RepositoryConfiguration -Setting RepositoryReport -Format CSV

.NOTES
  Current event handlers supported:

  - _OnRemoteFileNotFound_ - indicates what should happen if an expected SoftPaq is not found on the remote site. The default is 'Fail' in which case the process will stop. Setting to 'LogAndContinue' will log the error, but the repository synchronization will continue.

  Current Repository Report functionality:

  Invoke-RepositorySync will create a report containing contents of the Repository in a format provided by RepositoryFormat Setting.
  Use RepositoryReport Setting with -Format to set the format in which the you would like the report to be generated. Default format is CSV. 
  Report will be generated with a name Contents.<format> e.g. Contents.CSV inside the .repository directory

  To create a report outside the repository use New-RepositoryReport function.
#>
function Set-RepositoryConfiguration
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Set-RepositoryConfiguration")]
	param (
		[ValidateSet('OnRemoteFileNotFound', 'OfflineCacheMode', 'RepositoryReport')]
		[Parameter(ParameterSetName = "ErrorHandler", Position = 0, Mandatory = $true)]
		[Parameter(ParameterSetName = "CacheMode", Position = 0, Mandatory = $true)]
		[Parameter(ParameterSetName = "ReportHandler", Position = 0, Mandatory = $true)]
		[string]$Setting,
		[Parameter(ParameterSetName = "ErrorHandler", Position = 1, Mandatory = $true)]
		[ErrorHandling]$Value,
		[ValidateSet('Enable', 'Disable')]
		[Parameter(ParameterSetName = "CacheMode", Position = 1, Mandatory = $true)]
		[string]$CacheValue,
		[ValidateSet('CSV', 'JSon', 'XML', 'ExcelCSV')]
		[Parameter(ParameterSetName = "ReportHandler", Position = 1, Mandatory = $true)]
		[string]$Format
	)
	$c = LoadRepository
	if (-not $c[0]) { return }
	if ($Setting -eq "OnRemoteFileNotFound")
	{
		if (($Value -eq "Fail") -or ($Value -eq "LogAndContinue"))
		{
			$c[1].settings. "${Setting}" = $Value
			WriteRepositoryFile -obj $c[1]
			Write-Verbose ("Ok.")
		}
		else
		{
			Write-Host -ForegroundColor Magenta "Enter valid Value for $Setting."
			Write-LogWarning "Enter valid Value for $Setting."
		}
	}
	elseif ($Setting -eq "OfflineCacheMode")
	{
		if ($CacheValue)
		{
			$c[1].settings. "${Setting}" = $CacheValue
			WriteRepositoryFile -obj $c[1]
			Write-Verbose ("Ok.")
		}
		else
		{
			Write-Host -ForegroundColor Magenta "Enter valid CacheValue for $Setting."
			Write-LogWarning "Enter valid CacheValue for $Setting."
		}
	}
	elseif ($Setting -eq "RepositoryReport")
	{
		if ($Format)
		{
			$c[1].settings. "${Setting}" = $Format
			WriteRepositoryFile -obj $c[1]
			Write-Verbose ("Ok.")
		}
		else
		{
			Write-Host -ForegroundColor Magenta "Enter valid Format for $Setting."
			Write-LogWarning "Enter valid Format for $Setting."
		}
	}
}

<#
.SYNOPSIS
    Get repository configuration values

.DESCRIPTION
  This function get various configuration options that control synchronization behavior.

.PARAMETER setting
  The setting to retrieve

.Example
  Get-RepositoryConfiguration -Setting OfflineCacheMode

.Example
  Get-RepositoryConfiguration -Setting OnRemoteFileNotFound

.Example
  Get-RepositoryConfiguration -Setting RepositoryReport

.LINK
  [Set-RepositoryConfiguration](Set-RepositoryConfiguration)

.LINK
  [Initialize-Repository](Initialize-Repository)
#>
function Get-RepositoryConfiguration
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/Get-RepositoryConfiguration")]
	param (
		[Parameter(Position = 0, Mandatory = $true)]
		[string][ValidateSet('OnRemoteFileNotFound', 'OfflineCacheMode', 'RepositoryReport')]
		$Setting
	)
	$c = LoadRepository
	if (-not $c[0]) { return }
	$c[1].settings. "${Setting}"
}


<#
.SYNOPSIS
  Create a report from a repository directory

.DESCRIPTION
  This function scans a repository (or any directory containing CVAs and EXEs) and creates a report in one of the supported formats.

  Currently the supported formats are:

  - XML - Return an XML object
  - JSON - Return a JSON document
  - CSV - Return a CSV document
  - ExcelCSV - Return a CSV document containing an Excel hint that defines comma as a default separator. Use this only if you plan on opening the CSV file with Excel.

  If a format is not specified, the function will return PowerShell objects to the pipeline.

.PARAMETER Format
  Specify the output format (CSV, JSON, or XML). If not specified, the function will return PowerShell objects.

.PARAMETER RepositoryPath
  By default, the function assumes the repository is in the current directory. This parameter allows specifying a different location for the repository.

.PARAMETER OutputFile
  Specify an output file for the function. Can only be specified together with "Format".

.EXAMPLE
  New-RepositoryReport -Format JSON -RepositoryPath c:\myrepository\softpaqs -OutputFile c:\repository\today.json

.NOTES
  The function currently supports scenarios where the SoftPaq executable is stored under the format sp<softpaq-number>.exe.
#>
function New-RepositoryReport
{
	[CmdletBinding(HelpUri = "https://developers.hp.com/hp-client-management/doc/New-RepositoryReport")]
	param (
		[Parameter(Position = 0, Mandatory = $false)]
		[ValidateSet('CSV', 'JSon', 'XML', 'ExcelCSV')]
		[string]$Format,
		[Parameter(Position = 1, Mandatory = $false)]
		[System.IO.DirectoryInfo]$RepositoryPath = '.',
		[Parameter(Position = 2, Mandatory = $false)]
		[System.IO.FileInfo]$OutputFile
	)
	if ($OutputFile -and -not $format) { throw "OutputFile parameter requires a Format specifier" }
	$cvaList = Get-ChildItem -Path $RepositoryPath -Filter '*.cva'
	
	if (-not $cvaList -or -not $cvaList.Length)
	{
		throw [System.IO.FileNotFoundException]"Directory '$(Get-Location)' does not contain CVA files."
	}
	
	Write-Verbose "Processing $($cvaList.Length) CVAs"
	$results = $cvaList | ForEach-Object {
		$cva = Get-HPPrivateReadINI $_.FullName
		
		try
		{
			$exe = Get-ChildItem -Path ($cva.Softpaq.SoftpaqNumber.trim() + ".exe") -ErrorAction stop
		}
		catch [System.Management.Automation.ItemNotFoundException]{
			$exe = $null
		}
		
		[pscustomobject]@{
			Softpaq = $cva.Softpaq.SoftpaqNumber
			Vendor  = $cva.General.VendorName
			Title   = $cva. "Software Title".US
			type    = if ($Cva.General.Category.contains("-")) { $Cva.General.Category.substring(0, $Cva.General.Category.IndexOf('-')).trim() } else { $Cva.General.Category }
			Version = "$($cva.General.Version) Rev.$($cva.General.Revision)"
			Downloaded = if ($exe) { $exe.CreationTime } else { "" }
			Size    = if ($exe) { "$($exe.Length)" } else { "" }
		}
	}
	switch ($format)
	{
		"CSV" {
			$r = $results | ConvertTo-Csv -NoTypeInformation
		}
		"ExcelCSV" {
			
			$r = $results | ConvertTo-Csv -NoTypeInformation
			$r = [string[]]"sep=," + $r
		}
		"JSon" {
			$r = $results | ConvertTo-Json
		}
		"XML" {
			$r = $results | ConvertTo-Xml -NoTypeInformation
		}
		default {
			return $results
		}
	}
	
	if ($OutputFile)
	{
		if ($format -eq "xml") { $r = $r.OuterXml }
		$r | Out-File -FilePath $OutputFile -Encoding utf8
	}
	else { $r }
}
#endregion
#region functions
function check-repopath
{
	$repotestpath = $txtboxRepoLocation.Text
	
	if ((Test-Path $repotestpath) -eq $true)
	{
		$lblNoRepoDetected.Text = "Repository Detected"
		$lblNoRepoDetected.ForeColor = 'Green'
		$btnSyncOrCreateRepo.Text = "Sync"
		update-modelgrid
	}
	
	if ((Test-Path $repotestpath) -eq $false)
	{
		$lblNoRepoDetected.Text = "Repository not found"
		$lblNoRepoDetected.ForeColor = 'Red'
		$btnSyncOrCreateRepo.Text = 'Create'
		$dt.Rows.Clear();
	}
	
	
}
function update-modelgrid
{
	$repo = $txtboxRepoLocation.Text
	$dt.Rows.Clear();
	Set-Location $repo
	$filters = (Get-RepositoryInfo).Filters
	foreach ($plat in $filters)
	{
		$platform = $plat.platform
		$models = Get-HPDeviceDetails -Platform $platform
		
		foreach ($model in $models)
		{
			
			$osinfo = $plat.operatingsystem
			$currentstores = $plat.category
			$modelname = $model.name
			$dt.Rows.Add("$false", "$platform", "$modelname", "$osinfo", "$currentstores")
		}
	}
}
function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}
function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}
function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
function Clear-ModelGrid
{
	$dt.Rows.Clear();
}
#endregion
#region event handlers
$buttonBrowseFolder_Click2={
	if($folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
	{
		$txtboxRepoLocation.Text = $folderbrowsermoderndialog2.SelectedPath
	}
}

$txtboxRepoLocation_TextChanged= {
	
	$repolocation = $txtboxRepoLocation.Text
	$repoparent = Split-Path -Parent $repolocation
	$console.Text = ""
	$dt.Rows.Clear();
	
	if ((Test-Path -Path "$repolocation\.repository\") -eq $true)
	{
		$script:repositorypath = $repolocation
		Set-Location "$repolocation"
		$lblNoRepoDetected.Text = "Repository Detected"
		$lblNoRepoDetected.ForeColor = 'Green'
		$btnSyncOrCreateRepo.Text = "Sync"
		Add-Logs "repository detected at $repolocation..."
		Add-Logs "loading current model table from target repo..."
		update-modelgrid
		
	}
	if ((Test-Path -Path "$repolocation\.repository\") -eq $false)
	{
		$dt.Rows.Clear();
		$lblNoRepoDetected.Text = "Repository not found"
		$lblNoRepoDetected.ForeColor = 'Red'
		$btnSyncOrCreateRepo.Text = 'Create'
		Add-Logs "repo not found. click create to create a repo in the target directory."
	}
}

$btnSyncOrCreateRepo_Click = {
	#TODO: Place custom script here
	$repolocation = $txtboxRepoLocation.Text
	$repoexists = Test-Path -Path "$repolocation\.repository\"
	
	if ($repoexists -eq $false)
	{
		$newrepopath = New-Item -Path "$repolocation\HPIACommon" -ItemType directory
		Add-Logs "folder HPIACommon created in target dir..."
		Set-Location $newrepopath
		Initialize-Repository
		Add-Logs "new repo initialized at $newrepopath..."
		Set-RepositoryConfiguration -Setting OfflineCacheMode -CacheValue Enable
		Set-RepositoryConfiguration -Setting RepositoryReport -Format CSV
		Set-RepositoryConfiguration -Setting OnRemoteFileNotFound -Value LogAndContinue
		Add-Logs "repo configured for usage with cmsl..."
		$softwarefolder = "$newrepopath\.addsoftware"
		New-Item -Path $softwarefolder -ItemType directory
		Add-Logs "software folder added..."
		Add-Logs "new repo setup completed. models can now be added from either the repomodels.csv folder or from the UI"
		$txtboxRepoLocation.Text = $newrepopath
		if ($repoexists -eq $true)
		{
			$btnSyncOrCreateRepo.Text = "Sync"
		}
	}
	if ($repoexists -eq $true)
	{
		Invoke-RepositorySync
	}
}

$buttonBrowseFolder_Click={
	if($folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$txtboxRepoLocation.Text = $folderbrowsermoderndialog1.SelectedPath
	}
}

$btnAddModelsFromSccm_Click = {
	$ErrorActionPreference = 'SilentlyContinue'
	Show-fromsccm_psf
	update-modelgrid
}

$console_TextChanged={
	#TODO: Place custom script here
	$console.SelectionStart = $console.Text.Length
	$console.ScrollToCaret()
}

$btnAddModeltoRepo_Click =
{
	$ErrorActionPreference = 'SilentlyContinue'
	Show-AddModel_psf
	update-modelgrid
}

$buttonRemoveFromRepo_Click={
	
	$selecteditems = @()
	foreach ($pc in $dt)
	{
		if (($pc.select) -eq $true)
		{
			$selecteditems += $pc.platform
			
			foreach ($platform in $selecteditems)
			{
				Remove-RepositoryFilter -Platform $platform -Yes
				Add-Logs "$platform removed from repo"
			}
		}
		
	}
	update-modelgrid
	
}

$picturebox1_Click = {
	update-modelgrid
}

$btnHelp_Click={
	Show-help_psf
}
#endregion
$buttonExampleHPIACMD_Click = {
	
	Show-hpia_command_psf
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>